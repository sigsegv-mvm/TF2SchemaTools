// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "econ_gcmessages.pb.h"

#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning(push)
#pragma warning(disable : 4530)	// warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)	// warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)	// warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)	// warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)	// warning C4127: conditional expression is constant
#pragma warning(disable : 4100)	// warning C4100: 'op' : unreferenced formal parameter
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _PS3
#endif // _GNUC

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgApplyAutograph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyAutograph_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEconPlayerStrangeCountAdjustment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_FinalizePurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_RefundPurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCraftingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCraftingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse_Price_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesDataResponse_Price_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCPingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCPingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCPingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserSessionServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserSessionServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserServerMembers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGetUserServerMembersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLookupMultipleAccountNames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLookupMultipleAccountNamesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse_Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLookupMultipleAccountNamesResponse_Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCGrantSelfMadeItemToAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCGrantSelfMadeItemToAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCThankedByNewUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCThankedByNewUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCShuffleCrateContents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCShuffleCrateContents_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_Progress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestObjective_Progress_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_PointsChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestObjective_PointsChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestComplete_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestComplete_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestCompleted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestCompleted_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_RequestLoanerItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestObjective_RequestLoanerItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_RequestLoanerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestObjective_RequestLoanerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCraftCollectionUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCraftCollectionUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCraftHalloweenOffering_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCraftHalloweenOffering_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCraftCommonStatClock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCraftCommonStatClock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCQuestDiscard_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCQuestDiscard_Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCItemMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCMsgResponse_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUnlockStyle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Finalize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Refund_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_econ_5fgcmessages_2eproto() {
  protobuf_AddDesc_econ_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "econ_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgApplyAutograph_descriptor_ = file->message_type(0);
  static const int CMsgApplyAutograph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, autograph_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, item_item_id_),
  };
  CMsgApplyAutograph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyAutograph_descriptor_,
      CMsgApplyAutograph::default_instance_,
      CMsgApplyAutograph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyAutograph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyAutograph));
  CMsgEconPlayerStrangeCountAdjustment_descriptor_ = file->message_type(1);
  static const int CMsgEconPlayerStrangeCountAdjustment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, strange_count_adjustments_),
  };
  CMsgEconPlayerStrangeCountAdjustment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEconPlayerStrangeCountAdjustment_descriptor_,
      CMsgEconPlayerStrangeCountAdjustment::default_instance_,
      CMsgEconPlayerStrangeCountAdjustment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEconPlayerStrangeCountAdjustment));
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_ = CMsgEconPlayerStrangeCountAdjustment_descriptor_->nested_type(0);
  static const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, adjustment_),
  };
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_,
      CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_,
      CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment));
  CMsgRequestItemPurgatory_FinalizePurchase_descriptor_ = file->message_type(2);
  static const int CMsgRequestItemPurgatory_FinalizePurchase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchase, item_ids_),
  };
  CMsgRequestItemPurgatory_FinalizePurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_FinalizePurchase_descriptor_,
      CMsgRequestItemPurgatory_FinalizePurchase::default_instance_,
      CMsgRequestItemPurgatory_FinalizePurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_FinalizePurchase));
  CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_ = file->message_type(3);
  static const int CMsgRequestItemPurgatory_FinalizePurchaseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchaseResponse, result_),
  };
  CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_,
      CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_,
      CMsgRequestItemPurgatory_FinalizePurchaseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchaseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_FinalizePurchaseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_FinalizePurchaseResponse));
  CMsgRequestItemPurgatory_RefundPurchase_descriptor_ = file->message_type(4);
  static const int CMsgRequestItemPurgatory_RefundPurchase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchase, item_id_),
  };
  CMsgRequestItemPurgatory_RefundPurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_RefundPurchase_descriptor_,
      CMsgRequestItemPurgatory_RefundPurchase::default_instance_,
      CMsgRequestItemPurgatory_RefundPurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_RefundPurchase));
  CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_ = file->message_type(5);
  static const int CMsgRequestItemPurgatory_RefundPurchaseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchaseResponse, result_),
  };
  CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_,
      CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_,
      CMsgRequestItemPurgatory_RefundPurchaseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchaseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestItemPurgatory_RefundPurchaseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestItemPurgatory_RefundPurchaseResponse));
  CMsgCraftingResponse_descriptor_ = file->message_type(6);
  static const int CMsgCraftingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftingResponse, item_ids_),
  };
  CMsgCraftingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCraftingResponse_descriptor_,
      CMsgCraftingResponse::default_instance_,
      CMsgCraftingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCraftingResponse));
  CMsgGCRequestStoreSalesData_descriptor_ = file->message_type(7);
  static const int CMsgGCRequestStoreSalesData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, currency_),
  };
  CMsgGCRequestStoreSalesData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesData_descriptor_,
      CMsgGCRequestStoreSalesData::default_instance_,
      CMsgGCRequestStoreSalesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesData));
  CMsgGCRequestStoreSalesDataResponse_descriptor_ = file->message_type(8);
  static const int CMsgGCRequestStoreSalesDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, sale_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, expiration_time_),
  };
  CMsgGCRequestStoreSalesDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesDataResponse_descriptor_,
      CMsgGCRequestStoreSalesDataResponse::default_instance_,
      CMsgGCRequestStoreSalesDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesDataResponse));
  CMsgGCRequestStoreSalesDataResponse_Price_descriptor_ = CMsgGCRequestStoreSalesDataResponse_descriptor_->nested_type(0);
  static const int CMsgGCRequestStoreSalesDataResponse_Price_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, price_),
  };
  CMsgGCRequestStoreSalesDataResponse_Price_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesDataResponse_Price_descriptor_,
      CMsgGCRequestStoreSalesDataResponse_Price::default_instance_,
      CMsgGCRequestStoreSalesDataResponse_Price_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesDataResponse_Price));
  CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_ = file->message_type(9);
  static const int CMsgGCRequestStoreSalesDataUpToDateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, expiration_time_),
  };
  CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_,
      CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_,
      CMsgGCRequestStoreSalesDataUpToDateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRequestStoreSalesDataUpToDateResponse));
  CMsgGCToGCPingRequest_descriptor_ = file->message_type(10);
  static const int CMsgGCToGCPingRequest_offsets_[1] = {
  };
  CMsgGCToGCPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCPingRequest_descriptor_,
      CMsgGCToGCPingRequest::default_instance_,
      CMsgGCToGCPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCPingRequest));
  CMsgGCToGCPingResponse_descriptor_ = file->message_type(11);
  static const int CMsgGCToGCPingResponse_offsets_[1] = {
  };
  CMsgGCToGCPingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCPingResponse_descriptor_,
      CMsgGCToGCPingResponse::default_instance_,
      CMsgGCToGCPingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCPingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCPingResponse));
  CMsgGCToGCGetUserSessionServer_descriptor_ = file->message_type(12);
  static const int CMsgGCToGCGetUserSessionServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServer, account_id_),
  };
  CMsgGCToGCGetUserSessionServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserSessionServer_descriptor_,
      CMsgGCToGCGetUserSessionServer::default_instance_,
      CMsgGCToGCGetUserSessionServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserSessionServer));
  CMsgGCToGCGetUserSessionServerResponse_descriptor_ = file->message_type(13);
  static const int CMsgGCToGCGetUserSessionServerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, server_steam_id_),
  };
  CMsgGCToGCGetUserSessionServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserSessionServerResponse_descriptor_,
      CMsgGCToGCGetUserSessionServerResponse::default_instance_,
      CMsgGCToGCGetUserSessionServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserSessionServerResponse));
  CMsgGCToGCGetUserServerMembers_descriptor_ = file->message_type(14);
  static const int CMsgGCToGCGetUserServerMembers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, max_spectators_),
  };
  CMsgGCToGCGetUserServerMembers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserServerMembers_descriptor_,
      CMsgGCToGCGetUserServerMembers::default_instance_,
      CMsgGCToGCGetUserServerMembers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserServerMembers));
  CMsgGCToGCGetUserServerMembersResponse_descriptor_ = file->message_type(15);
  static const int CMsgGCToGCGetUserServerMembersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembersResponse, member_account_id_),
  };
  CMsgGCToGCGetUserServerMembersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGetUserServerMembersResponse_descriptor_,
      CMsgGCToGCGetUserServerMembersResponse::default_instance_,
      CMsgGCToGCGetUserServerMembersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGetUserServerMembersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGetUserServerMembersResponse));
  CMsgLookupMultipleAccountNames_descriptor_ = file->message_type(16);
  static const int CMsgLookupMultipleAccountNames_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNames, accountids_),
  };
  CMsgLookupMultipleAccountNames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLookupMultipleAccountNames_descriptor_,
      CMsgLookupMultipleAccountNames::default_instance_,
      CMsgLookupMultipleAccountNames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLookupMultipleAccountNames));
  CMsgLookupMultipleAccountNamesResponse_descriptor_ = file->message_type(17);
  static const int CMsgLookupMultipleAccountNamesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse, accounts_),
  };
  CMsgLookupMultipleAccountNamesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLookupMultipleAccountNamesResponse_descriptor_,
      CMsgLookupMultipleAccountNamesResponse::default_instance_,
      CMsgLookupMultipleAccountNamesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLookupMultipleAccountNamesResponse));
  CMsgLookupMultipleAccountNamesResponse_Account_descriptor_ = CMsgLookupMultipleAccountNamesResponse_descriptor_->nested_type(0);
  static const int CMsgLookupMultipleAccountNamesResponse_Account_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, persona_),
  };
  CMsgLookupMultipleAccountNamesResponse_Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLookupMultipleAccountNamesResponse_Account_descriptor_,
      CMsgLookupMultipleAccountNamesResponse_Account::default_instance_,
      CMsgLookupMultipleAccountNamesResponse_Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLookupMultipleAccountNamesResponse_Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLookupMultipleAccountNamesResponse_Account));
  CMsgGCToGCGrantSelfMadeItemToAccount_descriptor_ = file->message_type(18);
  static const int CMsgGCToGCGrantSelfMadeItemToAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, item_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, accountid_),
  };
  CMsgGCToGCGrantSelfMadeItemToAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCGrantSelfMadeItemToAccount_descriptor_,
      CMsgGCToGCGrantSelfMadeItemToAccount::default_instance_,
      CMsgGCToGCGrantSelfMadeItemToAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCGrantSelfMadeItemToAccount));
  CMsgGCToGCThankedByNewUser_descriptor_ = file->message_type(19);
  static const int CMsgGCToGCThankedByNewUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCThankedByNewUser, new_user_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCThankedByNewUser, thanked_user_accountid_),
  };
  CMsgGCToGCThankedByNewUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToGCThankedByNewUser_descriptor_,
      CMsgGCToGCThankedByNewUser::default_instance_,
      CMsgGCToGCThankedByNewUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCThankedByNewUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCThankedByNewUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToGCThankedByNewUser));
  CMsgGCShuffleCrateContents_descriptor_ = file->message_type(20);
  static const int CMsgGCShuffleCrateContents_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShuffleCrateContents, crate_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShuffleCrateContents, user_code_string_),
  };
  CMsgGCShuffleCrateContents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCShuffleCrateContents_descriptor_,
      CMsgGCShuffleCrateContents::default_instance_,
      CMsgGCShuffleCrateContents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShuffleCrateContents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShuffleCrateContents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCShuffleCrateContents));
  CMsgGCQuestObjective_Progress_descriptor_ = file->message_type(21);
  static const int CMsgGCQuestObjective_Progress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_Progress, quest_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_Progress, quest_attrib_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_Progress, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_Progress, owner_steamid_),
  };
  CMsgGCQuestObjective_Progress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestObjective_Progress_descriptor_,
      CMsgGCQuestObjective_Progress::default_instance_,
      CMsgGCQuestObjective_Progress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_Progress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_Progress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestObjective_Progress));
  CMsgGCQuestObjective_PointsChange_descriptor_ = file->message_type(22);
  static const int CMsgGCQuestObjective_PointsChange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_PointsChange, quest_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_PointsChange, standard_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_PointsChange, bonus_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_PointsChange, owner_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_PointsChange, update_base_points_),
  };
  CMsgGCQuestObjective_PointsChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestObjective_PointsChange_descriptor_,
      CMsgGCQuestObjective_PointsChange::default_instance_,
      CMsgGCQuestObjective_PointsChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_PointsChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_PointsChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestObjective_PointsChange));
  CMsgGCQuestComplete_Request_descriptor_ = file->message_type(23);
  static const int CMsgGCQuestComplete_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestComplete_Request, quest_item_id_),
  };
  CMsgGCQuestComplete_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestComplete_Request_descriptor_,
      CMsgGCQuestComplete_Request::default_instance_,
      CMsgGCQuestComplete_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestComplete_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestComplete_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestComplete_Request));
  CMsgGCQuestCompleted_descriptor_ = file->message_type(24);
  static const int CMsgGCQuestCompleted_offsets_[1] = {
  };
  CMsgGCQuestCompleted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestCompleted_descriptor_,
      CMsgGCQuestCompleted::default_instance_,
      CMsgGCQuestCompleted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestCompleted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestCompleted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestCompleted));
  CMsgGCQuestObjective_RequestLoanerItems_descriptor_ = file->message_type(25);
  static const int CMsgGCQuestObjective_RequestLoanerItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_RequestLoanerItems, quest_item_id_),
  };
  CMsgGCQuestObjective_RequestLoanerItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestObjective_RequestLoanerItems_descriptor_,
      CMsgGCQuestObjective_RequestLoanerItems::default_instance_,
      CMsgGCQuestObjective_RequestLoanerItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_RequestLoanerItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_RequestLoanerItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestObjective_RequestLoanerItems));
  CMsgGCQuestObjective_RequestLoanerResponse_descriptor_ = file->message_type(26);
  static const int CMsgGCQuestObjective_RequestLoanerResponse_offsets_[1] = {
  };
  CMsgGCQuestObjective_RequestLoanerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestObjective_RequestLoanerResponse_descriptor_,
      CMsgGCQuestObjective_RequestLoanerResponse::default_instance_,
      CMsgGCQuestObjective_RequestLoanerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_RequestLoanerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestObjective_RequestLoanerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestObjective_RequestLoanerResponse));
  CMsgCraftCollectionUpgrade_descriptor_ = file->message_type(27);
  static const int CMsgCraftCollectionUpgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftCollectionUpgrade, item_id_),
  };
  CMsgCraftCollectionUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCraftCollectionUpgrade_descriptor_,
      CMsgCraftCollectionUpgrade::default_instance_,
      CMsgCraftCollectionUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftCollectionUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftCollectionUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCraftCollectionUpgrade));
  CMsgCraftHalloweenOffering_descriptor_ = file->message_type(28);
  static const int CMsgCraftHalloweenOffering_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftHalloweenOffering, tool_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftHalloweenOffering, item_id_),
  };
  CMsgCraftHalloweenOffering_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCraftHalloweenOffering_descriptor_,
      CMsgCraftHalloweenOffering::default_instance_,
      CMsgCraftHalloweenOffering_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftHalloweenOffering, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftHalloweenOffering, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCraftHalloweenOffering));
  CMsgCraftCommonStatClock_descriptor_ = file->message_type(29);
  static const int CMsgCraftCommonStatClock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftCommonStatClock, tool_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftCommonStatClock, item_id_),
  };
  CMsgCraftCommonStatClock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCraftCommonStatClock_descriptor_,
      CMsgCraftCommonStatClock::default_instance_,
      CMsgCraftCommonStatClock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftCommonStatClock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCraftCommonStatClock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCraftCommonStatClock));
  CMsgGCQuestDiscard_Request_descriptor_ = file->message_type(30);
  static const int CMsgGCQuestDiscard_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestDiscard_Request, quest_item_id_),
  };
  CMsgGCQuestDiscard_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCQuestDiscard_Request_descriptor_,
      CMsgGCQuestDiscard_Request::default_instance_,
      CMsgGCQuestDiscard_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestDiscard_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCQuestDiscard_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCQuestDiscard_Request));
  EGCItemMsg_descriptor_ = file->enum_type(0);
  EGCMsgResponse_descriptor_ = file->enum_type(1);
  EUnlockStyle_descriptor_ = file->enum_type(2);
  EItemPurgatoryResponse_Finalize_descriptor_ = file->enum_type(3);
  EItemPurgatoryResponse_Refund_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_econ_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyAutograph_descriptor_, &CMsgApplyAutograph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEconPlayerStrangeCountAdjustment_descriptor_, &CMsgEconPlayerStrangeCountAdjustment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_, &CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_FinalizePurchase_descriptor_, &CMsgRequestItemPurgatory_FinalizePurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_, &CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_RefundPurchase_descriptor_, &CMsgRequestItemPurgatory_RefundPurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_, &CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCraftingResponse_descriptor_, &CMsgCraftingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesData_descriptor_, &CMsgGCRequestStoreSalesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesDataResponse_descriptor_, &CMsgGCRequestStoreSalesDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesDataResponse_Price_descriptor_, &CMsgGCRequestStoreSalesDataResponse_Price::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_, &CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCPingRequest_descriptor_, &CMsgGCToGCPingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCPingResponse_descriptor_, &CMsgGCToGCPingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserSessionServer_descriptor_, &CMsgGCToGCGetUserSessionServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserSessionServerResponse_descriptor_, &CMsgGCToGCGetUserSessionServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserServerMembers_descriptor_, &CMsgGCToGCGetUserServerMembers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGetUserServerMembersResponse_descriptor_, &CMsgGCToGCGetUserServerMembersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLookupMultipleAccountNames_descriptor_, &CMsgLookupMultipleAccountNames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLookupMultipleAccountNamesResponse_descriptor_, &CMsgLookupMultipleAccountNamesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLookupMultipleAccountNamesResponse_Account_descriptor_, &CMsgLookupMultipleAccountNamesResponse_Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCGrantSelfMadeItemToAccount_descriptor_, &CMsgGCToGCGrantSelfMadeItemToAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToGCThankedByNewUser_descriptor_, &CMsgGCToGCThankedByNewUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCShuffleCrateContents_descriptor_, &CMsgGCShuffleCrateContents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestObjective_Progress_descriptor_, &CMsgGCQuestObjective_Progress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestObjective_PointsChange_descriptor_, &CMsgGCQuestObjective_PointsChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestComplete_Request_descriptor_, &CMsgGCQuestComplete_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestCompleted_descriptor_, &CMsgGCQuestCompleted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestObjective_RequestLoanerItems_descriptor_, &CMsgGCQuestObjective_RequestLoanerItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestObjective_RequestLoanerResponse_descriptor_, &CMsgGCQuestObjective_RequestLoanerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCraftCollectionUpgrade_descriptor_, &CMsgCraftCollectionUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCraftHalloweenOffering_descriptor_, &CMsgCraftHalloweenOffering::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCraftCommonStatClock_descriptor_, &CMsgCraftCommonStatClock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCQuestDiscard_Request_descriptor_, &CMsgGCQuestDiscard_Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_econ_5fgcmessages_2eproto() {
  delete CMsgApplyAutograph::default_instance_;
  delete CMsgApplyAutograph_reflection_;
  delete CMsgEconPlayerStrangeCountAdjustment::default_instance_;
  delete CMsgEconPlayerStrangeCountAdjustment_reflection_;
  delete CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_;
  delete CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_;
  delete CMsgRequestItemPurgatory_FinalizePurchase::default_instance_;
  delete CMsgRequestItemPurgatory_FinalizePurchase_reflection_;
  delete CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_;
  delete CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_;
  delete CMsgRequestItemPurgatory_RefundPurchase::default_instance_;
  delete CMsgRequestItemPurgatory_RefundPurchase_reflection_;
  delete CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_;
  delete CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_;
  delete CMsgCraftingResponse::default_instance_;
  delete CMsgCraftingResponse_reflection_;
  delete CMsgGCRequestStoreSalesData::default_instance_;
  delete CMsgGCRequestStoreSalesData_reflection_;
  delete CMsgGCRequestStoreSalesDataResponse::default_instance_;
  delete CMsgGCRequestStoreSalesDataResponse_reflection_;
  delete CMsgGCRequestStoreSalesDataResponse_Price::default_instance_;
  delete CMsgGCRequestStoreSalesDataResponse_Price_reflection_;
  delete CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_;
  delete CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_;
  delete CMsgGCToGCPingRequest::default_instance_;
  delete CMsgGCToGCPingRequest_reflection_;
  delete CMsgGCToGCPingResponse::default_instance_;
  delete CMsgGCToGCPingResponse_reflection_;
  delete CMsgGCToGCGetUserSessionServer::default_instance_;
  delete CMsgGCToGCGetUserSessionServer_reflection_;
  delete CMsgGCToGCGetUserSessionServerResponse::default_instance_;
  delete CMsgGCToGCGetUserSessionServerResponse_reflection_;
  delete CMsgGCToGCGetUserServerMembers::default_instance_;
  delete CMsgGCToGCGetUserServerMembers_reflection_;
  delete CMsgGCToGCGetUserServerMembersResponse::default_instance_;
  delete CMsgGCToGCGetUserServerMembersResponse_reflection_;
  delete CMsgLookupMultipleAccountNames::default_instance_;
  delete CMsgLookupMultipleAccountNames_reflection_;
  delete CMsgLookupMultipleAccountNamesResponse::default_instance_;
  delete CMsgLookupMultipleAccountNamesResponse_reflection_;
  delete CMsgLookupMultipleAccountNamesResponse_Account::default_instance_;
  delete CMsgLookupMultipleAccountNamesResponse_Account_reflection_;
  delete CMsgGCToGCGrantSelfMadeItemToAccount::default_instance_;
  delete CMsgGCToGCGrantSelfMadeItemToAccount_reflection_;
  delete CMsgGCToGCThankedByNewUser::default_instance_;
  delete CMsgGCToGCThankedByNewUser_reflection_;
  delete CMsgGCShuffleCrateContents::default_instance_;
  delete CMsgGCShuffleCrateContents_reflection_;
  delete CMsgGCQuestObjective_Progress::default_instance_;
  delete CMsgGCQuestObjective_Progress_reflection_;
  delete CMsgGCQuestObjective_PointsChange::default_instance_;
  delete CMsgGCQuestObjective_PointsChange_reflection_;
  delete CMsgGCQuestComplete_Request::default_instance_;
  delete CMsgGCQuestComplete_Request_reflection_;
  delete CMsgGCQuestCompleted::default_instance_;
  delete CMsgGCQuestCompleted_reflection_;
  delete CMsgGCQuestObjective_RequestLoanerItems::default_instance_;
  delete CMsgGCQuestObjective_RequestLoanerItems_reflection_;
  delete CMsgGCQuestObjective_RequestLoanerResponse::default_instance_;
  delete CMsgGCQuestObjective_RequestLoanerResponse_reflection_;
  delete CMsgCraftCollectionUpgrade::default_instance_;
  delete CMsgCraftCollectionUpgrade_reflection_;
  delete CMsgCraftHalloweenOffering::default_instance_;
  delete CMsgCraftHalloweenOffering_reflection_;
  delete CMsgCraftCommonStatClock::default_instance_;
  delete CMsgCraftCommonStatClock_reflection_;
  delete CMsgGCQuestDiscard_Request::default_instance_;
  delete CMsgGCQuestDiscard_Request_reflection_;
}

void protobuf_AddDesc_econ_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025econ_gcmessages.proto\032\023steammessages.p"
    "roto\"E\n\022CMsgApplyAutograph\022\031\n\021autograph_"
    "item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"\360\001\n$"
    "CMsgEconPlayerStrangeCountAdjustment\022\022\n\n"
    "account_id\030\001 \001(\r\022`\n\031strange_count_adjust"
    "ments\030\002 \003(\0132=.CMsgEconPlayerStrangeCount"
    "Adjustment.CStrangeCountAdjustment\032R\n\027CS"
    "trangeCountAdjustment\022\022\n\nevent_type\030\001 \001("
    "\r\022\017\n\007item_id\030\002 \001(\004\022\022\n\nadjustment\030\003 \001(\r\"="
    "\n)CMsgRequestItemPurgatory_FinalizePurch"
    "ase\022\020\n\010item_ids\030\001 \003(\004\"C\n1CMsgRequestItem"
    "Purgatory_FinalizePurchaseResponse\022\016\n\006re"
    "sult\030\001 \001(\r\":\n\'CMsgRequestItemPurgatory_R"
    "efundPurchase\022\017\n\007item_id\030\001 \001(\004\"A\n/CMsgRe"
    "questItemPurgatory_RefundPurchaseRespons"
    "e\022\016\n\006result\030\001 \001(\r\"(\n\024CMsgCraftingRespons"
    "e\022\020\n\010item_ids\030\001 \003(\004\"@\n\033CMsgGCRequestStor"
    "eSalesData\022\017\n\007version\030\001 \001(\r\022\020\n\010currency\030"
    "\002 \001(\r\"\271\001\n#CMsgGCRequestStoreSalesDataRes"
    "ponse\022>\n\nsale_price\030\001 \003(\0132*.CMsgGCReques"
    "tStoreSalesDataResponse.Price\022\017\n\007version"
    "\030\002 \001(\r\022\027\n\017expiration_time\030\003 \001(\r\032(\n\005Price"
    "\022\020\n\010item_def\030\001 \001(\r\022\r\n\005price\030\002 \001(\r\"W\n+CMs"
    "gGCRequestStoreSalesDataUpToDateResponse"
    "\022\017\n\007version\030\001 \001(\r\022\027\n\017expiration_time\030\002 \001"
    "(\r\"\027\n\025CMsgGCToGCPingRequest\"\030\n\026CMsgGCToG"
    "CPingResponse\"4\n\036CMsgGCToGCGetUserSessio"
    "nServer\022\022\n\naccount_id\030\001 \001(\r\"A\n&CMsgGCToG"
    "CGetUserSessionServerResponse\022\027\n\017server_"
    "steam_id\030\001 \001(\006\"L\n\036CMsgGCToGCGetUserServe"
    "rMembers\022\022\n\naccount_id\030\001 \001(\r\022\026\n\016max_spec"
    "tators\030\002 \001(\r\"C\n&CMsgGCToGCGetUserServerM"
    "embersResponse\022\031\n\021member_account_id\030\001 \003("
    "\r\"8\n\036CMsgLookupMultipleAccountNames\022\026\n\na"
    "ccountids\030\001 \003(\rB\002\020\001\"\232\001\n&CMsgLookupMultip"
    "leAccountNamesResponse\022A\n\010accounts\030\001 \003(\013"
    "2/.CMsgLookupMultipleAccountNamesRespons"
    "e.Account\032-\n\007Account\022\021\n\taccountid\030\001 \001(\r\022"
    "\017\n\007persona\030\002 \001(\t\"Q\n$CMsgGCToGCGrantSelfM"
    "adeItemToAccount\022\026\n\016item_def_index\030\001 \001(\r"
    "\022\021\n\taccountid\030\002 \001(\r\"X\n\032CMsgGCToGCThanked"
    "ByNewUser\022\032\n\022new_user_accountid\030\001 \001(\r\022\036\n"
    "\026thanked_user_accountid\030\002 \001(\r\"M\n\032CMsgGCS"
    "huffleCrateContents\022\025\n\rcrate_item_id\030\001 \001"
    "(\004\022\030\n\020user_code_string\030\002 \001(\t\"x\n\035CMsgGCQu"
    "estObjective_Progress\022\025\n\rquest_item_id\030\001"
    " \001(\004\022\032\n\022quest_attrib_index\030\002 \001(\r\022\r\n\005delt"
    "a\030\003 \001(\r\022\025\n\rowner_steamid\030\004 \001(\006\"\243\001\n!CMsgG"
    "CQuestObjective_PointsChange\022\025\n\rquest_it"
    "em_id\030\001 \001(\004\022\027\n\017standard_points\030\002 \001(\r\022\024\n\014"
    "bonus_points\030\003 \001(\r\022\025\n\rowner_steamid\030\004 \001("
    "\006\022!\n\022update_base_points\030\005 \001(\010:\005false\"4\n\033"
    "CMsgGCQuestComplete_Request\022\025\n\rquest_ite"
    "m_id\030\001 \001(\004\"\026\n\024CMsgGCQuestCompleted\"@\n\'CM"
    "sgGCQuestObjective_RequestLoanerItems\022\025\n"
    "\rquest_item_id\030\001 \001(\004\",\n*CMsgGCQuestObjec"
    "tive_RequestLoanerResponse\"-\n\032CMsgCraftC"
    "ollectionUpgrade\022\017\n\007item_id\030\001 \003(\004\">\n\032CMs"
    "gCraftHalloweenOffering\022\017\n\007tool_id\030\001 \001(\004"
    "\022\017\n\007item_id\030\002 \003(\004\"<\n\030CMsgCraftCommonStat"
    "Clock\022\017\n\007tool_id\030\001 \001(\004\022\017\n\007item_id\030\002 \003(\004\""
    "3\n\032CMsgGCQuestDiscard_Request\022\025\n\rquest_i"
    "tem_id\030\001 \001(\004*\357/\n\nEGCItemMsg\022\021\n\014k_EMsgGCB"
    "ase\020\350\007\022\"\n\035k_EMsgGCSetSingleItemPosition\020"
    "\351\007\022\022\n\rk_EMsgGCCraft\020\352\007\022\032\n\025k_EMsgGCCraftR"
    "esponse\020\353\007\022\023\n\016k_EMsgGCDelete\020\354\007\022$\n\037k_EMs"
    "gGCVerifyCacheSubscription\020\355\007\022\025\n\020k_EMsgG"
    "CNameItem\020\356\007\022\030\n\023k_EMsgGCUnlockCrate\020\357\007\022 "
    "\n\033k_EMsgGCUnlockCrateResponse\020\360\007\022\026\n\021k_EM"
    "sgGCPaintItem\020\361\007\022\036\n\031k_EMsgGCPaintItemRes"
    "ponse\020\362\007\022\"\n\035k_EMsgGCGoldenWrenchBroadcas"
    "t\020\363\007\022\030\n\023k_EMsgGCMOTDRequest\020\364\007\022 \n\033k_EMsg"
    "GCMOTDRequestResponse\020\365\007\022\031\n\024k_EMsgGCName"
    "BaseItem\020\373\007\022!\n\034k_EMsgGCNameBaseItemRespo"
    "nse\020\374\007\022(\n#k_EMsgGCRemoveSocketItem_DEPRE"
    "CATED\020\375\007\0220\n+k_EMsgGCRemoveSocketItemResp"
    "onse_DEPRECATED\020\376\007\022!\n\034k_EMsgGCCustomizeI"
    "temTexture\020\377\007\022)\n$k_EMsgGCCustomizeItemTe"
    "xtureResponse\020\200\010\022\033\n\026k_EMsgGCUseItemReque"
    "st\020\201\010\022\034\n\027k_EMsgGCUseItemResponse\020\202\010\022%\n k"
    "_EMsgGCRespawnPostLoadoutChange\020\205\010\022\033\n\026k_"
    "EMsgGCRemoveItemName\020\206\010\022\034\n\027k_EMsgGCRemov"
    "eItemPaint\020\207\010\022\031\n\024k_EMsgGCGiftWrapItem\020\210\010"
    "\022!\n\034k_EMsgGCGiftWrapItemResponse\020\211\010\022\030\n\023k"
    "_EMsgGCDeliverGift\020\212\010\022(\n#k_EMsgGCDeliver"
    "GiftResponseReceiver\020\214\010\022\036\n\031k_EMsgGCUnwra"
    "pGiftRequest\020\215\010\022\037\n\032k_EMsgGCUnwrapGiftRes"
    "ponse\020\216\010\022\031\n\024k_EMsgGCSetItemStyle\020\217\010\022\036\n\031k"
    "_EMsgGCUsedClaimCodeItem\020\220\010\022\026\n\021k_EMsgGCS"
    "ortItems\020\221\010\022*\n%k_EMsgGC_RevolvingLootLis"
    "t_DEPRECATED\020\222\010\022\032\n\025k_EMsgGCLookupAccount"
    "\020\223\010\022\"\n\035k_EMsgGCLookupAccountResponse\020\224\010\022"
    "\036\n\031k_EMsgGCLookupAccountName\020\225\010\022&\n!k_EMs"
    "gGCLookupAccountNameResponse\020\226\010\022\035\n\030k_EMs"
    "gGCUpdateItemSchema\020\231\010\022$\n\037k_EMsgGCReques"
    "tInventoryRefresh\020\232\010\022 \n\033k_EMsgGCRemoveCu"
    "stomTexture\020\233\010\022(\n#k_EMsgGCRemoveCustomTe"
    "xtureResponse\020\234\010\022\035\n\030k_EMsgGCRemoveMakers"
    "Mark\020\235\010\022%\n k_EMsgGCRemoveMakersMarkRespo"
    "nse\020\236\010\022#\n\036k_EMsgGCRemoveUniqueCraftIndex"
    "\020\237\010\022+\n&k_EMsgGCRemoveUniqueCraftIndexRes"
    "ponse\020\240\010\022\033\n\026k_EMsgGCSaxxyBroadcast\020\241\010\022!\n"
    "\034k_EMsgGCBackpackSortFinished\020\242\010\022$\n\037k_EM"
    "sgGCAdjustItemEquippedState\020\243\010\022\030\n\023k_EMsg"
    "GCCollectItem\020\245\010\022\035\n\030k_EMsgGCItemAcknowle"
    "dged\020\246\010\022)\n$k_EMsgGCPresets_SelectPresetF"
    "orClass\020\247\010\022$\n\037k_EMsgGCPresets_SetItemPos"
    "ition\020\250\010\022\031\n\024k_EMsgGC_ReportAbuse\020\251\010\022!\n\034k"
    "_EMsgGC_ReportAbuseResponse\020\252\010\022.\n)k_EMsg"
    "GCPresets_SelectPresetForClassReply\020\253\010\022!"
    "\n\034k_EMsgGCNameItemNotification\020\254\010\022&\n!k_E"
    "MsgGCClientDisplayNotification\020\255\010\022\035\n\030k_E"
    "MsgGCApplyStrangePart\020\256\010\022)\n$k_EMsgGC_Inc"
    "rementKillCountAttribute\020\257\010\022(\n#k_EMsgGC_"
    "IncrementKillCountResponse\020\260\010\022\036\n\031k_EMsgG"
    "CRemoveStrangePart\020\261\010\022\037\n\032k_EMsgGCResetSt"
    "rangeScores\020\262\010\022\030\n\023k_EMsgGCGiftedItems\020\263\010"
    "\022\035\n\030k_EMsgGCApplyUpgradeCard\020\265\010\022\036\n\031k_EMs"
    "gGCRemoveUpgradeCard\020\266\010\022$\n\037k_EMsgGCApply"
    "StrangeRestriction\020\267\010\022$\n\037k_EMsgGCClientR"
    "equestMarketData\020\270\010\022,\n\'k_EMsgGCClientReq"
    "uestMarketDataResponse\020\271\010\022\030\n\023k_EMsgGCApp"
    "lyXifier\020\272\010\022 \n\033k_EMsgGCApplyXifierRespon"
    "se\020\273\010\022(\n#k_EMsgGC_TrackUniquePlayerPairE"
    "vent\020\274\010\022*\n%k_EMsgGCFulfillDynamicRecipeC"
    "omponent\020\275\010\0222\n-k_EMsgGCFulfillDynamicRec"
    "ipeComponentResponse\020\276\010\022(\n#k_EMsgGCSetIt"
    "emEffectVerticalOffset\020\277\010\022&\n!k_EMsgGCSet"
    "HatEffectUseHeadOrigin\020\300\010\022\037\n\032k_EMsgGCIte"
    "mEaterRecharger\020\301\010\022\'\n\"k_EMsgGCItemEaterR"
    "echargerResponse\020\302\010\022 \n\033k_EMsgGCApplyBase"
    "ItemXifier\020\303\010\022%\n k_EMsgGCApplyClassTrans"
    "mogrifier\020\304\010\022(\n#k_EMsgGCApplyHalloweenSp"
    "ellbookPage\020\305\010\022\035\n\030k_EMsgGCRemoveKillStre"
    "ak\020\306\010\022%\n k_EMsgGCRemoveKillStreakRespons"
    "e\020\307\010\022$\n\037k_EMsgGCTFSpecificItemBroadcast\020"
    "\310\010\0222\n-k_EMsgGC_IncrementKillCountAttribu"
    "te_Multiple\020\311\010\022%\n k_EMsgGCDeliverGiftRes"
    "ponseGiver\020\312\010\022\035\n\030k_EMsgGCSetItemPosition"
    "s\020\314\010\022\'\n\"k_EMsgGCLookupMultipleAccountNam"
    "es\020\315\010\022/\n*k_EMsgGCLookupMultipleAccountNa"
    "mesResponse\020\316\010\022\030\n\023k_EMsgGCTradingBase\020\334\013"
    "\022)\n$k_EMsgGCTrading_InitiateTradeRequest"
    "\020\335\013\022*\n%k_EMsgGCTrading_InitiateTradeResp"
    "onse\020\336\013\022!\n\034k_EMsgGCTrading_StartSession\020"
    "\337\013\022\"\n\035k_EMsgGCTrading_SessionClosed\020\345\013\022\""
    "\n\035k_EMsgGCTrading_CancelSession\020\346\013\0221\n,k_"
    "EMsgGCTrading_InitiateTradeRequestRespon"
    "se\020\352\013\022)\n$k_EMsgGCServerBrowser_FavoriteS"
    "erver\020\301\014\022*\n%k_EMsgGCServerBrowser_Blackl"
    "istServer\020\302\014\022\036\n\031k_EMsgGCServerRentalsBas"
    "e\020\244\r\022#\n\036k_EMsgGCItemPreviewCheckStatus\020\245"
    "\r\022&\n!k_EMsgGCItemPreviewStatusResponse\020\246"
    "\r\022\037\n\032k_EMsgGCItemPreviewRequest\020\247\r\022\'\n\"k_"
    "EMsgGCItemPreviewRequestResponse\020\250\r\022\036\n\031k"
    "_EMsgGCItemPreviewExpire\020\251\r\022*\n%k_EMsgGCI"
    "temPreviewExpireNotification\020\252\r\022.\n)k_EMs"
    "gGCItemPreviewItemBoughtNotification\020\254\r\022"
    "\037\n\032k_EMsgGCDev_NewItemRequest\020\321\017\022\'\n\"k_EM"
    "sgGCDev_NewItemRequestResponse\020\322\017\022%\n k_E"
    "MsgGCDev_DebugRollLootRequest\020\323\017\022\035\n\030k_EM"
    "sgGCStoreGetUserData\020\304\023\022%\n k_EMsgGCStore"
    "GetUserDataResponse\020\305\023\022)\n$k_EMsgGCStoreP"
    "urchaseInit_DEPRECATED\020\306\023\0221\n,k_EMsgGCSto"
    "rePurchaseInitResponse_DEPRECATED\020\307\023\022\"\n\035"
    "k_EMsgGCStorePurchaseFinalize\020\320\023\022*\n%k_EM"
    "sgGCStorePurchaseFinalizeResponse\020\321\023\022 \n\033"
    "k_EMsgGCStorePurchaseCancel\020\322\023\022(\n#k_EMsg"
    "GCStorePurchaseCancelResponse\020\323\023\022\"\n\035k_EM"
    "sgGCStorePurchaseQueryTxn\020\314\023\022*\n%k_EMsgGC"
    "StorePurchaseQueryTxnResponse\020\315\023\022\036\n\031k_EM"
    "sgGCStorePurchaseInit\020\316\023\022&\n!k_EMsgGCStor"
    "ePurchaseInitResponse\020\317\023\022\036\n\031k_EMsgGCToGC"
    "DirtySDOCache\020\324\023\022&\n!k_EMsgGCToGCDirtyMul"
    "tipleSDOCache\020\325\023\022\"\n\035k_EMsgGCToGCUpdateSQ"
    "LKeyValue\020\326\023\022(\n#k_EMsgGCToGCBroadcastCon"
    "soleCommand\020\331\023\022!\n\034k_EMsgGCServerVersionU"
    "pdated\020\332\023\022\033\n\026k_EMsgGCApplyAutograph\020\333\023\022%"
    "\n k_EMsgGCToGCWebAPIAccountChanged\020\334\023\022!\n"
    "\034k_EMsgGCRequestAnnouncements\020\335\023\022)\n$k_EM"
    "sgGCRequestAnnouncementsResponse\020\336\023\022%\n k"
    "_EMsgGCRequestPassportItemGrant\020\337\023\022!\n\034k_"
    "EMsgGCClientVersionUpdated\020\340\023\022+\n&k_EMsgG"
    "CItemPurgatory_FinalizePurchase\020\343\023\0223\n.k_"
    "EMsgGCItemPurgatory_FinalizePurchaseResp"
    "onse\020\344\023\022)\n$k_EMsgGCItemPurgatory_RefundP"
    "urchase\020\345\023\0221\n,k_EMsgGCItemPurgatory_Refu"
    "ndPurchaseResponse\020\346\023\022.\n)k_EMsgGCToGCPla"
    "yerStrangeCountAdjustments\020\347\023\022\"\n\035k_EMsgG"
    "CRequestStoreSalesData\020\350\023\022*\n%k_EMsgGCReq"
    "uestStoreSalesDataResponse\020\351\023\0222\n-k_EMsgG"
    "CRequestStoreSalesDataUpToDateResponse\020\352"
    "\023\022\034\n\027k_EMsgGCToGCPingRequest\020\353\023\022\035\n\030k_EMs"
    "gGCToGCPingResponse\020\354\023\022%\n k_EMsgGCToGCGe"
    "tUserSessionServer\020\355\023\022-\n(k_EMsgGCToGCGet"
    "UserSessionServerResponse\020\356\023\022%\n k_EMsgGC"
    "ToGCGetUserServerMembers\020\357\023\022-\n(k_EMsgGCT"
    "oGCGetUserServerMembersResponse\020\360\023\022+\n&k_"
    "EMsgGCToGCGrantSelfMadeItemToAccount\020\373\023\022"
    "!\n\034k_EMsgGCToGCThankedByNewUser\020\374\023\022!\n\034k_"
    "EMsgGCShuffleCrateContents\020\375\023\022$\n\037k_EMsgG"
    "CQuestObjective_Progress\020\376\023\022\033\n\026k_EMsgGCQ"
    "uestCompleted\020\377\023\022\033\n\026k_EMsgGCApplyDuckTok"
    "en\020\200\024\022\"\n\035k_EMsgGCQuestComplete_Request\020\201"
    "\024\022(\n#k_EMsgGCQuestObjective_PointsChange"
    "\020\202\024\022.\n)k_EMsgGCQuestObjective_RequestLoa"
    "nerItems\020\204\024\0221\n,k_EMsgGCQuestObjective_Re"
    "questLoanerResponse\020\205\024\022&\n!k_EMsgGCApplyS"
    "trangeCountTransfer\020\206\024\022#\n\036k_EMsgGCCraftC"
    "ollectionUpgrade\020\207\024\022#\n\036k_EMsgGCCraftHall"
    "oweenOffering\020\210\024\022!\n\034k_EMsgGCQuestDiscard"
    "_Request\020\211\024\022\033\n\026k_EMsgGCRemoveGiftedBy\020\212\024"
    "\022#\n\036k_EMsgGCRemoveGiftedByResponse\020\213\024\022\035\n"
    "\030k_EMsgGCRemoveFestivizer\020\214\024\022%\n k_EMsgGC"
    "RemoveFestivizerResponse\020\215\024\022!\n\034k_EMsgGCC"
    "raftCommonStatClock\020\216\024*\233\002\n\016EGCMsgRespons"
    "e\022\026\n\022k_EGCMsgResponseOK\020\000\022\032\n\026k_EGCMsgRes"
    "ponseDenied\020\001\022\037\n\033k_EGCMsgResponseServerE"
    "rror\020\002\022\033\n\027k_EGCMsgResponseTimeout\020\003\022\033\n\027k"
    "_EGCMsgResponseInvalid\020\004\022\033\n\027k_EGCMsgResp"
    "onseNoMatch\020\005\022 \n\034k_EGCMsgResponseUnknown"
    "Error\020\006\022\037\n\033k_EGCMsgResponseNotLoggedOn\020\007"
    "\022\032\n\026k_EGCMsgFailedToCreate\020\010*\221\002\n\014EUnlock"
    "Style\022\033\n\027k_UnlockStyle_Succeeded\020\000\022\037\n\033k_"
    "UnlockStyle_Failed_PreReq\020\001\022#\n\037k_UnlockS"
    "tyle_Failed_CantAfford\020\002\022#\n\037k_UnlockStyl"
    "e_Failed_CantCommit\020\003\022&\n\"k_UnlockStyle_F"
    "ailed_CantLockCache\020\004\022)\n%k_UnlockStyle_F"
    "ailed_CantAffordAttrib\020\005\022&\n\"k_UnlockStyl"
    "e_Failed_CantAffordGem\020\006*\363\002\n\037EItemPurgat"
    "oryResponse_Finalize\022.\n*k_ItemPurgatoryR"
    "esponse_Finalize_Succeeded\020\000\0226\n2k_ItemPu"
    "rgatoryResponse_Finalize_Failed_Incomple"
    "te\020\001\022?\n;k_ItemPurgatoryResponse_Finalize"
    "_Failed_ItemsNotInPurgatory\020\002\022=\n9k_ItemP"
    "urgatoryResponse_Finalize_Failed_CouldNo"
    "tFindItems\020\003\0225\n1k_ItemPurgatoryResponse_"
    "Finalize_Failed_NoSOCache\020\004\0221\n-k_ItemPur"
    "gatoryResponse_Finalize_BackpackFull\020\005*\347"
    "\002\n\035EItemPurgatoryResponse_Refund\022,\n(k_It"
    "emPurgatoryResponse_Refund_Succeeded\020\000\022<"
    "\n8k_ItemPurgatoryResponse_Refund_Failed_"
    "ItemNotInPurgatory\020\001\022:\n6k_ItemPurgatoryR"
    "esponse_Refund_Failed_CouldNotFindItem\020\002"
    "\0223\n/k_ItemPurgatoryResponse_Refund_Faile"
    "d_NoSOCache\020\003\0222\n.k_ItemPurgatoryResponse"
    "_Refund_Failed_NoDetail\020\004\0225\n1k_ItemPurga"
    "toryResponse_Refund_Failed_NexonWebAPI\020\005"
    "B\005H\001\200\001\000", 9927);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "econ_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgApplyAutograph::default_instance_ = new CMsgApplyAutograph();
  CMsgEconPlayerStrangeCountAdjustment::default_instance_ = new CMsgEconPlayerStrangeCountAdjustment();
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_ = new CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment();
  CMsgRequestItemPurgatory_FinalizePurchase::default_instance_ = new CMsgRequestItemPurgatory_FinalizePurchase();
  CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_ = new CMsgRequestItemPurgatory_FinalizePurchaseResponse();
  CMsgRequestItemPurgatory_RefundPurchase::default_instance_ = new CMsgRequestItemPurgatory_RefundPurchase();
  CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_ = new CMsgRequestItemPurgatory_RefundPurchaseResponse();
  CMsgCraftingResponse::default_instance_ = new CMsgCraftingResponse();
  CMsgGCRequestStoreSalesData::default_instance_ = new CMsgGCRequestStoreSalesData();
  CMsgGCRequestStoreSalesDataResponse::default_instance_ = new CMsgGCRequestStoreSalesDataResponse();
  CMsgGCRequestStoreSalesDataResponse_Price::default_instance_ = new CMsgGCRequestStoreSalesDataResponse_Price();
  CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_ = new CMsgGCRequestStoreSalesDataUpToDateResponse();
  CMsgGCToGCPingRequest::default_instance_ = new CMsgGCToGCPingRequest();
  CMsgGCToGCPingResponse::default_instance_ = new CMsgGCToGCPingResponse();
  CMsgGCToGCGetUserSessionServer::default_instance_ = new CMsgGCToGCGetUserSessionServer();
  CMsgGCToGCGetUserSessionServerResponse::default_instance_ = new CMsgGCToGCGetUserSessionServerResponse();
  CMsgGCToGCGetUserServerMembers::default_instance_ = new CMsgGCToGCGetUserServerMembers();
  CMsgGCToGCGetUserServerMembersResponse::default_instance_ = new CMsgGCToGCGetUserServerMembersResponse();
  CMsgLookupMultipleAccountNames::default_instance_ = new CMsgLookupMultipleAccountNames();
  CMsgLookupMultipleAccountNamesResponse::default_instance_ = new CMsgLookupMultipleAccountNamesResponse();
  CMsgLookupMultipleAccountNamesResponse_Account::default_instance_ = new CMsgLookupMultipleAccountNamesResponse_Account();
  CMsgGCToGCGrantSelfMadeItemToAccount::default_instance_ = new CMsgGCToGCGrantSelfMadeItemToAccount();
  CMsgGCToGCThankedByNewUser::default_instance_ = new CMsgGCToGCThankedByNewUser();
  CMsgGCShuffleCrateContents::default_instance_ = new CMsgGCShuffleCrateContents();
  CMsgGCQuestObjective_Progress::default_instance_ = new CMsgGCQuestObjective_Progress();
  CMsgGCQuestObjective_PointsChange::default_instance_ = new CMsgGCQuestObjective_PointsChange();
  CMsgGCQuestComplete_Request::default_instance_ = new CMsgGCQuestComplete_Request();
  CMsgGCQuestCompleted::default_instance_ = new CMsgGCQuestCompleted();
  CMsgGCQuestObjective_RequestLoanerItems::default_instance_ = new CMsgGCQuestObjective_RequestLoanerItems();
  CMsgGCQuestObjective_RequestLoanerResponse::default_instance_ = new CMsgGCQuestObjective_RequestLoanerResponse();
  CMsgCraftCollectionUpgrade::default_instance_ = new CMsgCraftCollectionUpgrade();
  CMsgCraftHalloweenOffering::default_instance_ = new CMsgCraftHalloweenOffering();
  CMsgCraftCommonStatClock::default_instance_ = new CMsgCraftCommonStatClock();
  CMsgGCQuestDiscard_Request::default_instance_ = new CMsgGCQuestDiscard_Request();
  CMsgApplyAutograph::default_instance_->InitAsDefaultInstance();
  CMsgEconPlayerStrangeCountAdjustment::default_instance_->InitAsDefaultInstance();
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_FinalizePurchase::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_RefundPurchase::default_instance_->InitAsDefaultInstance();
  CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_->InitAsDefaultInstance();
  CMsgCraftingResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesData::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesDataResponse_Price::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCPingRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCPingResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserSessionServer::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserSessionServerResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserServerMembers::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGetUserServerMembersResponse::default_instance_->InitAsDefaultInstance();
  CMsgLookupMultipleAccountNames::default_instance_->InitAsDefaultInstance();
  CMsgLookupMultipleAccountNamesResponse::default_instance_->InitAsDefaultInstance();
  CMsgLookupMultipleAccountNamesResponse_Account::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCGrantSelfMadeItemToAccount::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCThankedByNewUser::default_instance_->InitAsDefaultInstance();
  CMsgGCShuffleCrateContents::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestObjective_Progress::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestObjective_PointsChange::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestComplete_Request::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestCompleted::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestObjective_RequestLoanerItems::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestObjective_RequestLoanerResponse::default_instance_->InitAsDefaultInstance();
  CMsgCraftCollectionUpgrade::default_instance_->InitAsDefaultInstance();
  CMsgCraftHalloweenOffering::default_instance_->InitAsDefaultInstance();
  CMsgCraftCommonStatClock::default_instance_->InitAsDefaultInstance();
  CMsgGCQuestDiscard_Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_econ_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_econ_5fgcmessages_2eproto {
  StaticDescriptorInitializer_econ_5fgcmessages_2eproto() {
    protobuf_AddDesc_econ_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_econ_5fgcmessages_2eproto_;

const ::google::protobuf::EnumDescriptor* EGCItemMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCItemMsg_descriptor_;
}
bool EGCItemMsg_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1100:
    case 1101:
    case 1102:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1509:
    case 1510:
    case 1514:
    case 1601:
    case 1602:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1708:
    case 2001:
    case 2002:
    case 2003:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
    case 2526:
    case 2527:
    case 2528:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
    case 2544:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCMsgResponse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCMsgResponse_descriptor_;
}
bool EGCMsgResponse_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUnlockStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUnlockStyle_descriptor_;
}
bool EUnlockStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Finalize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemPurgatoryResponse_Finalize_descriptor_;
}
bool EItemPurgatoryResponse_Finalize_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemPurgatoryResponse_Refund_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemPurgatoryResponse_Refund_descriptor_;
}
bool EItemPurgatoryResponse_Refund_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyAutograph::kAutographItemIdFieldNumber;
const int CMsgApplyAutograph::kItemItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyAutograph::CMsgApplyAutograph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyAutograph::InitAsDefaultInstance() {
}

CMsgApplyAutograph::CMsgApplyAutograph(const CMsgApplyAutograph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyAutograph::SharedCtor() {
  _cached_size_ = 0;
  autograph_item_id_ = GOOGLE_ULONGLONG(0);
  item_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyAutograph::~CMsgApplyAutograph() {
  SharedDtor();
}

void CMsgApplyAutograph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyAutograph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyAutograph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyAutograph_descriptor_;
}

const CMsgApplyAutograph& CMsgApplyAutograph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyAutograph* CMsgApplyAutograph::default_instance_ = NULL;

CMsgApplyAutograph* CMsgApplyAutograph::New() const {
  return new CMsgApplyAutograph;
}

void CMsgApplyAutograph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autograph_item_id_ = GOOGLE_ULONGLONG(0);
    item_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyAutograph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 autograph_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &autograph_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_item_id;
        break;
      }
      
      // optional uint64 item_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyAutograph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 autograph_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->autograph_item_id(), output);
  }
  
  // optional uint64 item_item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyAutograph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 autograph_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->autograph_item_id(), target);
  }
  
  // optional uint64 item_item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyAutograph::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 autograph_item_id = 1;
    if (has_autograph_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->autograph_item_id());
    }
    
    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyAutograph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyAutograph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyAutograph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyAutograph::MergeFrom(const CMsgApplyAutograph& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_autograph_item_id(from.autograph_item_id());
    }
    if (from._has_bit(1)) {
      set_item_item_id(from.item_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyAutograph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyAutograph::CopyFrom(const CMsgApplyAutograph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyAutograph::IsInitialized() const {
  
  return true;
}

void CMsgApplyAutograph::Swap(CMsgApplyAutograph* other) {
  if (other != this) {
    std::swap(autograph_item_id_, other->autograph_item_id_);
    std::swap(item_item_id_, other->item_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyAutograph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyAutograph_descriptor_;
  metadata.reflection = CMsgApplyAutograph_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::kEventTypeFieldNumber;
const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::kItemIdFieldNumber;
const int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::kAdjustmentFieldNumber;
#endif  // !_MSC_VER

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::InitAsDefaultInstance() {
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  adjustment_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment() {
  SharedDtor();
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_;
}

const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_ = NULL;

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::New() const {
  return new CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0u;
    item_id_ = GOOGLE_ULONGLONG(0);
    adjustment_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adjustment;
        break;
      }
      
      // optional uint32 adjustment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adjustment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjustment_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_type(), output);
  }
  
  // optional uint64 item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }
  
  // optional uint32 adjustment = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->adjustment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_type(), target);
  }
  
  // optional uint64 item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }
  
  // optional uint32 adjustment = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->adjustment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }
    
    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 adjustment = 3;
    if (has_adjustment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adjustment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeFrom(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_event_type(from.event_type());
    }
    if (from._has_bit(1)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(2)) {
      set_adjustment(from.adjustment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::IsInitialized() const {
  
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::Swap(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(item_id_, other->item_id_);
    std::swap(adjustment_, other->adjustment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_;
  metadata.reflection = CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgEconPlayerStrangeCountAdjustment::kAccountIdFieldNumber;
const int CMsgEconPlayerStrangeCountAdjustment::kStrangeCountAdjustmentsFieldNumber;
#endif  // !_MSC_VER

CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgEconPlayerStrangeCountAdjustment::InitAsDefaultInstance() {
}

CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEconPlayerStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment() {
  SharedDtor();
}

void CMsgEconPlayerStrangeCountAdjustment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgEconPlayerStrangeCountAdjustment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEconPlayerStrangeCountAdjustment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEconPlayerStrangeCountAdjustment_descriptor_;
}

const CMsgEconPlayerStrangeCountAdjustment& CMsgEconPlayerStrangeCountAdjustment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgEconPlayerStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment::default_instance_ = NULL;

CMsgEconPlayerStrangeCountAdjustment* CMsgEconPlayerStrangeCountAdjustment::New() const {
  return new CMsgEconPlayerStrangeCountAdjustment;
}

void CMsgEconPlayerStrangeCountAdjustment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  strange_count_adjustments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEconPlayerStrangeCountAdjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strange_count_adjustments;
        break;
      }
      
      // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strange_count_adjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strange_count_adjustments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strange_count_adjustments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgEconPlayerStrangeCountAdjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  for (int i = 0; i < this->strange_count_adjustments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strange_count_adjustments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgEconPlayerStrangeCountAdjustment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  for (int i = 0; i < this->strange_count_adjustments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strange_count_adjustments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgEconPlayerStrangeCountAdjustment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  total_size += 1 * this->strange_count_adjustments_size();
  for (int i = 0; i < this->strange_count_adjustments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strange_count_adjustments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEconPlayerStrangeCountAdjustment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEconPlayerStrangeCountAdjustment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEconPlayerStrangeCountAdjustment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEconPlayerStrangeCountAdjustment::MergeFrom(const CMsgEconPlayerStrangeCountAdjustment& from) {
  GOOGLE_CHECK_NE(&from, this);
  strange_count_adjustments_.MergeFrom(from.strange_count_adjustments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEconPlayerStrangeCountAdjustment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment::IsInitialized() const {
  
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment::Swap(CMsgEconPlayerStrangeCountAdjustment* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    strange_count_adjustments_.Swap(&other->strange_count_adjustments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEconPlayerStrangeCountAdjustment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEconPlayerStrangeCountAdjustment_descriptor_;
  metadata.reflection = CMsgEconPlayerStrangeCountAdjustment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_FinalizePurchase::kItemIdsFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_FinalizePurchase::CMsgRequestItemPurgatory_FinalizePurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_FinalizePurchase::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_FinalizePurchase::CMsgRequestItemPurgatory_FinalizePurchase(const CMsgRequestItemPurgatory_FinalizePurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_FinalizePurchase::~CMsgRequestItemPurgatory_FinalizePurchase() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_FinalizePurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_FinalizePurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_FinalizePurchase_descriptor_;
}

const CMsgRequestItemPurgatory_FinalizePurchase& CMsgRequestItemPurgatory_FinalizePurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_FinalizePurchase* CMsgRequestItemPurgatory_FinalizePurchase::default_instance_ = NULL;

CMsgRequestItemPurgatory_FinalizePurchase* CMsgRequestItemPurgatory_FinalizePurchase::New() const {
  return new CMsgRequestItemPurgatory_FinalizePurchase;
}

void CMsgRequestItemPurgatory_FinalizePurchase::Clear() {
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_FinalizePurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 item_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_FinalizePurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->item_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_FinalizePurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->item_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_FinalizePurchase::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 item_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_FinalizePurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_FinalizePurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_FinalizePurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_FinalizePurchase::MergeFrom(const CMsgRequestItemPurgatory_FinalizePurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_FinalizePurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchase::CopyFrom(const CMsgRequestItemPurgatory_FinalizePurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_FinalizePurchase::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_FinalizePurchase::Swap(CMsgRequestItemPurgatory_FinalizePurchase* other) {
  if (other != this) {
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_FinalizePurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_FinalizePurchase_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_FinalizePurchase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_FinalizePurchaseResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_FinalizePurchaseResponse::CMsgRequestItemPurgatory_FinalizePurchaseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_FinalizePurchaseResponse::CMsgRequestItemPurgatory_FinalizePurchaseResponse(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_FinalizePurchaseResponse::~CMsgRequestItemPurgatory_FinalizePurchaseResponse() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_FinalizePurchaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_;
}

const CMsgRequestItemPurgatory_FinalizePurchaseResponse& CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_FinalizePurchaseResponse* CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_ = NULL;

CMsgRequestItemPurgatory_FinalizePurchaseResponse* CMsgRequestItemPurgatory_FinalizePurchaseResponse::New() const {
  return new CMsgRequestItemPurgatory_FinalizePurchaseResponse;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_FinalizePurchaseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_FinalizePurchaseResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_FinalizePurchaseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_FinalizePurchaseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergeFrom(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::CopyFrom(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_FinalizePurchaseResponse::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::Swap(CMsgRequestItemPurgatory_FinalizePurchaseResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_FinalizePurchaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_RefundPurchase::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_RefundPurchase::CMsgRequestItemPurgatory_RefundPurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_RefundPurchase::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_RefundPurchase::CMsgRequestItemPurgatory_RefundPurchase(const CMsgRequestItemPurgatory_RefundPurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchase::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_RefundPurchase::~CMsgRequestItemPurgatory_RefundPurchase() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_RefundPurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_RefundPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_RefundPurchase_descriptor_;
}

const CMsgRequestItemPurgatory_RefundPurchase& CMsgRequestItemPurgatory_RefundPurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_RefundPurchase* CMsgRequestItemPurgatory_RefundPurchase::default_instance_ = NULL;

CMsgRequestItemPurgatory_RefundPurchase* CMsgRequestItemPurgatory_RefundPurchase::New() const {
  return new CMsgRequestItemPurgatory_RefundPurchase;
}

void CMsgRequestItemPurgatory_RefundPurchase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_RefundPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_RefundPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_RefundPurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_RefundPurchase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_RefundPurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_RefundPurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_RefundPurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_RefundPurchase::MergeFrom(const CMsgRequestItemPurgatory_RefundPurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_RefundPurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchase::CopyFrom(const CMsgRequestItemPurgatory_RefundPurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_RefundPurchase::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_RefundPurchase::Swap(CMsgRequestItemPurgatory_RefundPurchase* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_RefundPurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_RefundPurchase_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_RefundPurchase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestItemPurgatory_RefundPurchaseResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgRequestItemPurgatory_RefundPurchaseResponse::CMsgRequestItemPurgatory_RefundPurchaseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::InitAsDefaultInstance() {
}

CMsgRequestItemPurgatory_RefundPurchaseResponse::CMsgRequestItemPurgatory_RefundPurchaseResponse(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestItemPurgatory_RefundPurchaseResponse::~CMsgRequestItemPurgatory_RefundPurchaseResponse() {
  SharedDtor();
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestItemPurgatory_RefundPurchaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_;
}

const CMsgRequestItemPurgatory_RefundPurchaseResponse& CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestItemPurgatory_RefundPurchaseResponse* CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_ = NULL;

CMsgRequestItemPurgatory_RefundPurchaseResponse* CMsgRequestItemPurgatory_RefundPurchaseResponse::New() const {
  return new CMsgRequestItemPurgatory_RefundPurchaseResponse;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestItemPurgatory_RefundPurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestItemPurgatory_RefundPurchaseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestItemPurgatory_RefundPurchaseResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_RefundPurchaseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestItemPurgatory_RefundPurchaseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::MergeFrom(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::CopyFrom(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_RefundPurchaseResponse::IsInitialized() const {
  
  return true;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::Swap(CMsgRequestItemPurgatory_RefundPurchaseResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestItemPurgatory_RefundPurchaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_;
  metadata.reflection = CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCraftingResponse::kItemIdsFieldNumber;
#endif  // !_MSC_VER

CMsgCraftingResponse::CMsgCraftingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCraftingResponse::InitAsDefaultInstance() {
}

CMsgCraftingResponse::CMsgCraftingResponse(const CMsgCraftingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCraftingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCraftingResponse::~CMsgCraftingResponse() {
  SharedDtor();
}

void CMsgCraftingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCraftingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCraftingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCraftingResponse_descriptor_;
}

const CMsgCraftingResponse& CMsgCraftingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgCraftingResponse* CMsgCraftingResponse::default_instance_ = NULL;

CMsgCraftingResponse* CMsgCraftingResponse::New() const {
  return new CMsgCraftingResponse;
}

void CMsgCraftingResponse::Clear() {
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCraftingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 item_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCraftingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->item_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCraftingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 item_ids = 1;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->item_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCraftingResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 item_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCraftingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCraftingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCraftingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCraftingResponse::MergeFrom(const CMsgCraftingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCraftingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCraftingResponse::CopyFrom(const CMsgCraftingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftingResponse::IsInitialized() const {
  
  return true;
}

void CMsgCraftingResponse::Swap(CMsgCraftingResponse* other) {
  if (other != this) {
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCraftingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCraftingResponse_descriptor_;
  metadata.reflection = CMsgCraftingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesData::kVersionFieldNumber;
const int CMsgGCRequestStoreSalesData::kCurrencyFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesData::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(const CMsgGCRequestStoreSalesData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  currency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesData::~CMsgGCRequestStoreSalesData() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesData_descriptor_;
}

const CMsgGCRequestStoreSalesData& CMsgGCRequestStoreSalesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesData* CMsgGCRequestStoreSalesData::default_instance_ = NULL;

CMsgGCRequestStoreSalesData* CMsgGCRequestStoreSalesData::New() const {
  return new CMsgGCRequestStoreSalesData;
}

void CMsgGCRequestStoreSalesData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    currency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }
      
      // optional uint32 currency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional uint32 currency = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional uint32 currency = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesData::MergeFrom(const CMsgGCRequestStoreSalesData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_currency(from.currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesData::CopyFrom(const CMsgGCRequestStoreSalesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesData::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesData::Swap(CMsgGCRequestStoreSalesData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(currency_, other->currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesData_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesDataResponse_Price::kItemDefFieldNumber;
const int CMsgGCRequestStoreSalesDataResponse_Price::kPriceFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesDataResponse_Price::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(const CMsgGCRequestStoreSalesDataResponse_Price& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse_Price::SharedCtor() {
  _cached_size_ = 0;
  item_def_ = 0u;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesDataResponse_Price::~CMsgGCRequestStoreSalesDataResponse_Price() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesDataResponse_Price::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesDataResponse_Price::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse_Price::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesDataResponse_Price_descriptor_;
}

const CMsgGCRequestStoreSalesDataResponse_Price& CMsgGCRequestStoreSalesDataResponse_Price::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesDataResponse_Price* CMsgGCRequestStoreSalesDataResponse_Price::default_instance_ = NULL;

CMsgGCRequestStoreSalesDataResponse_Price* CMsgGCRequestStoreSalesDataResponse_Price::New() const {
  return new CMsgGCRequestStoreSalesDataResponse_Price;
}

void CMsgGCRequestStoreSalesDataResponse_Price::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_ = 0u;
    price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesDataResponse_Price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }
      
      // optional uint32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesDataResponse_Price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }
  
  // optional uint32 price = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesDataResponse_Price::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }
  
  // optional uint32 price = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesDataResponse_Price::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }
    
    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesDataResponse_Price::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataResponse_Price* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesDataResponse_Price*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataResponse_Price::MergeFrom(const CMsgGCRequestStoreSalesDataResponse_Price& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_def(from.item_def());
    }
    if (from._has_bit(1)) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesDataResponse_Price::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse_Price::CopyFrom(const CMsgGCRequestStoreSalesDataResponse_Price& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse_Price::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesDataResponse_Price::Swap(CMsgGCRequestStoreSalesDataResponse_Price* other) {
  if (other != this) {
    std::swap(item_def_, other->item_def_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesDataResponse_Price::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesDataResponse_Price_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesDataResponse_Price_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesDataResponse::kSalePriceFieldNumber;
const int CMsgGCRequestStoreSalesDataResponse::kVersionFieldNumber;
const int CMsgGCRequestStoreSalesDataResponse::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesDataResponse::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(const CMsgGCRequestStoreSalesDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  expiration_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesDataResponse::~CMsgGCRequestStoreSalesDataResponse() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesDataResponse_descriptor_;
}

const CMsgGCRequestStoreSalesDataResponse& CMsgGCRequestStoreSalesDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesDataResponse* CMsgGCRequestStoreSalesDataResponse::default_instance_ = NULL;

CMsgGCRequestStoreSalesDataResponse* CMsgGCRequestStoreSalesDataResponse::New() const {
  return new CMsgGCRequestStoreSalesDataResponse;
}

void CMsgGCRequestStoreSalesDataResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    version_ = 0u;
    expiration_time_ = 0u;
  }
  sale_price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sale_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sale_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sale_price;
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiration_time;
        break;
      }
      
      // optional uint32 expiration_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  for (int i = 0; i < this->sale_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sale_price(i), output);
  }
  
  // optional uint32 version = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }
  
  // optional uint32 expiration_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expiration_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  for (int i = 0; i < this->sale_price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sale_price(i), target);
  }
  
  // optional uint32 version = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }
  
  // optional uint32 expiration_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expiration_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint32 expiration_time = 3;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiration_time());
    }
    
  }
  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  total_size += 1 * this->sale_price_size();
  for (int i = 0; i < this->sale_price_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sale_price(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataResponse::MergeFrom(const CMsgGCRequestStoreSalesDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  sale_price_.MergeFrom(from.sale_price_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_version(from.version());
    }
    if (from._has_bit(2)) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse::CopyFrom(const CMsgGCRequestStoreSalesDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesDataResponse::Swap(CMsgGCRequestStoreSalesDataResponse* other) {
  if (other != this) {
    sale_price_.Swap(&other->sale_price_);
    std::swap(version_, other->version_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesDataResponse_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestStoreSalesDataUpToDateResponse::kVersionFieldNumber;
const int CMsgGCRequestStoreSalesDataUpToDateResponse::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::InitAsDefaultInstance() {
}

CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(const CMsgGCRequestStoreSalesDataUpToDateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  expiration_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestStoreSalesDataUpToDateResponse::~CMsgGCRequestStoreSalesDataUpToDateResponse() {
  SharedDtor();
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestStoreSalesDataUpToDateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_;
}

const CMsgGCRequestStoreSalesDataUpToDateResponse& CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRequestStoreSalesDataUpToDateResponse* CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_ = NULL;

CMsgGCRequestStoreSalesDataUpToDateResponse* CMsgGCRequestStoreSalesDataUpToDateResponse::New() const {
  return new CMsgGCRequestStoreSalesDataUpToDateResponse;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    expiration_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRequestStoreSalesDataUpToDateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expiration_time;
        break;
      }
      
      // optional uint32 expiration_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional uint32 expiration_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiration_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRequestStoreSalesDataUpToDateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional uint32 expiration_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiration_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRequestStoreSalesDataUpToDateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint32 expiration_time = 2;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiration_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataUpToDateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRequestStoreSalesDataUpToDateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::MergeFrom(const CMsgGCRequestStoreSalesDataUpToDateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::CopyFrom(const CMsgGCRequestStoreSalesDataUpToDateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataUpToDateResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::Swap(CMsgGCRequestStoreSalesDataUpToDateResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRequestStoreSalesDataUpToDateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_;
  metadata.reflection = CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToGCPingRequest::CMsgGCToGCPingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCPingRequest::InitAsDefaultInstance() {
}

CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(const CMsgGCToGCPingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCPingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCPingRequest::~CMsgGCToGCPingRequest() {
  SharedDtor();
}

void CMsgGCToGCPingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCPingRequest_descriptor_;
}

const CMsgGCToGCPingRequest& CMsgGCToGCPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCPingRequest* CMsgGCToGCPingRequest::default_instance_ = NULL;

CMsgGCToGCPingRequest* CMsgGCToGCPingRequest::New() const {
  return new CMsgGCToGCPingRequest;
}

void CMsgGCToGCPingRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCToGCPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCPingRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCPingRequest::MergeFrom(const CMsgGCToGCPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPingRequest::CopyFrom(const CMsgGCToGCPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPingRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCPingRequest::Swap(CMsgGCToGCPingRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCPingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCPingRequest_descriptor_;
  metadata.reflection = CMsgGCToGCPingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToGCPingResponse::CMsgGCToGCPingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCPingResponse::InitAsDefaultInstance() {
}

CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(const CMsgGCToGCPingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCPingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCPingResponse::~CMsgGCToGCPingResponse() {
  SharedDtor();
}

void CMsgGCToGCPingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCPingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCPingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCPingResponse_descriptor_;
}

const CMsgGCToGCPingResponse& CMsgGCToGCPingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCPingResponse* CMsgGCToGCPingResponse::default_instance_ = NULL;

CMsgGCToGCPingResponse* CMsgGCToGCPingResponse::New() const {
  return new CMsgGCToGCPingResponse;
}

void CMsgGCToGCPingResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCToGCPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCPingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCPingResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCPingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCPingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCPingResponse::MergeFrom(const CMsgGCToGCPingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPingResponse::CopyFrom(const CMsgGCToGCPingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPingResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCPingResponse::Swap(CMsgGCToGCPingResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCPingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCPingResponse_descriptor_;
  metadata.reflection = CMsgGCToGCPingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserSessionServer::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserSessionServer::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(const CMsgGCToGCGetUserSessionServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServer::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserSessionServer::~CMsgGCToGCGetUserSessionServer() {
  SharedDtor();
}

void CMsgGCToGCGetUserSessionServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserSessionServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserSessionServer_descriptor_;
}

const CMsgGCToGCGetUserSessionServer& CMsgGCToGCGetUserSessionServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserSessionServer* CMsgGCToGCGetUserSessionServer::default_instance_ = NULL;

CMsgGCToGCGetUserSessionServer* CMsgGCToGCGetUserSessionServer::New() const {
  return new CMsgGCToGCGetUserSessionServer;
}

void CMsgGCToGCGetUserSessionServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserSessionServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserSessionServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserSessionServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserSessionServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserSessionServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserSessionServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserSessionServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserSessionServer::MergeFrom(const CMsgGCToGCGetUserSessionServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserSessionServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServer::CopyFrom(const CMsgGCToGCGetUserSessionServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServer::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserSessionServer::Swap(CMsgGCToGCGetUserSessionServer* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserSessionServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserSessionServer_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserSessionServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserSessionServerResponse::kServerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserSessionServerResponse::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(const CMsgGCToGCGetUserSessionServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServerResponse::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserSessionServerResponse::~CMsgGCToGCGetUserSessionServerResponse() {
  SharedDtor();
}

void CMsgGCToGCGetUserSessionServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserSessionServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserSessionServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserSessionServerResponse_descriptor_;
}

const CMsgGCToGCGetUserSessionServerResponse& CMsgGCToGCGetUserSessionServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserSessionServerResponse* CMsgGCToGCGetUserSessionServerResponse::default_instance_ = NULL;

CMsgGCToGCGetUserSessionServerResponse* CMsgGCToGCGetUserSessionServerResponse::New() const {
  return new CMsgGCToGCGetUserSessionServerResponse;
}

void CMsgGCToGCGetUserSessionServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserSessionServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserSessionServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 server_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserSessionServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 server_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserSessionServerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserSessionServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserSessionServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserSessionServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserSessionServerResponse::MergeFrom(const CMsgGCToGCGetUserSessionServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_server_steam_id(from.server_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserSessionServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServerResponse::CopyFrom(const CMsgGCToGCGetUserSessionServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServerResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserSessionServerResponse::Swap(CMsgGCToGCGetUserSessionServerResponse* other) {
  if (other != this) {
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserSessionServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserSessionServerResponse_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserSessionServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserServerMembers::kAccountIdFieldNumber;
const int CMsgGCToGCGetUserServerMembers::kMaxSpectatorsFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserServerMembers::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(const CMsgGCToGCGetUserServerMembers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembers::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  max_spectators_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserServerMembers::~CMsgGCToGCGetUserServerMembers() {
  SharedDtor();
}

void CMsgGCToGCGetUserServerMembers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserServerMembers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserServerMembers_descriptor_;
}

const CMsgGCToGCGetUserServerMembers& CMsgGCToGCGetUserServerMembers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserServerMembers* CMsgGCToGCGetUserServerMembers::default_instance_ = NULL;

CMsgGCToGCGetUserServerMembers* CMsgGCToGCGetUserServerMembers::New() const {
  return new CMsgGCToGCGetUserServerMembers;
}

void CMsgGCToGCGetUserServerMembers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    max_spectators_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserServerMembers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_spectators;
        break;
      }
      
      // optional uint32 max_spectators = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_spectators_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserServerMembers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 max_spectators = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_spectators(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserServerMembers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 max_spectators = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_spectators(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserServerMembers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 max_spectators = 2;
    if (has_max_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_spectators());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserServerMembers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserServerMembers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserServerMembers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserServerMembers::MergeFrom(const CMsgGCToGCGetUserServerMembers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_max_spectators(from.max_spectators());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserServerMembers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembers::CopyFrom(const CMsgGCToGCGetUserServerMembers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembers::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserServerMembers::Swap(CMsgGCToGCGetUserServerMembers* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(max_spectators_, other->max_spectators_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserServerMembers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserServerMembers_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserServerMembers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGetUserServerMembersResponse::kMemberAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGetUserServerMembersResponse::InitAsDefaultInstance() {
}

CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(const CMsgGCToGCGetUserServerMembersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGetUserServerMembersResponse::~CMsgGCToGCGetUserServerMembersResponse() {
  SharedDtor();
}

void CMsgGCToGCGetUserServerMembersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGetUserServerMembersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGetUserServerMembersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGetUserServerMembersResponse_descriptor_;
}

const CMsgGCToGCGetUserServerMembersResponse& CMsgGCToGCGetUserServerMembersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGetUserServerMembersResponse* CMsgGCToGCGetUserServerMembersResponse::default_instance_ = NULL;

CMsgGCToGCGetUserServerMembersResponse* CMsgGCToGCGetUserServerMembersResponse::New() const {
  return new CMsgGCToGCGetUserServerMembersResponse;
}

void CMsgGCToGCGetUserServerMembersResponse::Clear() {
  member_account_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGetUserServerMembersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 member_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_member_account_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_account_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_member_account_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGetUserServerMembersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 member_account_id = 1;
  for (int i = 0; i < this->member_account_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->member_account_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGetUserServerMembersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 member_account_id = 1;
  for (int i = 0; i < this->member_account_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->member_account_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGetUserServerMembersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 member_account_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_account_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_account_id(i));
    }
    total_size += 1 * this->member_account_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGetUserServerMembersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGetUserServerMembersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGetUserServerMembersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserServerMembersResponse::MergeFrom(const CMsgGCToGCGetUserServerMembersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_account_id_.MergeFrom(from.member_account_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGetUserServerMembersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembersResponse::CopyFrom(const CMsgGCToGCGetUserServerMembersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembersResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGetUserServerMembersResponse::Swap(CMsgGCToGCGetUserServerMembersResponse* other) {
  if (other != this) {
    member_account_id_.Swap(&other->member_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGetUserServerMembersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGetUserServerMembersResponse_descriptor_;
  metadata.reflection = CMsgGCToGCGetUserServerMembersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLookupMultipleAccountNames::kAccountidsFieldNumber;
#endif  // !_MSC_VER

CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLookupMultipleAccountNames::InitAsDefaultInstance() {
}

CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(const CMsgLookupMultipleAccountNames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNames::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLookupMultipleAccountNames::~CMsgLookupMultipleAccountNames() {
  SharedDtor();
}

void CMsgLookupMultipleAccountNames::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLookupMultipleAccountNames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLookupMultipleAccountNames_descriptor_;
}

const CMsgLookupMultipleAccountNames& CMsgLookupMultipleAccountNames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLookupMultipleAccountNames* CMsgLookupMultipleAccountNames::default_instance_ = NULL;

CMsgLookupMultipleAccountNames* CMsgLookupMultipleAccountNames::New() const {
  return new CMsgLookupMultipleAccountNames;
}

void CMsgLookupMultipleAccountNames::Clear() {
  accountids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLookupMultipleAccountNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 accountids = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accountids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_accountids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLookupMultipleAccountNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 accountids = 1 [packed = true];
  if (this->accountids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_accountids_cached_byte_size_);
  }
  for (int i = 0; i < this->accountids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->accountids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLookupMultipleAccountNames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 accountids = 1 [packed = true];
  if (this->accountids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _accountids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->accountids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->accountids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLookupMultipleAccountNames::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 accountids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->accountids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accountids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _accountids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLookupMultipleAccountNames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLookupMultipleAccountNames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNames::MergeFrom(const CMsgLookupMultipleAccountNames& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountids_.MergeFrom(from.accountids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLookupMultipleAccountNames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNames::CopyFrom(const CMsgLookupMultipleAccountNames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNames::IsInitialized() const {
  
  return true;
}

void CMsgLookupMultipleAccountNames::Swap(CMsgLookupMultipleAccountNames* other) {
  if (other != this) {
    accountids_.Swap(&other->accountids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLookupMultipleAccountNames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLookupMultipleAccountNames_descriptor_;
  metadata.reflection = CMsgLookupMultipleAccountNames_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgLookupMultipleAccountNamesResponse_Account::_default_persona_;
#ifndef _MSC_VER
const int CMsgLookupMultipleAccountNamesResponse_Account::kAccountidFieldNumber;
const int CMsgLookupMultipleAccountNamesResponse_Account::kPersonaFieldNumber;
#endif  // !_MSC_VER

CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLookupMultipleAccountNamesResponse_Account::InitAsDefaultInstance() {
}

CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(const CMsgLookupMultipleAccountNamesResponse_Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse_Account::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  persona_ = const_cast< ::std::string*>(&_default_persona_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLookupMultipleAccountNamesResponse_Account::~CMsgLookupMultipleAccountNamesResponse_Account() {
  SharedDtor();
}

void CMsgLookupMultipleAccountNamesResponse_Account::SharedDtor() {
  if (persona_ != &_default_persona_) {
    delete persona_;
  }
  if (this != default_instance_) {
  }
}

void CMsgLookupMultipleAccountNamesResponse_Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse_Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLookupMultipleAccountNamesResponse_Account_descriptor_;
}

const CMsgLookupMultipleAccountNamesResponse_Account& CMsgLookupMultipleAccountNamesResponse_Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLookupMultipleAccountNamesResponse_Account* CMsgLookupMultipleAccountNamesResponse_Account::default_instance_ = NULL;

CMsgLookupMultipleAccountNamesResponse_Account* CMsgLookupMultipleAccountNamesResponse_Account::New() const {
  return new CMsgLookupMultipleAccountNamesResponse_Account;
}

void CMsgLookupMultipleAccountNamesResponse_Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    if (_has_bit(1)) {
      if (persona_ != &_default_persona_) {
        persona_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLookupMultipleAccountNamesResponse_Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_persona;
        break;
      }
      
      // optional string persona = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persona().data(), this->persona().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLookupMultipleAccountNamesResponse_Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional string persona = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->persona(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLookupMultipleAccountNamesResponse_Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional string persona = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLookupMultipleAccountNamesResponse_Account::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional string persona = 2;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLookupMultipleAccountNamesResponse_Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNamesResponse_Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLookupMultipleAccountNamesResponse_Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNamesResponse_Account::MergeFrom(const CMsgLookupMultipleAccountNamesResponse_Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_persona(from.persona());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLookupMultipleAccountNamesResponse_Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse_Account::CopyFrom(const CMsgLookupMultipleAccountNamesResponse_Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse_Account::IsInitialized() const {
  
  return true;
}

void CMsgLookupMultipleAccountNamesResponse_Account::Swap(CMsgLookupMultipleAccountNamesResponse_Account* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(persona_, other->persona_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLookupMultipleAccountNamesResponse_Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLookupMultipleAccountNamesResponse_Account_descriptor_;
  metadata.reflection = CMsgLookupMultipleAccountNamesResponse_Account_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgLookupMultipleAccountNamesResponse::kAccountsFieldNumber;
#endif  // !_MSC_VER

CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLookupMultipleAccountNamesResponse::InitAsDefaultInstance() {
}

CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(const CMsgLookupMultipleAccountNamesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLookupMultipleAccountNamesResponse::~CMsgLookupMultipleAccountNamesResponse() {
  SharedDtor();
}

void CMsgLookupMultipleAccountNamesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLookupMultipleAccountNamesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLookupMultipleAccountNamesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLookupMultipleAccountNamesResponse_descriptor_;
}

const CMsgLookupMultipleAccountNamesResponse& CMsgLookupMultipleAccountNamesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLookupMultipleAccountNamesResponse* CMsgLookupMultipleAccountNamesResponse::default_instance_ = NULL;

CMsgLookupMultipleAccountNamesResponse* CMsgLookupMultipleAccountNamesResponse::New() const {
  return new CMsgLookupMultipleAccountNamesResponse;
}

void CMsgLookupMultipleAccountNamesResponse::Clear() {
  accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLookupMultipleAccountNamesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_accounts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLookupMultipleAccountNamesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  for (int i = 0; i < this->accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accounts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLookupMultipleAccountNamesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  for (int i = 0; i < this->accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accounts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLookupMultipleAccountNamesResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLookupMultipleAccountNamesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNamesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLookupMultipleAccountNamesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNamesResponse::MergeFrom(const CMsgLookupMultipleAccountNamesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  accounts_.MergeFrom(from.accounts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLookupMultipleAccountNamesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse::CopyFrom(const CMsgLookupMultipleAccountNamesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse::IsInitialized() const {
  
  return true;
}

void CMsgLookupMultipleAccountNamesResponse::Swap(CMsgLookupMultipleAccountNamesResponse* other) {
  if (other != this) {
    accounts_.Swap(&other->accounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLookupMultipleAccountNamesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLookupMultipleAccountNamesResponse_descriptor_;
  metadata.reflection = CMsgLookupMultipleAccountNamesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCGrantSelfMadeItemToAccount::kItemDefIndexFieldNumber;
const int CMsgGCToGCGrantSelfMadeItemToAccount::kAccountidFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCGrantSelfMadeItemToAccount::InitAsDefaultInstance() {
}

CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount(const CMsgGCToGCGrantSelfMadeItemToAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::SharedCtor() {
  _cached_size_ = 0;
  item_def_index_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCGrantSelfMadeItemToAccount::~CMsgGCToGCGrantSelfMadeItemToAccount() {
  SharedDtor();
}

void CMsgGCToGCGrantSelfMadeItemToAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCGrantSelfMadeItemToAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCGrantSelfMadeItemToAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCGrantSelfMadeItemToAccount_descriptor_;
}

const CMsgGCToGCGrantSelfMadeItemToAccount& CMsgGCToGCGrantSelfMadeItemToAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCGrantSelfMadeItemToAccount* CMsgGCToGCGrantSelfMadeItemToAccount::default_instance_ = NULL;

CMsgGCToGCGrantSelfMadeItemToAccount* CMsgGCToGCGrantSelfMadeItemToAccount::New() const {
  return new CMsgGCToGCGrantSelfMadeItemToAccount;
}

void CMsgGCToGCGrantSelfMadeItemToAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_index_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCGrantSelfMadeItemToAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }
      
      // optional uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCGrantSelfMadeItemToAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_index(), output);
  }
  
  // optional uint32 accountid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCGrantSelfMadeItemToAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_index(), target);
  }
  
  // optional uint32 accountid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCGrantSelfMadeItemToAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def_index = 1;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }
    
    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCGrantSelfMadeItemToAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCGrantSelfMadeItemToAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCGrantSelfMadeItemToAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCGrantSelfMadeItemToAccount::MergeFrom(const CMsgGCToGCGrantSelfMadeItemToAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_def_index(from.item_def_index());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCGrantSelfMadeItemToAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::CopyFrom(const CMsgGCToGCGrantSelfMadeItemToAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantSelfMadeItemToAccount::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCGrantSelfMadeItemToAccount::Swap(CMsgGCToGCGrantSelfMadeItemToAccount* other) {
  if (other != this) {
    std::swap(item_def_index_, other->item_def_index_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCGrantSelfMadeItemToAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCGrantSelfMadeItemToAccount_descriptor_;
  metadata.reflection = CMsgGCToGCGrantSelfMadeItemToAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCThankedByNewUser::kNewUserAccountidFieldNumber;
const int CMsgGCToGCThankedByNewUser::kThankedUserAccountidFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCThankedByNewUser::CMsgGCToGCThankedByNewUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCToGCThankedByNewUser::InitAsDefaultInstance() {
}

CMsgGCToGCThankedByNewUser::CMsgGCToGCThankedByNewUser(const CMsgGCToGCThankedByNewUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCToGCThankedByNewUser::SharedCtor() {
  _cached_size_ = 0;
  new_user_accountid_ = 0u;
  thanked_user_accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCThankedByNewUser::~CMsgGCToGCThankedByNewUser() {
  SharedDtor();
}

void CMsgGCToGCThankedByNewUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCThankedByNewUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCThankedByNewUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCThankedByNewUser_descriptor_;
}

const CMsgGCToGCThankedByNewUser& CMsgGCToGCThankedByNewUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCToGCThankedByNewUser* CMsgGCToGCThankedByNewUser::default_instance_ = NULL;

CMsgGCToGCThankedByNewUser* CMsgGCToGCThankedByNewUser::New() const {
  return new CMsgGCToGCThankedByNewUser;
}

void CMsgGCToGCThankedByNewUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_user_accountid_ = 0u;
    thanked_user_accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToGCThankedByNewUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_user_accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_user_accountid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thanked_user_accountid;
        break;
      }
      
      // optional uint32 thanked_user_accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thanked_user_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thanked_user_accountid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCToGCThankedByNewUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 new_user_accountid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_user_accountid(), output);
  }
  
  // optional uint32 thanked_user_accountid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thanked_user_accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCToGCThankedByNewUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 new_user_accountid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_user_accountid(), target);
  }
  
  // optional uint32 thanked_user_accountid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thanked_user_accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCToGCThankedByNewUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 new_user_accountid = 1;
    if (has_new_user_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_user_accountid());
    }
    
    // optional uint32 thanked_user_accountid = 2;
    if (has_thanked_user_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thanked_user_accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCThankedByNewUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToGCThankedByNewUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToGCThankedByNewUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCThankedByNewUser::MergeFrom(const CMsgGCToGCThankedByNewUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_new_user_accountid(from.new_user_accountid());
    }
    if (from._has_bit(1)) {
      set_thanked_user_accountid(from.thanked_user_accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToGCThankedByNewUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCThankedByNewUser::CopyFrom(const CMsgGCToGCThankedByNewUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCThankedByNewUser::IsInitialized() const {
  
  return true;
}

void CMsgGCToGCThankedByNewUser::Swap(CMsgGCToGCThankedByNewUser* other) {
  if (other != this) {
    std::swap(new_user_accountid_, other->new_user_accountid_);
    std::swap(thanked_user_accountid_, other->thanked_user_accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToGCThankedByNewUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCThankedByNewUser_descriptor_;
  metadata.reflection = CMsgGCToGCThankedByNewUser_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCShuffleCrateContents::_default_user_code_string_;
#ifndef _MSC_VER
const int CMsgGCShuffleCrateContents::kCrateItemIdFieldNumber;
const int CMsgGCShuffleCrateContents::kUserCodeStringFieldNumber;
#endif  // !_MSC_VER

CMsgGCShuffleCrateContents::CMsgGCShuffleCrateContents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCShuffleCrateContents::InitAsDefaultInstance() {
}

CMsgGCShuffleCrateContents::CMsgGCShuffleCrateContents(const CMsgGCShuffleCrateContents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCShuffleCrateContents::SharedCtor() {
  _cached_size_ = 0;
  crate_item_id_ = GOOGLE_ULONGLONG(0);
  user_code_string_ = const_cast< ::std::string*>(&_default_user_code_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCShuffleCrateContents::~CMsgGCShuffleCrateContents() {
  SharedDtor();
}

void CMsgGCShuffleCrateContents::SharedDtor() {
  if (user_code_string_ != &_default_user_code_string_) {
    delete user_code_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCShuffleCrateContents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCShuffleCrateContents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCShuffleCrateContents_descriptor_;
}

const CMsgGCShuffleCrateContents& CMsgGCShuffleCrateContents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCShuffleCrateContents* CMsgGCShuffleCrateContents::default_instance_ = NULL;

CMsgGCShuffleCrateContents* CMsgGCShuffleCrateContents::New() const {
  return new CMsgGCShuffleCrateContents;
}

void CMsgGCShuffleCrateContents::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crate_item_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (user_code_string_ != &_default_user_code_string_) {
        user_code_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCShuffleCrateContents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 crate_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crate_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_code_string;
        break;
      }
      
      // optional string user_code_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_code_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_code_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_code_string().data(), this->user_code_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCShuffleCrateContents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 crate_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->crate_item_id(), output);
  }
  
  // optional string user_code_string = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_code_string().data(), this->user_code_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_code_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCShuffleCrateContents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 crate_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->crate_item_id(), target);
  }
  
  // optional string user_code_string = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_code_string().data(), this->user_code_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_code_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCShuffleCrateContents::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 crate_item_id = 1;
    if (has_crate_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->crate_item_id());
    }
    
    // optional string user_code_string = 2;
    if (has_user_code_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_code_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCShuffleCrateContents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCShuffleCrateContents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCShuffleCrateContents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCShuffleCrateContents::MergeFrom(const CMsgGCShuffleCrateContents& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_crate_item_id(from.crate_item_id());
    }
    if (from._has_bit(1)) {
      set_user_code_string(from.user_code_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCShuffleCrateContents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCShuffleCrateContents::CopyFrom(const CMsgGCShuffleCrateContents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCShuffleCrateContents::IsInitialized() const {
  
  return true;
}

void CMsgGCShuffleCrateContents::Swap(CMsgGCShuffleCrateContents* other) {
  if (other != this) {
    std::swap(crate_item_id_, other->crate_item_id_);
    std::swap(user_code_string_, other->user_code_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCShuffleCrateContents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCShuffleCrateContents_descriptor_;
  metadata.reflection = CMsgGCShuffleCrateContents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestObjective_Progress::kQuestItemIdFieldNumber;
const int CMsgGCQuestObjective_Progress::kQuestAttribIndexFieldNumber;
const int CMsgGCQuestObjective_Progress::kDeltaFieldNumber;
const int CMsgGCQuestObjective_Progress::kOwnerSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestObjective_Progress::CMsgGCQuestObjective_Progress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestObjective_Progress::InitAsDefaultInstance() {
}

CMsgGCQuestObjective_Progress::CMsgGCQuestObjective_Progress(const CMsgGCQuestObjective_Progress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestObjective_Progress::SharedCtor() {
  _cached_size_ = 0;
  quest_item_id_ = GOOGLE_ULONGLONG(0);
  quest_attrib_index_ = 0u;
  delta_ = 0u;
  owner_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestObjective_Progress::~CMsgGCQuestObjective_Progress() {
  SharedDtor();
}

void CMsgGCQuestObjective_Progress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestObjective_Progress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_Progress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestObjective_Progress_descriptor_;
}

const CMsgGCQuestObjective_Progress& CMsgGCQuestObjective_Progress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestObjective_Progress* CMsgGCQuestObjective_Progress::default_instance_ = NULL;

CMsgGCQuestObjective_Progress* CMsgGCQuestObjective_Progress::New() const {
  return new CMsgGCQuestObjective_Progress;
}

void CMsgGCQuestObjective_Progress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_item_id_ = GOOGLE_ULONGLONG(0);
    quest_attrib_index_ = 0u;
    delta_ = 0u;
    owner_steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestObjective_Progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_attrib_index;
        break;
      }
      
      // optional uint32 quest_attrib_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_attrib_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_attrib_index_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_delta;
        break;
      }
      
      // optional uint32 delta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delta_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_owner_steamid;
        break;
      }
      
      // optional fixed64 owner_steamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owner_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steamid_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestObjective_Progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_item_id(), output);
  }
  
  // optional uint32 quest_attrib_index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quest_attrib_index(), output);
  }
  
  // optional uint32 delta = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->delta(), output);
  }
  
  // optional fixed64 owner_steamid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->owner_steamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestObjective_Progress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_item_id(), target);
  }
  
  // optional uint32 quest_attrib_index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quest_attrib_index(), target);
  }
  
  // optional uint32 delta = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->delta(), target);
  }
  
  // optional fixed64 owner_steamid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->owner_steamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestObjective_Progress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_item_id = 1;
    if (has_quest_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_item_id());
    }
    
    // optional uint32 quest_attrib_index = 2;
    if (has_quest_attrib_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_attrib_index());
    }
    
    // optional uint32 delta = 3;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delta());
    }
    
    // optional fixed64 owner_steamid = 4;
    if (has_owner_steamid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestObjective_Progress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestObjective_Progress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestObjective_Progress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestObjective_Progress::MergeFrom(const CMsgGCQuestObjective_Progress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_item_id(from.quest_item_id());
    }
    if (from._has_bit(1)) {
      set_quest_attrib_index(from.quest_attrib_index());
    }
    if (from._has_bit(2)) {
      set_delta(from.delta());
    }
    if (from._has_bit(3)) {
      set_owner_steamid(from.owner_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestObjective_Progress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestObjective_Progress::CopyFrom(const CMsgGCQuestObjective_Progress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestObjective_Progress::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestObjective_Progress::Swap(CMsgGCQuestObjective_Progress* other) {
  if (other != this) {
    std::swap(quest_item_id_, other->quest_item_id_);
    std::swap(quest_attrib_index_, other->quest_attrib_index_);
    std::swap(delta_, other->delta_);
    std::swap(owner_steamid_, other->owner_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestObjective_Progress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestObjective_Progress_descriptor_;
  metadata.reflection = CMsgGCQuestObjective_Progress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestObjective_PointsChange::kQuestItemIdFieldNumber;
const int CMsgGCQuestObjective_PointsChange::kStandardPointsFieldNumber;
const int CMsgGCQuestObjective_PointsChange::kBonusPointsFieldNumber;
const int CMsgGCQuestObjective_PointsChange::kOwnerSteamidFieldNumber;
const int CMsgGCQuestObjective_PointsChange::kUpdateBasePointsFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestObjective_PointsChange::CMsgGCQuestObjective_PointsChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestObjective_PointsChange::InitAsDefaultInstance() {
}

CMsgGCQuestObjective_PointsChange::CMsgGCQuestObjective_PointsChange(const CMsgGCQuestObjective_PointsChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestObjective_PointsChange::SharedCtor() {
  _cached_size_ = 0;
  quest_item_id_ = GOOGLE_ULONGLONG(0);
  standard_points_ = 0u;
  bonus_points_ = 0u;
  owner_steamid_ = GOOGLE_ULONGLONG(0);
  update_base_points_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestObjective_PointsChange::~CMsgGCQuestObjective_PointsChange() {
  SharedDtor();
}

void CMsgGCQuestObjective_PointsChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestObjective_PointsChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_PointsChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestObjective_PointsChange_descriptor_;
}

const CMsgGCQuestObjective_PointsChange& CMsgGCQuestObjective_PointsChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestObjective_PointsChange* CMsgGCQuestObjective_PointsChange::default_instance_ = NULL;

CMsgGCQuestObjective_PointsChange* CMsgGCQuestObjective_PointsChange::New() const {
  return new CMsgGCQuestObjective_PointsChange;
}

void CMsgGCQuestObjective_PointsChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_item_id_ = GOOGLE_ULONGLONG(0);
    standard_points_ = 0u;
    bonus_points_ = 0u;
    owner_steamid_ = GOOGLE_ULONGLONG(0);
    update_base_points_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestObjective_PointsChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_standard_points;
        break;
      }
      
      // optional uint32 standard_points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standard_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standard_points_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bonus_points;
        break;
      }
      
      // optional uint32 bonus_points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_points_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_owner_steamid;
        break;
      }
      
      // optional fixed64 owner_steamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owner_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steamid_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_update_base_points;
        break;
      }
      
      // optional bool update_base_points = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_base_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_base_points_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestObjective_PointsChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_item_id(), output);
  }
  
  // optional uint32 standard_points = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->standard_points(), output);
  }
  
  // optional uint32 bonus_points = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bonus_points(), output);
  }
  
  // optional fixed64 owner_steamid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->owner_steamid(), output);
  }
  
  // optional bool update_base_points = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->update_base_points(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestObjective_PointsChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_item_id(), target);
  }
  
  // optional uint32 standard_points = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->standard_points(), target);
  }
  
  // optional uint32 bonus_points = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bonus_points(), target);
  }
  
  // optional fixed64 owner_steamid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->owner_steamid(), target);
  }
  
  // optional bool update_base_points = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->update_base_points(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestObjective_PointsChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_item_id = 1;
    if (has_quest_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_item_id());
    }
    
    // optional uint32 standard_points = 2;
    if (has_standard_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standard_points());
    }
    
    // optional uint32 bonus_points = 3;
    if (has_bonus_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_points());
    }
    
    // optional fixed64 owner_steamid = 4;
    if (has_owner_steamid()) {
      total_size += 1 + 8;
    }
    
    // optional bool update_base_points = 5 [default = false];
    if (has_update_base_points()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestObjective_PointsChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestObjective_PointsChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestObjective_PointsChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestObjective_PointsChange::MergeFrom(const CMsgGCQuestObjective_PointsChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_item_id(from.quest_item_id());
    }
    if (from._has_bit(1)) {
      set_standard_points(from.standard_points());
    }
    if (from._has_bit(2)) {
      set_bonus_points(from.bonus_points());
    }
    if (from._has_bit(3)) {
      set_owner_steamid(from.owner_steamid());
    }
    if (from._has_bit(4)) {
      set_update_base_points(from.update_base_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestObjective_PointsChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestObjective_PointsChange::CopyFrom(const CMsgGCQuestObjective_PointsChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestObjective_PointsChange::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestObjective_PointsChange::Swap(CMsgGCQuestObjective_PointsChange* other) {
  if (other != this) {
    std::swap(quest_item_id_, other->quest_item_id_);
    std::swap(standard_points_, other->standard_points_);
    std::swap(bonus_points_, other->bonus_points_);
    std::swap(owner_steamid_, other->owner_steamid_);
    std::swap(update_base_points_, other->update_base_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestObjective_PointsChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestObjective_PointsChange_descriptor_;
  metadata.reflection = CMsgGCQuestObjective_PointsChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestComplete_Request::kQuestItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestComplete_Request::CMsgGCQuestComplete_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestComplete_Request::InitAsDefaultInstance() {
}

CMsgGCQuestComplete_Request::CMsgGCQuestComplete_Request(const CMsgGCQuestComplete_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestComplete_Request::SharedCtor() {
  _cached_size_ = 0;
  quest_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestComplete_Request::~CMsgGCQuestComplete_Request() {
  SharedDtor();
}

void CMsgGCQuestComplete_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestComplete_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestComplete_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestComplete_Request_descriptor_;
}

const CMsgGCQuestComplete_Request& CMsgGCQuestComplete_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestComplete_Request* CMsgGCQuestComplete_Request::default_instance_ = NULL;

CMsgGCQuestComplete_Request* CMsgGCQuestComplete_Request::New() const {
  return new CMsgGCQuestComplete_Request;
}

void CMsgGCQuestComplete_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestComplete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestComplete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestComplete_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestComplete_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_item_id = 1;
    if (has_quest_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestComplete_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestComplete_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestComplete_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestComplete_Request::MergeFrom(const CMsgGCQuestComplete_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_item_id(from.quest_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestComplete_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestComplete_Request::CopyFrom(const CMsgGCQuestComplete_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestComplete_Request::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestComplete_Request::Swap(CMsgGCQuestComplete_Request* other) {
  if (other != this) {
    std::swap(quest_item_id_, other->quest_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestComplete_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestComplete_Request_descriptor_;
  metadata.reflection = CMsgGCQuestComplete_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCQuestCompleted::CMsgGCQuestCompleted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestCompleted::InitAsDefaultInstance() {
}

CMsgGCQuestCompleted::CMsgGCQuestCompleted(const CMsgGCQuestCompleted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestCompleted::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestCompleted::~CMsgGCQuestCompleted() {
  SharedDtor();
}

void CMsgGCQuestCompleted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestCompleted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestCompleted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestCompleted_descriptor_;
}

const CMsgGCQuestCompleted& CMsgGCQuestCompleted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestCompleted* CMsgGCQuestCompleted::default_instance_ = NULL;

CMsgGCQuestCompleted* CMsgGCQuestCompleted::New() const {
  return new CMsgGCQuestCompleted;
}

void CMsgGCQuestCompleted::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestCompleted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCQuestCompleted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestCompleted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestCompleted::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestCompleted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestCompleted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestCompleted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestCompleted::MergeFrom(const CMsgGCQuestCompleted& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestCompleted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestCompleted::CopyFrom(const CMsgGCQuestCompleted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestCompleted::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestCompleted::Swap(CMsgGCQuestCompleted* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestCompleted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestCompleted_descriptor_;
  metadata.reflection = CMsgGCQuestCompleted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestObjective_RequestLoanerItems::kQuestItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestObjective_RequestLoanerItems::CMsgGCQuestObjective_RequestLoanerItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestObjective_RequestLoanerItems::InitAsDefaultInstance() {
}

CMsgGCQuestObjective_RequestLoanerItems::CMsgGCQuestObjective_RequestLoanerItems(const CMsgGCQuestObjective_RequestLoanerItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestObjective_RequestLoanerItems::SharedCtor() {
  _cached_size_ = 0;
  quest_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestObjective_RequestLoanerItems::~CMsgGCQuestObjective_RequestLoanerItems() {
  SharedDtor();
}

void CMsgGCQuestObjective_RequestLoanerItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestObjective_RequestLoanerItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_RequestLoanerItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestObjective_RequestLoanerItems_descriptor_;
}

const CMsgGCQuestObjective_RequestLoanerItems& CMsgGCQuestObjective_RequestLoanerItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestObjective_RequestLoanerItems* CMsgGCQuestObjective_RequestLoanerItems::default_instance_ = NULL;

CMsgGCQuestObjective_RequestLoanerItems* CMsgGCQuestObjective_RequestLoanerItems::New() const {
  return new CMsgGCQuestObjective_RequestLoanerItems;
}

void CMsgGCQuestObjective_RequestLoanerItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestObjective_RequestLoanerItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestObjective_RequestLoanerItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestObjective_RequestLoanerItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestObjective_RequestLoanerItems::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_item_id = 1;
    if (has_quest_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestObjective_RequestLoanerItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestObjective_RequestLoanerItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestObjective_RequestLoanerItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestObjective_RequestLoanerItems::MergeFrom(const CMsgGCQuestObjective_RequestLoanerItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_item_id(from.quest_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestObjective_RequestLoanerItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestObjective_RequestLoanerItems::CopyFrom(const CMsgGCQuestObjective_RequestLoanerItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestObjective_RequestLoanerItems::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestObjective_RequestLoanerItems::Swap(CMsgGCQuestObjective_RequestLoanerItems* other) {
  if (other != this) {
    std::swap(quest_item_id_, other->quest_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestObjective_RequestLoanerItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestObjective_RequestLoanerItems_descriptor_;
  metadata.reflection = CMsgGCQuestObjective_RequestLoanerItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCQuestObjective_RequestLoanerResponse::CMsgGCQuestObjective_RequestLoanerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestObjective_RequestLoanerResponse::InitAsDefaultInstance() {
}

CMsgGCQuestObjective_RequestLoanerResponse::CMsgGCQuestObjective_RequestLoanerResponse(const CMsgGCQuestObjective_RequestLoanerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestObjective_RequestLoanerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestObjective_RequestLoanerResponse::~CMsgGCQuestObjective_RequestLoanerResponse() {
  SharedDtor();
}

void CMsgGCQuestObjective_RequestLoanerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestObjective_RequestLoanerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestObjective_RequestLoanerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestObjective_RequestLoanerResponse_descriptor_;
}

const CMsgGCQuestObjective_RequestLoanerResponse& CMsgGCQuestObjective_RequestLoanerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestObjective_RequestLoanerResponse* CMsgGCQuestObjective_RequestLoanerResponse::default_instance_ = NULL;

CMsgGCQuestObjective_RequestLoanerResponse* CMsgGCQuestObjective_RequestLoanerResponse::New() const {
  return new CMsgGCQuestObjective_RequestLoanerResponse;
}

void CMsgGCQuestObjective_RequestLoanerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestObjective_RequestLoanerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgGCQuestObjective_RequestLoanerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestObjective_RequestLoanerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestObjective_RequestLoanerResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestObjective_RequestLoanerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestObjective_RequestLoanerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestObjective_RequestLoanerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestObjective_RequestLoanerResponse::MergeFrom(const CMsgGCQuestObjective_RequestLoanerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestObjective_RequestLoanerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestObjective_RequestLoanerResponse::CopyFrom(const CMsgGCQuestObjective_RequestLoanerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestObjective_RequestLoanerResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestObjective_RequestLoanerResponse::Swap(CMsgGCQuestObjective_RequestLoanerResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestObjective_RequestLoanerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestObjective_RequestLoanerResponse_descriptor_;
  metadata.reflection = CMsgGCQuestObjective_RequestLoanerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCraftCollectionUpgrade::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgCraftCollectionUpgrade::CMsgCraftCollectionUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCraftCollectionUpgrade::InitAsDefaultInstance() {
}

CMsgCraftCollectionUpgrade::CMsgCraftCollectionUpgrade(const CMsgCraftCollectionUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCraftCollectionUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCraftCollectionUpgrade::~CMsgCraftCollectionUpgrade() {
  SharedDtor();
}

void CMsgCraftCollectionUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCraftCollectionUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCraftCollectionUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCraftCollectionUpgrade_descriptor_;
}

const CMsgCraftCollectionUpgrade& CMsgCraftCollectionUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgCraftCollectionUpgrade* CMsgCraftCollectionUpgrade::default_instance_ = NULL;

CMsgCraftCollectionUpgrade* CMsgCraftCollectionUpgrade::New() const {
  return new CMsgCraftCollectionUpgrade;
}

void CMsgCraftCollectionUpgrade::Clear() {
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCraftCollectionUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCraftCollectionUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->item_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCraftCollectionUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->item_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCraftCollectionUpgrade::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 item_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCraftCollectionUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCraftCollectionUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCraftCollectionUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCraftCollectionUpgrade::MergeFrom(const CMsgCraftCollectionUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCraftCollectionUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCraftCollectionUpgrade::CopyFrom(const CMsgCraftCollectionUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftCollectionUpgrade::IsInitialized() const {
  
  return true;
}

void CMsgCraftCollectionUpgrade::Swap(CMsgCraftCollectionUpgrade* other) {
  if (other != this) {
    item_id_.Swap(&other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCraftCollectionUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCraftCollectionUpgrade_descriptor_;
  metadata.reflection = CMsgCraftCollectionUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCraftHalloweenOffering::kToolIdFieldNumber;
const int CMsgCraftHalloweenOffering::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgCraftHalloweenOffering::CMsgCraftHalloweenOffering()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCraftHalloweenOffering::InitAsDefaultInstance() {
}

CMsgCraftHalloweenOffering::CMsgCraftHalloweenOffering(const CMsgCraftHalloweenOffering& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCraftHalloweenOffering::SharedCtor() {
  _cached_size_ = 0;
  tool_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCraftHalloweenOffering::~CMsgCraftHalloweenOffering() {
  SharedDtor();
}

void CMsgCraftHalloweenOffering::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCraftHalloweenOffering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCraftHalloweenOffering::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCraftHalloweenOffering_descriptor_;
}

const CMsgCraftHalloweenOffering& CMsgCraftHalloweenOffering::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgCraftHalloweenOffering* CMsgCraftHalloweenOffering::default_instance_ = NULL;

CMsgCraftHalloweenOffering* CMsgCraftHalloweenOffering::New() const {
  return new CMsgCraftHalloweenOffering;
}

void CMsgCraftHalloweenOffering::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tool_id_ = GOOGLE_ULONGLONG(0);
  }
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCraftHalloweenOffering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // repeated uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCraftHalloweenOffering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tool_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_id(), output);
  }
  
  // repeated uint64 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->item_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCraftHalloweenOffering::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tool_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_id(), target);
  }
  
  // repeated uint64 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->item_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCraftHalloweenOffering::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tool_id = 1;
    if (has_tool_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_id());
    }
    
  }
  // repeated uint64 item_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCraftHalloweenOffering::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCraftHalloweenOffering* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCraftHalloweenOffering*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCraftHalloweenOffering::MergeFrom(const CMsgCraftHalloweenOffering& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tool_id(from.tool_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCraftHalloweenOffering::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCraftHalloweenOffering::CopyFrom(const CMsgCraftHalloweenOffering& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftHalloweenOffering::IsInitialized() const {
  
  return true;
}

void CMsgCraftHalloweenOffering::Swap(CMsgCraftHalloweenOffering* other) {
  if (other != this) {
    std::swap(tool_id_, other->tool_id_);
    item_id_.Swap(&other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCraftHalloweenOffering::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCraftHalloweenOffering_descriptor_;
  metadata.reflection = CMsgCraftHalloweenOffering_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCraftCommonStatClock::kToolIdFieldNumber;
const int CMsgCraftCommonStatClock::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgCraftCommonStatClock::CMsgCraftCommonStatClock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCraftCommonStatClock::InitAsDefaultInstance() {
}

CMsgCraftCommonStatClock::CMsgCraftCommonStatClock(const CMsgCraftCommonStatClock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCraftCommonStatClock::SharedCtor() {
  _cached_size_ = 0;
  tool_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCraftCommonStatClock::~CMsgCraftCommonStatClock() {
  SharedDtor();
}

void CMsgCraftCommonStatClock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCraftCommonStatClock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCraftCommonStatClock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCraftCommonStatClock_descriptor_;
}

const CMsgCraftCommonStatClock& CMsgCraftCommonStatClock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgCraftCommonStatClock* CMsgCraftCommonStatClock::default_instance_ = NULL;

CMsgCraftCommonStatClock* CMsgCraftCommonStatClock::New() const {
  return new CMsgCraftCommonStatClock;
}

void CMsgCraftCommonStatClock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tool_id_ = GOOGLE_ULONGLONG(0);
  }
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCraftCommonStatClock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // repeated uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCraftCommonStatClock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tool_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_id(), output);
  }
  
  // repeated uint64 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->item_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCraftCommonStatClock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tool_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_id(), target);
  }
  
  // repeated uint64 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->item_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCraftCommonStatClock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tool_id = 1;
    if (has_tool_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_id());
    }
    
  }
  // repeated uint64 item_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCraftCommonStatClock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCraftCommonStatClock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCraftCommonStatClock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCraftCommonStatClock::MergeFrom(const CMsgCraftCommonStatClock& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tool_id(from.tool_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCraftCommonStatClock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCraftCommonStatClock::CopyFrom(const CMsgCraftCommonStatClock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftCommonStatClock::IsInitialized() const {
  
  return true;
}

void CMsgCraftCommonStatClock::Swap(CMsgCraftCommonStatClock* other) {
  if (other != this) {
    std::swap(tool_id_, other->tool_id_);
    item_id_.Swap(&other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCraftCommonStatClock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCraftCommonStatClock_descriptor_;
  metadata.reflection = CMsgCraftCommonStatClock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCQuestDiscard_Request::kQuestItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCQuestDiscard_Request::CMsgGCQuestDiscard_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCQuestDiscard_Request::InitAsDefaultInstance() {
}

CMsgGCQuestDiscard_Request::CMsgGCQuestDiscard_Request(const CMsgGCQuestDiscard_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCQuestDiscard_Request::SharedCtor() {
  _cached_size_ = 0;
  quest_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCQuestDiscard_Request::~CMsgGCQuestDiscard_Request() {
  SharedDtor();
}

void CMsgGCQuestDiscard_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCQuestDiscard_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCQuestDiscard_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCQuestDiscard_Request_descriptor_;
}

const CMsgGCQuestDiscard_Request& CMsgGCQuestDiscard_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_econ_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCQuestDiscard_Request* CMsgGCQuestDiscard_Request::default_instance_ = NULL;

CMsgGCQuestDiscard_Request* CMsgGCQuestDiscard_Request::New() const {
  return new CMsgGCQuestDiscard_Request;
}

void CMsgGCQuestDiscard_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCQuestDiscard_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 quest_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quest_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCQuestDiscard_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quest_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCQuestDiscard_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 quest_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->quest_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCQuestDiscard_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 quest_item_id = 1;
    if (has_quest_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quest_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCQuestDiscard_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCQuestDiscard_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCQuestDiscard_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCQuestDiscard_Request::MergeFrom(const CMsgGCQuestDiscard_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_quest_item_id(from.quest_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCQuestDiscard_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCQuestDiscard_Request::CopyFrom(const CMsgGCQuestDiscard_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCQuestDiscard_Request::IsInitialized() const {
  
  return true;
}

void CMsgGCQuestDiscard_Request::Swap(CMsgGCQuestDiscard_Request* other) {
  if (other != this) {
    std::swap(quest_item_id_, other->quest_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCQuestDiscard_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCQuestDiscard_Request_descriptor_;
  metadata.reflection = CMsgGCQuestDiscard_Request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning( pop )
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic warning "-Wshadow"
#endif // _PS3
#endif // _GNUC

