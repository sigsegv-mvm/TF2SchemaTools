// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base_gcmessages.pb.h"

#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning(push)
#pragma warning(disable : 4530)	// warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)	// warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)	// warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)	// warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)	// warning C4127: conditional expression is constant
#pragma warning(disable : 4100)	// warning C4100: 'op' : unreferenced formal parameter
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _PS3
#endif // _GNUC

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGCStorePurchaseInit_LineItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCStorePurchaseInit_LineItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCStorePurchaseInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseInitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCStorePurchaseInitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOPartyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOPartyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOLobbyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOLobbyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSystemBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSystemBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientWelcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientWelcome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerWelcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerWelcome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGoodbye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGoodbye_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerGoodbye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerGoodbye_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgInviteToParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgInviteToParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgInvitationCreated_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgInvitationCreated_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgKickFromParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKickFromParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLeaveParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLeaveParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgServerAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgServerAvailable_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLANServerAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLANServerAvailable_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconGameAccountClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconGameAccountClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemCriteriaCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemCriteriaCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOItemRecipe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOItemRecipe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDevNewItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDevNewItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDevDebugRollLootRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDevDebugRollLootRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgIncrementKillCountAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute_Multiple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgIncrementKillCountAttribute_Multiple_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTrackUniquePlayerPairEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTrackUniquePlayerPairEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyStrangeCountTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyStrangeCountTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyStrangePart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyStrangePart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyStrangeRestriction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyStrangeRestriction_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyUpgradeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyUpgradeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItemAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItemAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItemEquipped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItemEquipped_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAdjustItemEquippedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAdjustItemEquippedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSortItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSortItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconClaimCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconClaimCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStoreGetUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStoreGetUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStoreGetUserDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStoreGetUserDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdateItemSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdateItemSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCError_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestInventoryRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestInventoryRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConVarValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConVarValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplicateConVars_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplicateConVars_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReplayUploadedToYouTube_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReplayUploadedToYouTube_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConsumableExhausted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConsumableExhausted_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgItemAcknowledged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgItemAcknowledged_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetPresetItemPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetPresetItemPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetItemPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetItemPositions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetItemPositions_ItemPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetItemPositions_ItemPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconItemPresetInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconItemPresetInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSelectPresetForClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSelectPresetForClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOClassPresetClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOClassPresetClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCReportAbuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCReportAbuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCReportAbuseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCReportAbuseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCNameItemNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCNameItemNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCClientDisplayNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCClientDisplayNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCShowItemsPickedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCShowItemsPickedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUpdatePeriodicEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUpdatePeriodicEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCIncrementKillCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCIncrementKillCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRemoveStrangePart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRemoveStrangePart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRemoveUpgradeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRemoveUpgradeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRemoveCustomizationAttributeSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRemoveCustomizationAttributeSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCResetStrangeScores_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCResetStrangeScores_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCItemPreviewItemBoughtNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCItemPreviewItemBoughtNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCStorePurchaseCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseCancelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCStorePurchaseCancelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseFinalize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCStorePurchaseFinalize_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseFinalizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCStorePurchaseFinalizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCBannedWordListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCBannedWordListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCGiftedItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCGiftedItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCCollectItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCCollectItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCClientMarketDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCClientMarketDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCClientMarketDataEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCClientMarketDataEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCClientMarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCClientMarketData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyToolToItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyToolToItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyToolToBaseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyToolToBaseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRecipeComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRecipeComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFulfillDynamicRecipeComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFulfillDynamicRecipeComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetItemEffectVerticalOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetItemEffectVerticalOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetHatEffectUseHeadOrigin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetHatEffectUseHeadOrigin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDeliverGiftResponseGiver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDeliverGiftResponseGiver_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOEconGameAccountForGameServers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOEconGameAccountForGameServers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_GetContributors_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_GetContributors_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCBaseMsg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGCBaseProtoObjectTypes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GCGoodbyeReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_5fgcmessages_2eproto() {
  protobuf_AddDesc_base_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CGCStorePurchaseInit_LineItem_descriptor_ = file->message_type(0);
  static const int CGCStorePurchaseInit_LineItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, item_def_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, cost_in_local_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, purchase_type_),
  };
  CGCStorePurchaseInit_LineItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCStorePurchaseInit_LineItem_descriptor_,
      CGCStorePurchaseInit_LineItem::default_instance_,
      CGCStorePurchaseInit_LineItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCStorePurchaseInit_LineItem));
  CMsgGCStorePurchaseInit_descriptor_ = file->message_type(1);
  static const int CMsgGCStorePurchaseInit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, line_items_),
  };
  CMsgGCStorePurchaseInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCStorePurchaseInit_descriptor_,
      CMsgGCStorePurchaseInit::default_instance_,
      CMsgGCStorePurchaseInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCStorePurchaseInit));
  CMsgGCStorePurchaseInitResponse_descriptor_ = file->message_type(2);
  static const int CMsgGCStorePurchaseInitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, txn_id_),
  };
  CMsgGCStorePurchaseInitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCStorePurchaseInitResponse_descriptor_,
      CMsgGCStorePurchaseInitResponse::default_instance_,
      CMsgGCStorePurchaseInitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCStorePurchaseInitResponse));
  CSOPartyInvite_descriptor_ = file->message_type(3);
  static const int CSOPartyInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, sender_name_),
  };
  CSOPartyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOPartyInvite_descriptor_,
      CSOPartyInvite::default_instance_,
      CSOPartyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOPartyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOPartyInvite));
  CSOLobbyInvite_descriptor_ = file->message_type(4);
  static const int CSOLobbyInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, sender_name_),
  };
  CSOLobbyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOLobbyInvite_descriptor_,
      CSOLobbyInvite::default_instance_,
      CSOLobbyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOLobbyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOLobbyInvite));
  CMsgSystemBroadcast_descriptor_ = file->message_type(5);
  static const int CMsgSystemBroadcast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, message_),
  };
  CMsgSystemBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSystemBroadcast_descriptor_,
      CMsgSystemBroadcast::default_instance_,
      CMsgSystemBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSystemBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSystemBroadcast));
  CMsgClientHello_descriptor_ = file->message_type(6);
  static const int CMsgClientHello_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, version_),
  };
  CMsgClientHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientHello_descriptor_,
      CMsgClientHello::default_instance_,
      CMsgClientHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientHello));
  CMsgServerHello_descriptor_ = file->message_type(7);
  static const int CMsgServerHello_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, version_),
  };
  CMsgServerHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerHello_descriptor_,
      CMsgServerHello::default_instance_,
      CMsgServerHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerHello));
  CMsgClientWelcome_descriptor_ = file->message_type(8);
  static const int CMsgClientWelcome_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, game_data_),
  };
  CMsgClientWelcome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientWelcome_descriptor_,
      CMsgClientWelcome::default_instance_,
      CMsgClientWelcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientWelcome));
  CMsgServerWelcome_descriptor_ = file->message_type(9);
  static const int CMsgServerWelcome_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerWelcome, min_allowed_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerWelcome, active_version_),
  };
  CMsgServerWelcome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerWelcome_descriptor_,
      CMsgServerWelcome::default_instance_,
      CMsgServerWelcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerWelcome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerWelcome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerWelcome));
  CMsgClientGoodbye_descriptor_ = file->message_type(10);
  static const int CMsgClientGoodbye_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGoodbye, reason_),
  };
  CMsgClientGoodbye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGoodbye_descriptor_,
      CMsgClientGoodbye::default_instance_,
      CMsgClientGoodbye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGoodbye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGoodbye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGoodbye));
  CMsgServerGoodbye_descriptor_ = file->message_type(11);
  static const int CMsgServerGoodbye_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGoodbye, reason_),
  };
  CMsgServerGoodbye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerGoodbye_descriptor_,
      CMsgServerGoodbye::default_instance_,
      CMsgServerGoodbye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGoodbye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerGoodbye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerGoodbye));
  CMsgInviteToParty_descriptor_ = file->message_type(12);
  static const int CMsgInviteToParty_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, as_coach_),
  };
  CMsgInviteToParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgInviteToParty_descriptor_,
      CMsgInviteToParty::default_instance_,
      CMsgInviteToParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInviteToParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgInviteToParty));
  CMsgInvitationCreated_descriptor_ = file->message_type(13);
  static const int CMsgInvitationCreated_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, steam_id_),
  };
  CMsgInvitationCreated_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgInvitationCreated_descriptor_,
      CMsgInvitationCreated::default_instance_,
      CMsgInvitationCreated_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgInvitationCreated, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgInvitationCreated));
  CMsgPartyInviteResponse_descriptor_ = file->message_type(14);
  static const int CMsgPartyInviteResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, as_coach_),
  };
  CMsgPartyInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyInviteResponse_descriptor_,
      CMsgPartyInviteResponse::default_instance_,
      CMsgPartyInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyInviteResponse));
  CMsgKickFromParty_descriptor_ = file->message_type(15);
  static const int CMsgKickFromParty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, steam_id_),
  };
  CMsgKickFromParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKickFromParty_descriptor_,
      CMsgKickFromParty::default_instance_,
      CMsgKickFromParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKickFromParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKickFromParty));
  CMsgLeaveParty_descriptor_ = file->message_type(16);
  static const int CMsgLeaveParty_offsets_[1] = {
  };
  CMsgLeaveParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLeaveParty_descriptor_,
      CMsgLeaveParty::default_instance_,
      CMsgLeaveParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaveParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLeaveParty));
  CMsgServerAvailable_descriptor_ = file->message_type(17);
  static const int CMsgServerAvailable_offsets_[1] = {
  };
  CMsgServerAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgServerAvailable_descriptor_,
      CMsgServerAvailable::default_instance_,
      CMsgServerAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgServerAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgServerAvailable));
  CMsgLANServerAvailable_descriptor_ = file->message_type(18);
  static const int CMsgLANServerAvailable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLANServerAvailable, lobby_id_),
  };
  CMsgLANServerAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLANServerAvailable_descriptor_,
      CMsgLANServerAvailable::default_instance_,
      CMsgLANServerAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLANServerAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLANServerAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLANServerAvailable));
  CSOEconGameAccountClient_descriptor_ = file->message_type(19);
  static const int CSOEconGameAccountClient_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, additional_backpack_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, trial_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, need_to_choose_most_helpful_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, in_coaches_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, trade_ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, duel_ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, preview_item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, phone_verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, skill_rating_6v6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, skill_rating_9v9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, competitive_access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_ranked_ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_ranked_low_priority_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_ranked_ban_last_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_ranked_low_priority_last_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_casual_ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_casual_low_priority_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_casual_ban_last_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, matchmaking_casual_low_priority_last_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, phone_identifying_),
  };
  CSOEconGameAccountClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconGameAccountClient_descriptor_,
      CSOEconGameAccountClient::default_instance_,
      CSOEconGameAccountClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconGameAccountClient));
  CSOItemCriteriaCondition_descriptor_ = file->message_type(20);
  static const int CSOItemCriteriaCondition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, string_value_),
  };
  CSOItemCriteriaCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemCriteriaCondition_descriptor_,
      CSOItemCriteriaCondition::default_instance_,
      CSOItemCriteriaCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteriaCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemCriteriaCondition));
  CSOItemCriteria_descriptor_ = file->message_type(21);
  static const int CSOItemCriteria_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_level_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, item_quality_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, initial_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, ignore_enabled_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, recent_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, tags_),
  };
  CSOItemCriteria_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemCriteria_descriptor_,
      CSOItemCriteria::default_instance_,
      CSOItemCriteria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemCriteria, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemCriteria));
  CSOItemRecipe_descriptor_ = file->message_type(22);
  static const int CSOItemRecipe_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, n_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, desc_outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, di_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, do_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, requires_all_same_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, class_usage_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, slot_usage_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, set_for_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_items_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, output_items_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, input_item_dupe_counts_),
  };
  CSOItemRecipe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOItemRecipe_descriptor_,
      CSOItemRecipe::default_instance_,
      CSOItemRecipe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOItemRecipe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOItemRecipe));
  CMsgDevNewItemRequest_descriptor_ = file->message_type(23);
  static const int CMsgDevNewItemRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, criteria_),
  };
  CMsgDevNewItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDevNewItemRequest_descriptor_,
      CMsgDevNewItemRequest::default_instance_,
      CMsgDevNewItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevNewItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDevNewItemRequest));
  CMsgDevDebugRollLootRequest_descriptor_ = file->message_type(24);
  static const int CMsgDevDebugRollLootRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevDebugRollLootRequest, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevDebugRollLootRequest, loot_list_name_),
  };
  CMsgDevDebugRollLootRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDevDebugRollLootRequest_descriptor_,
      CMsgDevDebugRollLootRequest::default_instance_,
      CMsgDevDebugRollLootRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevDebugRollLootRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDevDebugRollLootRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDevDebugRollLootRequest));
  CMsgIncrementKillCountAttribute_descriptor_ = file->message_type(25);
  static const int CMsgIncrementKillCountAttribute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, killer_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, victim_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, increment_value_),
  };
  CMsgIncrementKillCountAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgIncrementKillCountAttribute_descriptor_,
      CMsgIncrementKillCountAttribute::default_instance_,
      CMsgIncrementKillCountAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgIncrementKillCountAttribute));
  CMsgIncrementKillCountAttribute_Multiple_descriptor_ = file->message_type(26);
  static const int CMsgIncrementKillCountAttribute_Multiple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute_Multiple, msgs_),
  };
  CMsgIncrementKillCountAttribute_Multiple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgIncrementKillCountAttribute_Multiple_descriptor_,
      CMsgIncrementKillCountAttribute_Multiple::default_instance_,
      CMsgIncrementKillCountAttribute_Multiple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute_Multiple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIncrementKillCountAttribute_Multiple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgIncrementKillCountAttribute_Multiple));
  CMsgTrackUniquePlayerPairEvent_descriptor_ = file->message_type(27);
  static const int CMsgTrackUniquePlayerPairEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrackUniquePlayerPairEvent, killer_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrackUniquePlayerPairEvent, victim_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrackUniquePlayerPairEvent, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrackUniquePlayerPairEvent, event_type_),
  };
  CMsgTrackUniquePlayerPairEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTrackUniquePlayerPairEvent_descriptor_,
      CMsgTrackUniquePlayerPairEvent::default_instance_,
      CMsgTrackUniquePlayerPairEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrackUniquePlayerPairEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrackUniquePlayerPairEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTrackUniquePlayerPairEvent));
  CMsgApplyStrangeCountTransfer_descriptor_ = file->message_type(28);
  static const int CMsgApplyStrangeCountTransfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeCountTransfer, tool_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeCountTransfer, item_src_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeCountTransfer, item_dest_item_id_),
  };
  CMsgApplyStrangeCountTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyStrangeCountTransfer_descriptor_,
      CMsgApplyStrangeCountTransfer::default_instance_,
      CMsgApplyStrangeCountTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeCountTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeCountTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyStrangeCountTransfer));
  CMsgApplyStrangePart_descriptor_ = file->message_type(29);
  static const int CMsgApplyStrangePart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, strange_part_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, item_item_id_),
  };
  CMsgApplyStrangePart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyStrangePart_descriptor_,
      CMsgApplyStrangePart::default_instance_,
      CMsgApplyStrangePart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangePart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyStrangePart));
  CMsgApplyStrangeRestriction_descriptor_ = file->message_type(30);
  static const int CMsgApplyStrangeRestriction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeRestriction, strange_part_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeRestriction, item_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeRestriction, strange_attr_index_),
  };
  CMsgApplyStrangeRestriction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyStrangeRestriction_descriptor_,
      CMsgApplyStrangeRestriction::default_instance_,
      CMsgApplyStrangeRestriction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeRestriction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyStrangeRestriction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyStrangeRestriction));
  CMsgApplyUpgradeCard_descriptor_ = file->message_type(31);
  static const int CMsgApplyUpgradeCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyUpgradeCard, upgrade_card_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyUpgradeCard, subject_item_id_),
  };
  CMsgApplyUpgradeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyUpgradeCard_descriptor_,
      CMsgApplyUpgradeCard::default_instance_,
      CMsgApplyUpgradeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyUpgradeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyUpgradeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyUpgradeCard));
  CSOEconItemAttribute_descriptor_ = file->message_type(32);
  static const int CSOEconItemAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, value_bytes_),
  };
  CSOEconItemAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItemAttribute_descriptor_,
      CSOEconItemAttribute::default_instance_,
      CSOEconItemAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItemAttribute));
  CSOEconItemEquipped_descriptor_ = file->message_type(33);
  static const int CSOEconItemEquipped_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, new_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, new_slot_),
  };
  CSOEconItemEquipped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItemEquipped_descriptor_,
      CSOEconItemEquipped::default_instance_,
      CSOEconItemEquipped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemEquipped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItemEquipped));
  CSOEconItem_descriptor_ = file->message_type(34);
  static const int CSOEconItem_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, custom_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, custom_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, interior_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, original_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, contains_equipped_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, equipped_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, contains_equipped_state_v2_),
  };
  CSOEconItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItem_descriptor_,
      CSOEconItem::default_instance_,
      CSOEconItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItem));
  CMsgAdjustItemEquippedState_descriptor_ = file->message_type(35);
  static const int CMsgAdjustItemEquippedState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, new_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, new_slot_),
  };
  CMsgAdjustItemEquippedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAdjustItemEquippedState_descriptor_,
      CMsgAdjustItemEquippedState::default_instance_,
      CMsgAdjustItemEquippedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAdjustItemEquippedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAdjustItemEquippedState));
  CMsgSortItems_descriptor_ = file->message_type(36);
  static const int CMsgSortItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, sort_type_),
  };
  CMsgSortItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSortItems_descriptor_,
      CMsgSortItems::default_instance_,
      CMsgSortItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSortItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSortItems));
  CSOEconClaimCode_descriptor_ = file->message_type(37);
  static const int CSOEconClaimCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, time_acquired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, code_),
  };
  CSOEconClaimCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconClaimCode_descriptor_,
      CSOEconClaimCode::default_instance_,
      CSOEconClaimCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconClaimCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconClaimCode));
  CMsgStoreGetUserData_descriptor_ = file->message_type(38);
  static const int CMsgStoreGetUserData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, price_sheet_version_),
  };
  CMsgStoreGetUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStoreGetUserData_descriptor_,
      CMsgStoreGetUserData::default_instance_,
      CMsgStoreGetUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStoreGetUserData));
  CMsgStoreGetUserDataResponse_descriptor_ = file->message_type(39);
  static const int CMsgStoreGetUserDataResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, experiment_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, featured_item_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, show_hat_descriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, default_item_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, popular_items_),
  };
  CMsgStoreGetUserDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStoreGetUserDataResponse_descriptor_,
      CMsgStoreGetUserDataResponse::default_instance_,
      CMsgStoreGetUserDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStoreGetUserDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStoreGetUserDataResponse));
  CMsgUpdateItemSchema_descriptor_ = file->message_type(40);
  static const int CMsgUpdateItemSchema_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, items_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, item_schema_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, items_game_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, signature_),
  };
  CMsgUpdateItemSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdateItemSchema_descriptor_,
      CMsgUpdateItemSchema::default_instance_,
      CMsgUpdateItemSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdateItemSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdateItemSchema));
  CMsgGCError_descriptor_ = file->message_type(41);
  static const int CMsgGCError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, error_text_),
  };
  CMsgGCError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCError_descriptor_,
      CMsgGCError::default_instance_,
      CMsgGCError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCError));
  CMsgRequestInventoryRefresh_descriptor_ = file->message_type(42);
  static const int CMsgRequestInventoryRefresh_offsets_[1] = {
  };
  CMsgRequestInventoryRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestInventoryRefresh_descriptor_,
      CMsgRequestInventoryRefresh::default_instance_,
      CMsgRequestInventoryRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestInventoryRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestInventoryRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestInventoryRefresh));
  CMsgConVarValue_descriptor_ = file->message_type(43);
  static const int CMsgConVarValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, value_),
  };
  CMsgConVarValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConVarValue_descriptor_,
      CMsgConVarValue::default_instance_,
      CMsgConVarValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConVarValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConVarValue));
  CMsgReplicateConVars_descriptor_ = file->message_type(44);
  static const int CMsgReplicateConVars_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, convars_),
  };
  CMsgReplicateConVars_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplicateConVars_descriptor_,
      CMsgReplicateConVars::default_instance_,
      CMsgReplicateConVars_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplicateConVars, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplicateConVars));
  CMsgUseItem_descriptor_ = file->message_type(45);
  static const int CMsgUseItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, target_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, gift__potential_targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, duel__class_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, initiator_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, itempack__ack_immediately_),
  };
  CMsgUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUseItem_descriptor_,
      CMsgUseItem::default_instance_,
      CMsgUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUseItem));
  CMsgReplayUploadedToYouTube_descriptor_ = file->message_type(46);
  static const int CMsgReplayUploadedToYouTube_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, youtube_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, youtube_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, session_id_),
  };
  CMsgReplayUploadedToYouTube_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReplayUploadedToYouTube_descriptor_,
      CMsgReplayUploadedToYouTube::default_instance_,
      CMsgReplayUploadedToYouTube_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReplayUploadedToYouTube, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReplayUploadedToYouTube));
  CMsgConsumableExhausted_descriptor_ = file->message_type(47);
  static const int CMsgConsumableExhausted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, item_def_id_),
  };
  CMsgConsumableExhausted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgConsumableExhausted_descriptor_,
      CMsgConsumableExhausted::default_instance_,
      CMsgConsumableExhausted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConsumableExhausted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgConsumableExhausted));
  CMsgItemAcknowledged_descriptor_ = file->message_type(48);
  static const int CMsgItemAcknowledged_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, is_strange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, is_unusual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, wear_),
  };
  CMsgItemAcknowledged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgItemAcknowledged_descriptor_,
      CMsgItemAcknowledged::default_instance_,
      CMsgItemAcknowledged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgItemAcknowledged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgItemAcknowledged));
  CMsgSetPresetItemPosition_descriptor_ = file->message_type(49);
  static const int CMsgSetPresetItemPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetPresetItemPosition, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetPresetItemPosition, preset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetPresetItemPosition, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetPresetItemPosition, item_id_),
  };
  CMsgSetPresetItemPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetPresetItemPosition_descriptor_,
      CMsgSetPresetItemPosition::default_instance_,
      CMsgSetPresetItemPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetPresetItemPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetPresetItemPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetPresetItemPosition));
  CMsgSetItemPositions_descriptor_ = file->message_type(50);
  static const int CMsgSetItemPositions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions, item_positions_),
  };
  CMsgSetItemPositions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetItemPositions_descriptor_,
      CMsgSetItemPositions::default_instance_,
      CMsgSetItemPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetItemPositions));
  CMsgSetItemPositions_ItemPosition_descriptor_ = CMsgSetItemPositions_descriptor_->nested_type(0);
  static const int CMsgSetItemPositions_ItemPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, position_),
  };
  CMsgSetItemPositions_ItemPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetItemPositions_ItemPosition_descriptor_,
      CMsgSetItemPositions_ItemPosition::default_instance_,
      CMsgSetItemPositions_ItemPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetItemPositions_ItemPosition));
  CSOEconItemPresetInstance_descriptor_ = file->message_type(51);
  static const int CSOEconItemPresetInstance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemPresetInstance, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemPresetInstance, preset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemPresetInstance, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemPresetInstance, item_id_),
  };
  CSOEconItemPresetInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconItemPresetInstance_descriptor_,
      CSOEconItemPresetInstance::default_instance_,
      CSOEconItemPresetInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemPresetInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconItemPresetInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconItemPresetInstance));
  CMsgSelectPresetForClass_descriptor_ = file->message_type(52);
  static const int CMsgSelectPresetForClass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSelectPresetForClass, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSelectPresetForClass, preset_id_),
  };
  CMsgSelectPresetForClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSelectPresetForClass_descriptor_,
      CMsgSelectPresetForClass::default_instance_,
      CMsgSelectPresetForClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSelectPresetForClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSelectPresetForClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSelectPresetForClass));
  CSOClassPresetClientData_descriptor_ = file->message_type(53);
  static const int CSOClassPresetClientData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOClassPresetClientData, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOClassPresetClientData, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOClassPresetClientData, active_preset_id_),
  };
  CSOClassPresetClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOClassPresetClientData_descriptor_,
      CSOClassPresetClientData::default_instance_,
      CSOClassPresetClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOClassPresetClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOClassPresetClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOClassPresetClientData));
  CMsgGCReportAbuse_descriptor_ = file->message_type(54);
  static const int CMsgGCReportAbuse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, target_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, abuse_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, target_game_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, target_game_server_port_),
  };
  CMsgGCReportAbuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCReportAbuse_descriptor_,
      CMsgGCReportAbuse::default_instance_,
      CMsgGCReportAbuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCReportAbuse));
  CMsgGCReportAbuseResponse_descriptor_ = file->message_type(55);
  static const int CMsgGCReportAbuseResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuseResponse, target_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuseResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuseResponse, error_message_),
  };
  CMsgGCReportAbuseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCReportAbuseResponse_descriptor_,
      CMsgGCReportAbuseResponse::default_instance_,
      CMsgGCReportAbuseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCReportAbuseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCReportAbuseResponse));
  CMsgGCNameItemNotification_descriptor_ = file->message_type(56);
  static const int CMsgGCNameItemNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, player_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, item_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, item_name_custom_),
  };
  CMsgGCNameItemNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCNameItemNotification_descriptor_,
      CMsgGCNameItemNotification::default_instance_,
      CMsgGCNameItemNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCNameItemNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCNameItemNotification));
  CMsgGCClientDisplayNotification_descriptor_ = file->message_type(57);
  static const int CMsgGCClientDisplayNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, notification_title_localization_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, notification_body_localization_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, body_substring_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, body_substring_values_),
  };
  CMsgGCClientDisplayNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCClientDisplayNotification_descriptor_,
      CMsgGCClientDisplayNotification::default_instance_,
      CMsgGCClientDisplayNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientDisplayNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCClientDisplayNotification));
  CMsgGCShowItemsPickedUp_descriptor_ = file->message_type(58);
  static const int CMsgGCShowItemsPickedUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShowItemsPickedUp, player_steamid_),
  };
  CMsgGCShowItemsPickedUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCShowItemsPickedUp_descriptor_,
      CMsgGCShowItemsPickedUp::default_instance_,
      CMsgGCShowItemsPickedUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShowItemsPickedUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCShowItemsPickedUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCShowItemsPickedUp));
  CMsgUpdatePeriodicEvent_descriptor_ = file->message_type(59);
  static const int CMsgUpdatePeriodicEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdatePeriodicEvent, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdatePeriodicEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdatePeriodicEvent, amount_),
  };
  CMsgUpdatePeriodicEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUpdatePeriodicEvent_descriptor_,
      CMsgUpdatePeriodicEvent::default_instance_,
      CMsgUpdatePeriodicEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdatePeriodicEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUpdatePeriodicEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUpdatePeriodicEvent));
  CMsgGCIncrementKillCountResponse_descriptor_ = file->message_type(60);
  static const int CMsgGCIncrementKillCountResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, killer_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, num_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, item_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, level_type_),
  };
  CMsgGCIncrementKillCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCIncrementKillCountResponse_descriptor_,
      CMsgGCIncrementKillCountResponse::default_instance_,
      CMsgGCIncrementKillCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCIncrementKillCountResponse));
  CMsgGCRemoveStrangePart_descriptor_ = file->message_type(61);
  static const int CMsgGCRemoveStrangePart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveStrangePart, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveStrangePart, strange_part_score_type_),
  };
  CMsgGCRemoveStrangePart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRemoveStrangePart_descriptor_,
      CMsgGCRemoveStrangePart::default_instance_,
      CMsgGCRemoveStrangePart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveStrangePart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveStrangePart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRemoveStrangePart));
  CMsgGCRemoveUpgradeCard_descriptor_ = file->message_type(62);
  static const int CMsgGCRemoveUpgradeCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveUpgradeCard, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveUpgradeCard, attribute_index_),
  };
  CMsgGCRemoveUpgradeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRemoveUpgradeCard_descriptor_,
      CMsgGCRemoveUpgradeCard::default_instance_,
      CMsgGCRemoveUpgradeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveUpgradeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveUpgradeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRemoveUpgradeCard));
  CMsgGCRemoveCustomizationAttributeSimple_descriptor_ = file->message_type(63);
  static const int CMsgGCRemoveCustomizationAttributeSimple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveCustomizationAttributeSimple, item_id_),
  };
  CMsgGCRemoveCustomizationAttributeSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCRemoveCustomizationAttributeSimple_descriptor_,
      CMsgGCRemoveCustomizationAttributeSimple::default_instance_,
      CMsgGCRemoveCustomizationAttributeSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveCustomizationAttributeSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRemoveCustomizationAttributeSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCRemoveCustomizationAttributeSimple));
  CMsgGCResetStrangeScores_descriptor_ = file->message_type(64);
  static const int CMsgGCResetStrangeScores_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCResetStrangeScores, item_id_),
  };
  CMsgGCResetStrangeScores_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCResetStrangeScores_descriptor_,
      CMsgGCResetStrangeScores::default_instance_,
      CMsgGCResetStrangeScores_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCResetStrangeScores, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCResetStrangeScores, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCResetStrangeScores));
  CMsgGCItemPreviewItemBoughtNotification_descriptor_ = file->message_type(65);
  static const int CMsgGCItemPreviewItemBoughtNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCItemPreviewItemBoughtNotification, item_def_index_),
  };
  CMsgGCItemPreviewItemBoughtNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCItemPreviewItemBoughtNotification_descriptor_,
      CMsgGCItemPreviewItemBoughtNotification::default_instance_,
      CMsgGCItemPreviewItemBoughtNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCItemPreviewItemBoughtNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCItemPreviewItemBoughtNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCItemPreviewItemBoughtNotification));
  CMsgGCStorePurchaseCancel_descriptor_ = file->message_type(66);
  static const int CMsgGCStorePurchaseCancel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancel, txn_id_),
  };
  CMsgGCStorePurchaseCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCStorePurchaseCancel_descriptor_,
      CMsgGCStorePurchaseCancel::default_instance_,
      CMsgGCStorePurchaseCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCStorePurchaseCancel));
  CMsgGCStorePurchaseCancelResponse_descriptor_ = file->message_type(67);
  static const int CMsgGCStorePurchaseCancelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancelResponse, result_),
  };
  CMsgGCStorePurchaseCancelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCStorePurchaseCancelResponse_descriptor_,
      CMsgGCStorePurchaseCancelResponse::default_instance_,
      CMsgGCStorePurchaseCancelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseCancelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCStorePurchaseCancelResponse));
  CMsgGCStorePurchaseFinalize_descriptor_ = file->message_type(68);
  static const int CMsgGCStorePurchaseFinalize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalize, txn_id_),
  };
  CMsgGCStorePurchaseFinalize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCStorePurchaseFinalize_descriptor_,
      CMsgGCStorePurchaseFinalize::default_instance_,
      CMsgGCStorePurchaseFinalize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCStorePurchaseFinalize));
  CMsgGCStorePurchaseFinalizeResponse_descriptor_ = file->message_type(69);
  static const int CMsgGCStorePurchaseFinalizeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, item_ids_),
  };
  CMsgGCStorePurchaseFinalizeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCStorePurchaseFinalizeResponse_descriptor_,
      CMsgGCStorePurchaseFinalizeResponse::default_instance_,
      CMsgGCStorePurchaseFinalizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCStorePurchaseFinalizeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCStorePurchaseFinalizeResponse));
  CMsgGCBannedWordListRequest_descriptor_ = file->message_type(70);
  static const int CMsgGCBannedWordListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, ban_list_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, word_id_),
  };
  CMsgGCBannedWordListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCBannedWordListRequest_descriptor_,
      CMsgGCBannedWordListRequest::default_instance_,
      CMsgGCBannedWordListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCBannedWordListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCBannedWordListRequest));
  CMsgGCGiftedItems_descriptor_ = file->message_type(71);
  static const int CMsgGCGiftedItems_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, gifter_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, was_random_person_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, recipient_account_ids_),
  };
  CMsgGCGiftedItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCGiftedItems_descriptor_,
      CMsgGCGiftedItems::default_instance_,
      CMsgGCGiftedItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGiftedItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCGiftedItems));
  CMsgGCCollectItem_descriptor_ = file->message_type(72);
  static const int CMsgGCCollectItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, collection_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, subject_item_id_),
  };
  CMsgGCCollectItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCCollectItem_descriptor_,
      CMsgGCCollectItem::default_instance_,
      CMsgGCCollectItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCollectItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCCollectItem));
  CMsgGCClientMarketDataRequest_descriptor_ = file->message_type(73);
  static const int CMsgGCClientMarketDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataRequest, user_currency_),
  };
  CMsgGCClientMarketDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCClientMarketDataRequest_descriptor_,
      CMsgGCClientMarketDataRequest::default_instance_,
      CMsgGCClientMarketDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCClientMarketDataRequest));
  CMsgGCClientMarketDataEntry_descriptor_ = file->message_type(74);
  static const int CMsgGCClientMarketDataEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, item_def_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, item_sell_listings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, price_in_local_currency_),
  };
  CMsgGCClientMarketDataEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCClientMarketDataEntry_descriptor_,
      CMsgGCClientMarketDataEntry::default_instance_,
      CMsgGCClientMarketDataEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketDataEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCClientMarketDataEntry));
  CMsgGCClientMarketData_descriptor_ = file->message_type(75);
  static const int CMsgGCClientMarketData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketData, entries_),
  };
  CMsgGCClientMarketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCClientMarketData_descriptor_,
      CMsgGCClientMarketData::default_instance_,
      CMsgGCClientMarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientMarketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCClientMarketData));
  CMsgApplyToolToItem_descriptor_ = file->message_type(76);
  static const int CMsgApplyToolToItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToItem, tool_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToItem, subject_item_id_),
  };
  CMsgApplyToolToItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyToolToItem_descriptor_,
      CMsgApplyToolToItem::default_instance_,
      CMsgApplyToolToItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyToolToItem));
  CMsgApplyToolToBaseItem_descriptor_ = file->message_type(77);
  static const int CMsgApplyToolToBaseItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToBaseItem, tool_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToBaseItem, baseitem_def_index_),
  };
  CMsgApplyToolToBaseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyToolToBaseItem_descriptor_,
      CMsgApplyToolToBaseItem::default_instance_,
      CMsgApplyToolToBaseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToBaseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyToolToBaseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyToolToBaseItem));
  CMsgRecipeComponent_descriptor_ = file->message_type(78);
  static const int CMsgRecipeComponent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, subject_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, attribute_index_),
  };
  CMsgRecipeComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRecipeComponent_descriptor_,
      CMsgRecipeComponent::default_instance_,
      CMsgRecipeComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRecipeComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRecipeComponent));
  CMsgFulfillDynamicRecipeComponent_descriptor_ = file->message_type(79);
  static const int CMsgFulfillDynamicRecipeComponent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, tool_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, consumption_components_),
  };
  CMsgFulfillDynamicRecipeComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFulfillDynamicRecipeComponent_descriptor_,
      CMsgFulfillDynamicRecipeComponent::default_instance_,
      CMsgFulfillDynamicRecipeComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFulfillDynamicRecipeComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFulfillDynamicRecipeComponent));
  CMsgSetItemEffectVerticalOffset_descriptor_ = file->message_type(80);
  static const int CMsgSetItemEffectVerticalOffset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemEffectVerticalOffset, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemEffectVerticalOffset, offset_),
  };
  CMsgSetItemEffectVerticalOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetItemEffectVerticalOffset_descriptor_,
      CMsgSetItemEffectVerticalOffset::default_instance_,
      CMsgSetItemEffectVerticalOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemEffectVerticalOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetItemEffectVerticalOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetItemEffectVerticalOffset));
  CMsgSetHatEffectUseHeadOrigin_descriptor_ = file->message_type(81);
  static const int CMsgSetHatEffectUseHeadOrigin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHatEffectUseHeadOrigin, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHatEffectUseHeadOrigin, use_head_),
  };
  CMsgSetHatEffectUseHeadOrigin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetHatEffectUseHeadOrigin_descriptor_,
      CMsgSetHatEffectUseHeadOrigin::default_instance_,
      CMsgSetHatEffectUseHeadOrigin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHatEffectUseHeadOrigin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetHatEffectUseHeadOrigin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetHatEffectUseHeadOrigin));
  CMsgDeliverGiftResponseGiver_descriptor_ = file->message_type(82);
  static const int CMsgDeliverGiftResponseGiver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeliverGiftResponseGiver, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeliverGiftResponseGiver, receiver_account_name_),
  };
  CMsgDeliverGiftResponseGiver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDeliverGiftResponseGiver_descriptor_,
      CMsgDeliverGiftResponseGiver::default_instance_,
      CMsgDeliverGiftResponseGiver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeliverGiftResponseGiver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeliverGiftResponseGiver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDeliverGiftResponseGiver));
  CSOEconGameAccountForGameServers_descriptor_ = file->message_type(83);
  static const int CSOEconGameAccountForGameServers_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountForGameServers, skill_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountForGameServers, skill_rating_6v6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountForGameServers, skill_rating_9v9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountForGameServers, skill_rating_12v12_),
  };
  CSOEconGameAccountForGameServers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOEconGameAccountForGameServers_descriptor_,
      CSOEconGameAccountForGameServers::default_instance_,
      CSOEconGameAccountForGameServers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountForGameServers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOEconGameAccountForGameServers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOEconGameAccountForGameServers));
  CWorkshop_PopulateItemDescriptions_Request_descriptor_ = file->message_type(84);
  static const int CWorkshop_PopulateItemDescriptions_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, languages_),
  };
  CWorkshop_PopulateItemDescriptions_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_PopulateItemDescriptions_Request));
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_ = CWorkshop_PopulateItemDescriptions_Request_descriptor_->nested_type(0);
  static const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, gameitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, item_description_),
  };
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription));
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_ = CWorkshop_PopulateItemDescriptions_Request_descriptor_->nested_type(1);
  static const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, descriptions_),
  };
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock));
  CWorkshop_GetContributors_Request_descriptor_ = file->message_type(85);
  static const int CWorkshop_GetContributors_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, gameitemid_),
  };
  CWorkshop_GetContributors_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_GetContributors_Request_descriptor_,
      CWorkshop_GetContributors_Request::default_instance_,
      CWorkshop_GetContributors_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_GetContributors_Request));
  CWorkshop_GetContributors_Response_descriptor_ = file->message_type(86);
  static const int CWorkshop_GetContributors_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, contributors_),
  };
  CWorkshop_GetContributors_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_GetContributors_Response_descriptor_,
      CWorkshop_GetContributors_Response::default_instance_,
      CWorkshop_GetContributors_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_GetContributors_Response));
  CWorkshop_SetItemPaymentRules_Request_descriptor_ = file->message_type(87);
  static const int CWorkshop_SetItemPaymentRules_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, gameitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, associated_workshop_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, partner_accounts_),
  };
  CWorkshop_SetItemPaymentRules_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_descriptor_,
      CWorkshop_SetItemPaymentRules_Request::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Request));
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_ = CWorkshop_SetItemPaymentRules_Request_descriptor_->nested_type(0);
  static const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, workshop_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, revenue_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, rule_description_),
  };
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_,
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule));
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_ = CWorkshop_SetItemPaymentRules_Request_descriptor_->nested_type(1);
  static const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, revenue_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, rule_description_),
  };
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_,
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule));
  CWorkshop_SetItemPaymentRules_Response_descriptor_ = file->message_type(88);
  static const int CWorkshop_SetItemPaymentRules_Response_offsets_[1] = {
  };
  CWorkshop_SetItemPaymentRules_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Response_descriptor_,
      CWorkshop_SetItemPaymentRules_Response::default_instance_,
      CWorkshop_SetItemPaymentRules_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWorkshop_SetItemPaymentRules_Response));
  EGCBaseMsg_descriptor_ = file->enum_type(0);
  EGCBaseProtoObjectTypes_descriptor_ = file->enum_type(1);
  GCGoodbyeReason_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCStorePurchaseInit_LineItem_descriptor_, &CGCStorePurchaseInit_LineItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCStorePurchaseInit_descriptor_, &CMsgGCStorePurchaseInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCStorePurchaseInitResponse_descriptor_, &CMsgGCStorePurchaseInitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOPartyInvite_descriptor_, &CSOPartyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOLobbyInvite_descriptor_, &CSOLobbyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSystemBroadcast_descriptor_, &CMsgSystemBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientHello_descriptor_, &CMsgClientHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerHello_descriptor_, &CMsgServerHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientWelcome_descriptor_, &CMsgClientWelcome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerWelcome_descriptor_, &CMsgServerWelcome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGoodbye_descriptor_, &CMsgClientGoodbye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerGoodbye_descriptor_, &CMsgServerGoodbye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgInviteToParty_descriptor_, &CMsgInviteToParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgInvitationCreated_descriptor_, &CMsgInvitationCreated::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyInviteResponse_descriptor_, &CMsgPartyInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKickFromParty_descriptor_, &CMsgKickFromParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLeaveParty_descriptor_, &CMsgLeaveParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgServerAvailable_descriptor_, &CMsgServerAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLANServerAvailable_descriptor_, &CMsgLANServerAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconGameAccountClient_descriptor_, &CSOEconGameAccountClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemCriteriaCondition_descriptor_, &CSOItemCriteriaCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemCriteria_descriptor_, &CSOItemCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOItemRecipe_descriptor_, &CSOItemRecipe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDevNewItemRequest_descriptor_, &CMsgDevNewItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDevDebugRollLootRequest_descriptor_, &CMsgDevDebugRollLootRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgIncrementKillCountAttribute_descriptor_, &CMsgIncrementKillCountAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgIncrementKillCountAttribute_Multiple_descriptor_, &CMsgIncrementKillCountAttribute_Multiple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTrackUniquePlayerPairEvent_descriptor_, &CMsgTrackUniquePlayerPairEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyStrangeCountTransfer_descriptor_, &CMsgApplyStrangeCountTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyStrangePart_descriptor_, &CMsgApplyStrangePart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyStrangeRestriction_descriptor_, &CMsgApplyStrangeRestriction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyUpgradeCard_descriptor_, &CMsgApplyUpgradeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItemAttribute_descriptor_, &CSOEconItemAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItemEquipped_descriptor_, &CSOEconItemEquipped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItem_descriptor_, &CSOEconItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAdjustItemEquippedState_descriptor_, &CMsgAdjustItemEquippedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSortItems_descriptor_, &CMsgSortItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconClaimCode_descriptor_, &CSOEconClaimCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStoreGetUserData_descriptor_, &CMsgStoreGetUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStoreGetUserDataResponse_descriptor_, &CMsgStoreGetUserDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdateItemSchema_descriptor_, &CMsgUpdateItemSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCError_descriptor_, &CMsgGCError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestInventoryRefresh_descriptor_, &CMsgRequestInventoryRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConVarValue_descriptor_, &CMsgConVarValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplicateConVars_descriptor_, &CMsgReplicateConVars::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUseItem_descriptor_, &CMsgUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReplayUploadedToYouTube_descriptor_, &CMsgReplayUploadedToYouTube::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgConsumableExhausted_descriptor_, &CMsgConsumableExhausted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgItemAcknowledged_descriptor_, &CMsgItemAcknowledged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetPresetItemPosition_descriptor_, &CMsgSetPresetItemPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetItemPositions_descriptor_, &CMsgSetItemPositions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetItemPositions_ItemPosition_descriptor_, &CMsgSetItemPositions_ItemPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconItemPresetInstance_descriptor_, &CSOEconItemPresetInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSelectPresetForClass_descriptor_, &CMsgSelectPresetForClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOClassPresetClientData_descriptor_, &CSOClassPresetClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCReportAbuse_descriptor_, &CMsgGCReportAbuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCReportAbuseResponse_descriptor_, &CMsgGCReportAbuseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCNameItemNotification_descriptor_, &CMsgGCNameItemNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCClientDisplayNotification_descriptor_, &CMsgGCClientDisplayNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCShowItemsPickedUp_descriptor_, &CMsgGCShowItemsPickedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUpdatePeriodicEvent_descriptor_, &CMsgUpdatePeriodicEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCIncrementKillCountResponse_descriptor_, &CMsgGCIncrementKillCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRemoveStrangePart_descriptor_, &CMsgGCRemoveStrangePart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRemoveUpgradeCard_descriptor_, &CMsgGCRemoveUpgradeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCRemoveCustomizationAttributeSimple_descriptor_, &CMsgGCRemoveCustomizationAttributeSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCResetStrangeScores_descriptor_, &CMsgGCResetStrangeScores::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCItemPreviewItemBoughtNotification_descriptor_, &CMsgGCItemPreviewItemBoughtNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCStorePurchaseCancel_descriptor_, &CMsgGCStorePurchaseCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCStorePurchaseCancelResponse_descriptor_, &CMsgGCStorePurchaseCancelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCStorePurchaseFinalize_descriptor_, &CMsgGCStorePurchaseFinalize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCStorePurchaseFinalizeResponse_descriptor_, &CMsgGCStorePurchaseFinalizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCBannedWordListRequest_descriptor_, &CMsgGCBannedWordListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCGiftedItems_descriptor_, &CMsgGCGiftedItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCCollectItem_descriptor_, &CMsgGCCollectItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCClientMarketDataRequest_descriptor_, &CMsgGCClientMarketDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCClientMarketDataEntry_descriptor_, &CMsgGCClientMarketDataEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCClientMarketData_descriptor_, &CMsgGCClientMarketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyToolToItem_descriptor_, &CMsgApplyToolToItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyToolToBaseItem_descriptor_, &CMsgApplyToolToBaseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRecipeComponent_descriptor_, &CMsgRecipeComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFulfillDynamicRecipeComponent_descriptor_, &CMsgFulfillDynamicRecipeComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetItemEffectVerticalOffset_descriptor_, &CMsgSetItemEffectVerticalOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetHatEffectUseHeadOrigin_descriptor_, &CMsgSetHatEffectUseHeadOrigin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDeliverGiftResponseGiver_descriptor_, &CMsgDeliverGiftResponseGiver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOEconGameAccountForGameServers_descriptor_, &CSOEconGameAccountForGameServers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_PopulateItemDescriptions_Request_descriptor_, &CWorkshop_PopulateItemDescriptions_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_, &CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_, &CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_GetContributors_Request_descriptor_, &CWorkshop_GetContributors_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_GetContributors_Response_descriptor_, &CWorkshop_GetContributors_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Request_descriptor_, &CWorkshop_SetItemPaymentRules_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_, &CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_, &CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWorkshop_SetItemPaymentRules_Response_descriptor_, &CWorkshop_SetItemPaymentRules_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_5fgcmessages_2eproto() {
  delete CGCStorePurchaseInit_LineItem::default_instance_;
  delete CGCStorePurchaseInit_LineItem_reflection_;
  delete CMsgGCStorePurchaseInit::default_instance_;
  delete CMsgGCStorePurchaseInit_reflection_;
  delete CMsgGCStorePurchaseInitResponse::default_instance_;
  delete CMsgGCStorePurchaseInitResponse_reflection_;
  delete CSOPartyInvite::default_instance_;
  delete CSOPartyInvite_reflection_;
  delete CSOLobbyInvite::default_instance_;
  delete CSOLobbyInvite_reflection_;
  delete CMsgSystemBroadcast::default_instance_;
  delete CMsgSystemBroadcast_reflection_;
  delete CMsgClientHello::default_instance_;
  delete CMsgClientHello_reflection_;
  delete CMsgServerHello::default_instance_;
  delete CMsgServerHello_reflection_;
  delete CMsgClientWelcome::default_instance_;
  delete CMsgClientWelcome_reflection_;
  delete CMsgServerWelcome::default_instance_;
  delete CMsgServerWelcome_reflection_;
  delete CMsgClientGoodbye::default_instance_;
  delete CMsgClientGoodbye_reflection_;
  delete CMsgServerGoodbye::default_instance_;
  delete CMsgServerGoodbye_reflection_;
  delete CMsgInviteToParty::default_instance_;
  delete CMsgInviteToParty_reflection_;
  delete CMsgInvitationCreated::default_instance_;
  delete CMsgInvitationCreated_reflection_;
  delete CMsgPartyInviteResponse::default_instance_;
  delete CMsgPartyInviteResponse_reflection_;
  delete CMsgKickFromParty::default_instance_;
  delete CMsgKickFromParty_reflection_;
  delete CMsgLeaveParty::default_instance_;
  delete CMsgLeaveParty_reflection_;
  delete CMsgServerAvailable::default_instance_;
  delete CMsgServerAvailable_reflection_;
  delete CMsgLANServerAvailable::default_instance_;
  delete CMsgLANServerAvailable_reflection_;
  delete CSOEconGameAccountClient::default_instance_;
  delete CSOEconGameAccountClient_reflection_;
  delete CSOItemCriteriaCondition::default_instance_;
  delete CSOItemCriteriaCondition_reflection_;
  delete CSOItemCriteria::default_instance_;
  delete CSOItemCriteria_reflection_;
  delete CSOItemRecipe::default_instance_;
  delete CSOItemRecipe_reflection_;
  delete CMsgDevNewItemRequest::default_instance_;
  delete CMsgDevNewItemRequest_reflection_;
  delete CMsgDevDebugRollLootRequest::default_instance_;
  delete CMsgDevDebugRollLootRequest_reflection_;
  delete CMsgIncrementKillCountAttribute::default_instance_;
  delete CMsgIncrementKillCountAttribute_reflection_;
  delete CMsgIncrementKillCountAttribute_Multiple::default_instance_;
  delete CMsgIncrementKillCountAttribute_Multiple_reflection_;
  delete CMsgTrackUniquePlayerPairEvent::default_instance_;
  delete CMsgTrackUniquePlayerPairEvent_reflection_;
  delete CMsgApplyStrangeCountTransfer::default_instance_;
  delete CMsgApplyStrangeCountTransfer_reflection_;
  delete CMsgApplyStrangePart::default_instance_;
  delete CMsgApplyStrangePart_reflection_;
  delete CMsgApplyStrangeRestriction::default_instance_;
  delete CMsgApplyStrangeRestriction_reflection_;
  delete CMsgApplyUpgradeCard::default_instance_;
  delete CMsgApplyUpgradeCard_reflection_;
  delete CSOEconItemAttribute::default_instance_;
  delete CSOEconItemAttribute_reflection_;
  delete CSOEconItemEquipped::default_instance_;
  delete CSOEconItemEquipped_reflection_;
  delete CSOEconItem::default_instance_;
  delete CSOEconItem_reflection_;
  delete CMsgAdjustItemEquippedState::default_instance_;
  delete CMsgAdjustItemEquippedState_reflection_;
  delete CMsgSortItems::default_instance_;
  delete CMsgSortItems_reflection_;
  delete CSOEconClaimCode::default_instance_;
  delete CSOEconClaimCode_reflection_;
  delete CMsgStoreGetUserData::default_instance_;
  delete CMsgStoreGetUserData_reflection_;
  delete CMsgStoreGetUserDataResponse::default_instance_;
  delete CMsgStoreGetUserDataResponse_reflection_;
  delete CMsgUpdateItemSchema::default_instance_;
  delete CMsgUpdateItemSchema_reflection_;
  delete CMsgGCError::default_instance_;
  delete CMsgGCError_reflection_;
  delete CMsgRequestInventoryRefresh::default_instance_;
  delete CMsgRequestInventoryRefresh_reflection_;
  delete CMsgConVarValue::default_instance_;
  delete CMsgConVarValue_reflection_;
  delete CMsgReplicateConVars::default_instance_;
  delete CMsgReplicateConVars_reflection_;
  delete CMsgUseItem::default_instance_;
  delete CMsgUseItem_reflection_;
  delete CMsgReplayUploadedToYouTube::default_instance_;
  delete CMsgReplayUploadedToYouTube_reflection_;
  delete CMsgConsumableExhausted::default_instance_;
  delete CMsgConsumableExhausted_reflection_;
  delete CMsgItemAcknowledged::default_instance_;
  delete CMsgItemAcknowledged_reflection_;
  delete CMsgSetPresetItemPosition::default_instance_;
  delete CMsgSetPresetItemPosition_reflection_;
  delete CMsgSetItemPositions::default_instance_;
  delete CMsgSetItemPositions_reflection_;
  delete CMsgSetItemPositions_ItemPosition::default_instance_;
  delete CMsgSetItemPositions_ItemPosition_reflection_;
  delete CSOEconItemPresetInstance::default_instance_;
  delete CSOEconItemPresetInstance_reflection_;
  delete CMsgSelectPresetForClass::default_instance_;
  delete CMsgSelectPresetForClass_reflection_;
  delete CSOClassPresetClientData::default_instance_;
  delete CSOClassPresetClientData_reflection_;
  delete CMsgGCReportAbuse::default_instance_;
  delete CMsgGCReportAbuse_reflection_;
  delete CMsgGCReportAbuseResponse::default_instance_;
  delete CMsgGCReportAbuseResponse_reflection_;
  delete CMsgGCNameItemNotification::default_instance_;
  delete CMsgGCNameItemNotification_reflection_;
  delete CMsgGCClientDisplayNotification::default_instance_;
  delete CMsgGCClientDisplayNotification_reflection_;
  delete CMsgGCShowItemsPickedUp::default_instance_;
  delete CMsgGCShowItemsPickedUp_reflection_;
  delete CMsgUpdatePeriodicEvent::default_instance_;
  delete CMsgUpdatePeriodicEvent_reflection_;
  delete CMsgGCIncrementKillCountResponse::default_instance_;
  delete CMsgGCIncrementKillCountResponse_reflection_;
  delete CMsgGCRemoveStrangePart::default_instance_;
  delete CMsgGCRemoveStrangePart_reflection_;
  delete CMsgGCRemoveUpgradeCard::default_instance_;
  delete CMsgGCRemoveUpgradeCard_reflection_;
  delete CMsgGCRemoveCustomizationAttributeSimple::default_instance_;
  delete CMsgGCRemoveCustomizationAttributeSimple_reflection_;
  delete CMsgGCResetStrangeScores::default_instance_;
  delete CMsgGCResetStrangeScores_reflection_;
  delete CMsgGCItemPreviewItemBoughtNotification::default_instance_;
  delete CMsgGCItemPreviewItemBoughtNotification_reflection_;
  delete CMsgGCStorePurchaseCancel::default_instance_;
  delete CMsgGCStorePurchaseCancel_reflection_;
  delete CMsgGCStorePurchaseCancelResponse::default_instance_;
  delete CMsgGCStorePurchaseCancelResponse_reflection_;
  delete CMsgGCStorePurchaseFinalize::default_instance_;
  delete CMsgGCStorePurchaseFinalize_reflection_;
  delete CMsgGCStorePurchaseFinalizeResponse::default_instance_;
  delete CMsgGCStorePurchaseFinalizeResponse_reflection_;
  delete CMsgGCBannedWordListRequest::default_instance_;
  delete CMsgGCBannedWordListRequest_reflection_;
  delete CMsgGCGiftedItems::default_instance_;
  delete CMsgGCGiftedItems_reflection_;
  delete CMsgGCCollectItem::default_instance_;
  delete CMsgGCCollectItem_reflection_;
  delete CMsgGCClientMarketDataRequest::default_instance_;
  delete CMsgGCClientMarketDataRequest_reflection_;
  delete CMsgGCClientMarketDataEntry::default_instance_;
  delete CMsgGCClientMarketDataEntry_reflection_;
  delete CMsgGCClientMarketData::default_instance_;
  delete CMsgGCClientMarketData_reflection_;
  delete CMsgApplyToolToItem::default_instance_;
  delete CMsgApplyToolToItem_reflection_;
  delete CMsgApplyToolToBaseItem::default_instance_;
  delete CMsgApplyToolToBaseItem_reflection_;
  delete CMsgRecipeComponent::default_instance_;
  delete CMsgRecipeComponent_reflection_;
  delete CMsgFulfillDynamicRecipeComponent::default_instance_;
  delete CMsgFulfillDynamicRecipeComponent_reflection_;
  delete CMsgSetItemEffectVerticalOffset::default_instance_;
  delete CMsgSetItemEffectVerticalOffset_reflection_;
  delete CMsgSetHatEffectUseHeadOrigin::default_instance_;
  delete CMsgSetHatEffectUseHeadOrigin_reflection_;
  delete CMsgDeliverGiftResponseGiver::default_instance_;
  delete CMsgDeliverGiftResponseGiver_reflection_;
  delete CSOEconGameAccountForGameServers::default_instance_;
  delete CSOEconGameAccountForGameServers_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_;
  delete CWorkshop_GetContributors_Request::default_instance_;
  delete CWorkshop_GetContributors_Request_reflection_;
  delete CWorkshop_GetContributors_Response::default_instance_;
  delete CWorkshop_GetContributors_Response_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_;
  delete CWorkshop_SetItemPaymentRules_Response::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Response_reflection_;
}

void protobuf_AddDesc_base_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025base_gcmessages.proto\032\023steammessages.p"
    "roto\"}\n\035CGCStorePurchaseInit_LineItem\022\023\n"
    "\013item_def_id\030\001 \001(\r\022\020\n\010quantity\030\002 \001(\r\022\036\n\026"
    "cost_in_local_currency\030\003 \001(\r\022\025\n\rpurchase"
    "_type\030\004 \001(\r\"\202\001\n\027CMsgGCStorePurchaseInit\022"
    "\017\n\007country\030\001 \001(\t\022\020\n\010language\030\002 \001(\005\022\020\n\010cu"
    "rrency\030\003 \001(\005\0222\n\nline_items\030\004 \003(\0132\036.CGCSt"
    "orePurchaseInit_LineItem\"A\n\037CMsgGCStoreP"
    "urchaseInitResponse\022\016\n\006result\030\001 \001(\005\022\016\n\006t"
    "xn_id\030\002 \001(\004\"P\n\016CSOPartyInvite\022\026\n\010group_i"
    "d\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013send"
    "er_name\030\003 \001(\t\"P\n\016CSOLobbyInvite\022\026\n\010group"
    "_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013se"
    "nder_name\030\003 \001(\t\"&\n\023CMsgSystemBroadcast\022\017"
    "\n\007message\030\001 \001(\t\"\"\n\017CMsgClientHello\022\017\n\007ve"
    "rsion\030\001 \001(\r\"\"\n\017CMsgServerHello\022\017\n\007versio"
    "n\030\001 \001(\r\"7\n\021CMsgClientWelcome\022\017\n\007version\030"
    "\001 \001(\r\022\021\n\tgame_data\030\002 \001(\014\"H\n\021CMsgServerWe"
    "lcome\022\033\n\023min_allowed_version\030\001 \001(\r\022\026\n\016ac"
    "tive_version\030\002 \001(\r\"T\n\021CMsgClientGoodbye\022"
    "?\n\006reason\030\001 \001(\0162\020.GCGoodbyeReason:\035GCGoo"
    "dbyeReason_GC_GOING_DOWN\"T\n\021CMsgServerGo"
    "odbye\022?\n\006reason\030\001 \001(\0162\020.GCGoodbyeReason:"
    "\035GCGoodbyeReason_GC_GOING_DOWN\"`\n\021CMsgIn"
    "viteToParty\022\020\n\010steam_id\030\001 \001(\006\022\026\n\016client_"
    "version\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\022\020\n\010as_coa"
    "ch\030\004 \001(\010\";\n\025CMsgInvitationCreated\022\020\n\010gro"
    "up_id\030\001 \001(\004\022\020\n\010steam_id\030\002 \001(\006\"v\n\027CMsgPar"
    "tyInviteResponse\022\020\n\010party_id\030\001 \001(\004\022\016\n\006ac"
    "cept\030\002 \001(\010\022\026\n\016client_version\030\003 \001(\r\022\017\n\007te"
    "am_id\030\004 \001(\r\022\020\n\010as_coach\030\005 \001(\010\"%\n\021CMsgKic"
    "kFromParty\022\020\n\010steam_id\030\001 \001(\006\"\020\n\016CMsgLeav"
    "eParty\"\025\n\023CMsgServerAvailable\"*\n\026CMsgLAN"
    "ServerAvailable\022\020\n\010lobby_id\030\001 \001(\006\"\233\006\n\030CS"
    "OEconGameAccountClient\022$\n\031additional_bac"
    "kpack_slots\030\001 \001(\r:\0010\022\034\n\rtrial_account\030\002 "
    "\001(\010:\005false\022*\n\"need_to_choose_most_helpfu"
    "l_friend\030\004 \001(\010\022\027\n\017in_coaches_list\030\005 \001(\010\022"
    "\034\n\024trade_ban_expiration\030\006 \001(\007\022\033\n\023duel_ba"
    "n_expiration\030\007 \001(\007\022\033\n\020preview_item_def\030\010"
    " \001(\r:\0010\022\035\n\016phone_verified\030\023 \001(\010:\005false\022\030"
    "\n\020skill_rating_6v6\030\024 \001(\r\022\030\n\020skill_rating"
    "_9v9\030\025 \001(\r\022!\n\022competitive_access\030\027 \001(\010:\005"
    "false\022)\n!matchmaking_ranked_ban_expirati"
    "on\030\022 \001(\r\0222\n*matchmaking_ranked_low_prior"
    "ity_expiration\030\030 \001(\r\022,\n$matchmaking_rank"
    "ed_ban_last_duration\030\031 \001(\r\0225\n-matchmakin"
    "g_ranked_low_priority_last_duration\030\032 \001("
    "\r\022)\n!matchmaking_casual_ban_expiration\030\033"
    " \001(\r\0222\n*matchmaking_casual_low_priority_"
    "expiration\030\034 \001(\r\022,\n$matchmaking_casual_b"
    "an_last_duration\030\035 \001(\r\0225\n-matchmaking_ca"
    "sual_low_priority_last_duration\030\036 \001(\r\022 \n"
    "\021phone_identifying\030\037 \001(\010:\005false\"r\n\030CSOIt"
    "emCriteriaCondition\022\n\n\002op\030\001 \001(\005\022\r\n\005field"
    "\030\002 \001(\t\022\020\n\010required\030\003 \001(\010\022\023\n\013float_value\030"
    "\004 \001(\002\022\024\n\014string_value\030\005 \001(\t\"\221\002\n\017CSOItemC"
    "riteria\022\022\n\nitem_level\030\001 \001(\r\022\024\n\014item_qual"
    "ity\030\002 \001(\005\022\026\n\016item_level_set\030\003 \001(\010\022\030\n\020ite"
    "m_quality_set\030\004 \001(\010\022\031\n\021initial_inventory"
    "\030\005 \001(\r\022\030\n\020initial_quantity\030\006 \001(\r\022\033\n\023igno"
    "re_enabled_flag\030\010 \001(\010\022-\n\nconditions\030\t \003("
    "\0132\031.CSOItemCriteriaCondition\022\023\n\013recent_o"
    "nly\030\n \001(\010\022\014\n\004tags\030\013 \001(\t\"\325\003\n\rCSOItemRecip"
    "e\022\021\n\tdef_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003n_"
    "a\030\003 \001(\t\022\023\n\013desc_inputs\030\004 \001(\t\022\024\n\014desc_out"
    "puts\030\005 \001(\t\022\014\n\004di_a\030\006 \001(\t\022\014\n\004di_b\030\007 \001(\t\022\014"
    "\n\004di_c\030\010 \001(\t\022\014\n\004do_a\030\t \001(\t\022\014\n\004do_b\030\n \001(\t"
    "\022\014\n\004do_c\030\013 \001(\t\022\037\n\027requires_all_same_clas"
    "s\030\014 \001(\010\022\036\n\026requires_all_same_slot\030\r \001(\010\022"
    "\036\n\026class_usage_for_output\030\016 \001(\005\022\035\n\025slot_"
    "usage_for_output\030\017 \001(\005\022\026\n\016set_for_output"
    "\030\020 \001(\005\022.\n\024input_items_criteria\030\024 \003(\0132\020.C"
    "SOItemCriteria\022/\n\025output_items_criteria\030"
    "\025 \003(\0132\020.CSOItemCriteria\022\036\n\026input_item_du"
    "pe_counts\030\026 \003(\r\"M\n\025CMsgDevNewItemRequest"
    "\022\020\n\010receiver\030\001 \001(\006\022\"\n\010criteria\030\002 \001(\0132\020.C"
    "SOItemCriteria\"G\n\033CMsgDevDebugRollLootRe"
    "quest\022\020\n\010receiver\030\001 \001(\006\022\026\n\016loot_list_nam"
    "e\030\002 \001(\t\"\221\001\n\037CMsgIncrementKillCountAttrib"
    "ute\022\027\n\017killer_steam_id\030\001 \001(\004\022\027\n\017victim_s"
    "team_id\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\004\022\022\n\nevent_"
    "type\030\004 \001(\r\022\027\n\017increment_value\030\005 \001(\r\"Z\n(C"
    "MsgIncrementKillCountAttribute_Multiple\022"
    ".\n\004msgs\030\001 \003(\0132 .CMsgIncrementKillCountAt"
    "tribute\"w\n\036CMsgTrackUniquePlayerPairEven"
    "t\022\027\n\017killer_steam_id\030\001 \001(\004\022\027\n\017victim_ste"
    "am_id\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\004\022\022\n\nevent_ty"
    "pe\030\004 \001(\r\"j\n\035CMsgApplyStrangeCountTransfe"
    "r\022\024\n\014tool_item_id\030\001 \001(\004\022\030\n\020item_src_item"
    "_id\030\002 \001(\004\022\031\n\021item_dest_item_id\030\003 \001(\004\"J\n\024"
    "CMsgApplyStrangePart\022\034\n\024strange_part_ite"
    "m_id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"m\n\033CMsg"
    "ApplyStrangeRestriction\022\034\n\024strange_part_"
    "item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\022\032\n\022s"
    "trange_attr_index\030\003 \001(\r\"M\n\024CMsgApplyUpgr"
    "adeCard\022\034\n\024upgrade_card_item_id\030\001 \001(\004\022\027\n"
    "\017subject_item_id\030\002 \001(\004\"M\n\024CSOEconItemAtt"
    "ribute\022\021\n\tdef_index\030\001 \001(\r\022\r\n\005value\030\002 \001(\r"
    "\022\023\n\013value_bytes\030\003 \001(\014\":\n\023CSOEconItemEqui"
    "pped\022\021\n\tnew_class\030\001 \001(\r\022\020\n\010new_slot\030\002 \001("
    "\r\"\324\003\n\013CSOEconItem\022\n\n\002id\030\001 \001(\004\022\022\n\naccount"
    "_id\030\002 \001(\r\022\021\n\tinventory\030\003 \001(\r\022\021\n\tdef_inde"
    "x\030\004 \001(\r\022\020\n\010quantity\030\005 \001(\r\022\r\n\005level\030\006 \001(\r"
    "\022\017\n\007quality\030\007 \001(\r\022\020\n\005flags\030\010 \001(\r:\0010\022\016\n\006o"
    "rigin\030\t \001(\r\022\023\n\013custom_name\030\n \001(\t\022\023\n\013cust"
    "om_desc\030\013 \001(\t\022(\n\tattribute\030\014 \003(\0132\025.CSOEc"
    "onItemAttribute\022#\n\rinterior_item\030\r \001(\0132\014"
    ".CSOEconItem\022\025\n\006in_use\030\016 \001(\010:\005false\022\020\n\005s"
    "tyle\030\017 \001(\r:\0010\022\026\n\013original_id\030\020 \001(\004:\0010\022\037\n"
    "\027contains_equipped_state\030\021 \001(\010\022,\n\016equipp"
    "ed_state\030\022 \003(\0132\024.CSOEconItemEquipped\022\"\n\032"
    "contains_equipped_state_v2\030\023 \001(\010\"S\n\033CMsg"
    "AdjustItemEquippedState\022\017\n\007item_id\030\001 \001(\004"
    "\022\021\n\tnew_class\030\002 \001(\r\022\020\n\010new_slot\030\003 \001(\r\"\"\n"
    "\rCMsgSortItems\022\021\n\tsort_type\030\001 \001(\r\"^\n\020CSO"
    "EconClaimCode\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tcod"
    "e_type\030\002 \001(\r\022\025\n\rtime_acquired\030\003 \001(\r\022\014\n\004c"
    "ode\030\004 \001(\t\"3\n\024CMsgStoreGetUserData\022\033\n\023pri"
    "ce_sheet_version\030\001 \001(\007\"\224\002\n\034CMsgStoreGetU"
    "serDataResponse\022\016\n\006result\030\001 \001(\005\022\020\n\010curre"
    "ncy\030\002 \001(\005\022\017\n\007country\030\003 \001(\t\022\033\n\023price_shee"
    "t_version\030\004 \001(\007\022\032\n\017experiment_data\030\005 \001(\004"
    ":\0010\022\031\n\021featured_item_idx\030\006 \001(\005\022#\n\025show_h"
    "at_descriptions\030\007 \001(\010:\004true\022\023\n\013price_she"
    "et\030\010 \001(\014\022\034\n\021default_item_sort\030\t \001(\005:\0010\022\025"
    "\n\rpopular_items\030\n \003(\r\"r\n\024CMsgUpdateItemS"
    "chema\022\022\n\nitems_game\030\001 \001(\014\022\033\n\023item_schema"
    "_version\030\002 \001(\007\022\026\n\016items_game_url\030\003 \001(\t\022\021"
    "\n\tsignature\030\004 \001(\014\"!\n\013CMsgGCError\022\022\n\nerro"
    "r_text\030\001 \001(\t\"\035\n\033CMsgRequestInventoryRefr"
    "esh\".\n\017CMsgConVarValue\022\014\n\004name\030\001 \001(\t\022\r\n\005"
    "value\030\002 \001(\t\"9\n\024CMsgReplicateConVars\022!\n\007c"
    "onvars\030\001 \003(\0132\020.CMsgConVarValue\"\261\001\n\013CMsgU"
    "seItem\022\017\n\007item_id\030\001 \001(\004\022\027\n\017target_steam_"
    "id\030\002 \001(\006\022\037\n\027gift__potential_targets\030\003 \003("
    "\r\022\030\n\020duel__class_lock\030\004 \001(\r\022\032\n\022initiator"
    "_steam_id\030\005 \001(\006\022!\n\031itempack__ack_immedia"
    "tely\030\006 \001(\010\"d\n\033CMsgReplayUploadedToYouTub"
    "e\022\023\n\013youtube_url\030\001 \001(\t\022\034\n\024youtube_accoun"
    "t_name\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\004\".\n\027CMsg"
    "ConsumableExhausted\022\023\n\013item_def_id\030\001 \001(\005"
    "\"\267\001\n\024CMsgItemAcknowledged\022\022\n\naccount_id\030"
    "\001 \001(\r\022\021\n\tinventory\030\002 \001(\r\022\021\n\tdef_index\030\003 "
    "\001(\r\022\017\n\007quality\030\004 \001(\r\022\016\n\006rarity\030\005 \001(\r\022\016\n\006"
    "origin\030\006 \001(\r\022\022\n\nis_strange\030\007 \001(\r\022\022\n\nis_u"
    "nusual\030\010 \001(\r\022\014\n\004wear\030\t \001(\002\"b\n\031CMsgSetPre"
    "setItemPosition\022\020\n\010class_id\030\001 \001(\r\022\021\n\tpre"
    "set_id\030\002 \001(\r\022\017\n\007slot_id\030\003 \001(\r\022\017\n\007item_id"
    "\030\004 \001(\004\"\205\001\n\024CMsgSetItemPositions\022:\n\016item_"
    "positions\030\001 \003(\0132\".CMsgSetItemPositions.I"
    "temPosition\0321\n\014ItemPosition\022\017\n\007item_id\030\001"
    " \001(\004\022\020\n\010position\030\002 \001(\r\"t\n\031CSOEconItemPre"
    "setInstance\022\026\n\010class_id\030\002 \001(\rB\004\200\246\035\001\022\027\n\tp"
    "reset_id\030\003 \001(\rB\004\200\246\035\001\022\025\n\007slot_id\030\004 \001(\rB\004\200"
    "\246\035\001\022\017\n\007item_id\030\005 \001(\004\"?\n\030CMsgSelectPreset"
    "ForClass\022\020\n\010class_id\030\001 \001(\r\022\021\n\tpreset_id\030"
    "\002 \001(\r\"Z\n\030CSOClassPresetClientData\022\022\n\nacc"
    "ount_id\030\001 \001(\r\022\020\n\010class_id\030\002 \001(\r\022\030\n\020activ"
    "e_preset_id\030\003 \001(\r\"\270\001\n\021CMsgGCReportAbuse\022"
    "\027\n\017target_steam_id\030\001 \001(\006\022\023\n\013description\030"
    "\004 \001(\t\022\013\n\003gid\030\005 \001(\004\022\022\n\nabuse_type\030\002 \001(\r\022\024"
    "\n\014content_type\030\003 \001(\r\022\035\n\025target_game_serv"
    "er_ip\030\006 \001(\007\022\037\n\027target_game_server_port\030\007"
    " \001(\r\"[\n\031CMsgGCReportAbuseResponse\022\027\n\017tar"
    "get_steam_id\030\001 \001(\006\022\016\n\006result\030\002 \001(\r\022\025\n\rer"
    "ror_message\030\003 \001(\t\"f\n\032CMsgGCNameItemNotif"
    "ication\022\026\n\016player_steamid\030\001 \001(\006\022\026\n\016item_"
    "def_index\030\002 \001(\r\022\030\n\020item_name_custom\030\003 \001("
    "\t\"\266\001\n\037CMsgGCClientDisplayNotification\022+\n"
    "#notification_title_localization_key\030\001 \001"
    "(\t\022*\n\"notification_body_localization_key"
    "\030\002 \001(\t\022\033\n\023body_substring_keys\030\003 \003(\t\022\035\n\025b"
    "ody_substring_values\030\004 \003(\t\"1\n\027CMsgGCShow"
    "ItemsPickedUp\022\026\n\016player_steamid\030\001 \001(\006\"Q\n"
    "\027CMsgUpdatePeriodicEvent\022\022\n\naccount_id\030\001"
    " \001(\r\022\022\n\nevent_type\030\002 \001(\r\022\016\n\006amount\030\003 \001(\r"
    "\"|\n CMsgGCIncrementKillCountResponse\022\037\n\021"
    "killer_account_id\030\001 \001(\rB\004\200\246\035\001\022\021\n\tnum_kil"
    "ls\030\002 \001(\r\022\020\n\010item_def\030\003 \001(\r\022\022\n\nlevel_type"
    "\030\004 \001(\r\"K\n\027CMsgGCRemoveStrangePart\022\017\n\007ite"
    "m_id\030\001 \001(\004\022\037\n\027strange_part_score_type\030\002 "
    "\001(\r\"C\n\027CMsgGCRemoveUpgradeCard\022\017\n\007item_i"
    "d\030\001 \001(\004\022\027\n\017attribute_index\030\002 \001(\r\";\n(CMsg"
    "GCRemoveCustomizationAttributeSimple\022\017\n\007"
    "item_id\030\001 \001(\004\"+\n\030CMsgGCResetStrangeScore"
    "s\022\017\n\007item_id\030\001 \001(\004\"A\n\'CMsgGCItemPreviewI"
    "temBoughtNotification\022\026\n\016item_def_index\030"
    "\001 \001(\r\"+\n\031CMsgGCStorePurchaseCancel\022\016\n\006tx"
    "n_id\030\001 \001(\004\"3\n!CMsgGCStorePurchaseCancelR"
    "esponse\022\016\n\006result\030\001 \001(\r\"-\n\033CMsgGCStorePu"
    "rchaseFinalize\022\016\n\006txn_id\030\001 \001(\004\"G\n#CMsgGC"
    "StorePurchaseFinalizeResponse\022\016\n\006result\030"
    "\001 \001(\r\022\020\n\010item_ids\030\002 \003(\004\"I\n\033CMsgGCBannedW"
    "ordListRequest\022\031\n\021ban_list_group_id\030\001 \001("
    "\r\022\017\n\007word_id\030\002 \001(\r\"f\n\021CMsgGCGiftedItems\022"
    "\027\n\017gifter_steam_id\030\001 \001(\004\022\031\n\021was_random_p"
    "erson\030\002 \001(\010\022\035\n\025recipient_account_ids\030\003 \003"
    "(\r\"H\n\021CMsgGCCollectItem\022\032\n\022collection_it"
    "em_id\030\001 \001(\004\022\027\n\017subject_item_id\030\002 \001(\004\"6\n\035"
    "CMsgGCClientMarketDataRequest\022\025\n\ruser_cu"
    "rrency\030\001 \001(\r\"\210\001\n\033CMsgGCClientMarketDataE"
    "ntry\022\026\n\016item_def_index\030\001 \001(\r\022\024\n\014item_qua"
    "lity\030\002 \001(\r\022\032\n\022item_sell_listings\030\003 \001(\r\022\037"
    "\n\027price_in_local_currency\030\004 \001(\r\"G\n\026CMsgG"
    "CClientMarketData\022-\n\007entries\030\001 \003(\0132\034.CMs"
    "gGCClientMarketDataEntry\"D\n\023CMsgApplyToo"
    "lToItem\022\024\n\014tool_item_id\030\001 \001(\004\022\027\n\017subject"
    "_item_id\030\002 \001(\004\"K\n\027CMsgApplyToolToBaseIte"
    "m\022\024\n\014tool_item_id\030\001 \001(\004\022\032\n\022baseitem_def_"
    "index\030\002 \001(\r\"G\n\023CMsgRecipeComponent\022\027\n\017su"
    "bject_item_id\030\001 \001(\004\022\027\n\017attribute_index\030\002"
    " \001(\004\"o\n!CMsgFulfillDynamicRecipeComponen"
    "t\022\024\n\014tool_item_id\030\001 \001(\004\0224\n\026consumption_c"
    "omponents\030\002 \003(\0132\024.CMsgRecipeComponent\"B\n"
    "\037CMsgSetItemEffectVerticalOffset\022\017\n\007item"
    "_id\030\001 \001(\004\022\016\n\006offset\030\002 \001(\002\"B\n\035CMsgSetHatE"
    "ffectUseHeadOrigin\022\017\n\007item_id\030\001 \001(\004\022\020\n\010u"
    "se_head\030\002 \001(\010\"T\n\034CMsgDeliverGiftResponse"
    "Giver\022\025\n\rresponse_code\030\001 \001(\r\022\035\n\025receiver"
    "_account_name\030\002 \001(\t\"\210\001\n CSOEconGameAccou"
    "ntForGameServers\022\024\n\014skill_rating\030\003 \001(\r\022\030"
    "\n\020skill_rating_6v6\030\002 \001(\r\022\030\n\020skill_rating"
    "_9v9\030\004 \001(\r\022\032\n\022skill_rating_12v12\030\005 \001(\r\"\355"
    "\002\n*CWorkshop_PopulateItemDescriptions_Re"
    "quest\022\r\n\005appid\030\001 \001(\r\022\\\n\tlanguages\030\002 \003(\0132"
    "I.CWorkshop_PopulateItemDescriptions_Req"
    "uest.ItemDescriptionsLanguageBlock\032E\n\025Si"
    "ngleItemDescription\022\022\n\ngameitemid\030\001 \001(\r\022"
    "\030\n\020item_description\030\002 \001(\t\032\212\001\n\035ItemDescri"
    "ptionsLanguageBlock\022\020\n\010language\030\001 \001(\t\022W\n"
    "\014descriptions\030\002 \003(\0132A.CWorkshop_Populate"
    "ItemDescriptions_Request.SingleItemDescr"
    "iption\"F\n!CWorkshop_GetContributors_Requ"
    "est\022\r\n\005appid\030\001 \001(\r\022\022\n\ngameitemid\030\002 \001(\r\":"
    "\n\"CWorkshop_GetContributors_Response\022\024\n\014"
    "contributors\030\001 \003(\006\"\325\003\n%CWorkshop_SetItem"
    "PaymentRules_Request\022\r\n\005appid\030\001 \001(\r\022\022\n\ng"
    "ameitemid\030\002 \001(\r\022a\n\031associated_workshop_f"
    "iles\030\003 \003(\0132>.CWorkshop_SetItemPaymentRul"
    "es_Request.WorkshopItemPaymentRule\022W\n\020pa"
    "rtner_accounts\030\004 \003(\0132=.CWorkshop_SetItem"
    "PaymentRules_Request.PartnerItemPaymentR"
    "ule\032i\n\027WorkshopItemPaymentRule\022\030\n\020worksh"
    "op_file_id\030\001 \001(\004\022\032\n\022revenue_percentage\030\002"
    " \001(\002\022\030\n\020rule_description\030\003 \001(\t\032b\n\026Partne"
    "rItemPaymentRule\022\022\n\naccount_id\030\001 \001(\r\022\032\n\022"
    "revenue_percentage\030\002 \001(\002\022\030\n\020rule_descrip"
    "tion\030\003 \001(\t\"(\n&CWorkshop_SetItemPaymentRu"
    "les_Response*\261\003\n\nEGCBaseMsg\022\032\n\025k_EMsgGCS"
    "ystemMessage\020\241\037\022\035\n\030k_EMsgGCReplicateConV"
    "ars\020\242\037\022\032\n\025k_EMsgGCConVarUpdated\020\243\037\022\032\n\025k_"
    "EMsgGCInviteToParty\020\225#\022\036\n\031k_EMsgGCInvita"
    "tionCreated\020\226#\022 \n\033k_EMsgGCPartyInviteRes"
    "ponse\020\227#\022\032\n\025k_EMsgGCKickFromParty\020\230#\022\027\n\022"
    "k_EMsgGCLeaveParty\020\231#\022\034\n\027k_EMsgGCServerA"
    "vailable\020\232#\022\"\n\035k_EMsgGCClientConnectToSe"
    "rver\020\233#\022\033\n\026k_EMsgGCGameServerInfo\020\234#\022\022\n\r"
    "k_EMsgGCError\020\235#\022%\n k_EMsgGCReplay_Uploa"
    "dedToYouTube\020\236#\022\037\n\032k_EMsgGCLANServerAvai"
    "lable\020\237#*Y\n\027EGCBaseProtoObjectTypes\022\036\n\031k"
    "_EProtoObjectPartyInvite\020\351\007\022\036\n\031k_EProtoO"
    "bjectLobbyInvite\020\352\007*T\n\017GCGoodbyeReason\022!"
    "\n\035GCGoodbyeReason_GC_GOING_DOWN\020\001\022\036\n\032GCG"
    "oodbyeReason_NO_SESSION\020\002B\005H\001\200\001\000", 10592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_gcmessages.proto", &protobuf_RegisterTypes);
  CGCStorePurchaseInit_LineItem::default_instance_ = new CGCStorePurchaseInit_LineItem();
  CMsgGCStorePurchaseInit::default_instance_ = new CMsgGCStorePurchaseInit();
  CMsgGCStorePurchaseInitResponse::default_instance_ = new CMsgGCStorePurchaseInitResponse();
  CSOPartyInvite::default_instance_ = new CSOPartyInvite();
  CSOLobbyInvite::default_instance_ = new CSOLobbyInvite();
  CMsgSystemBroadcast::default_instance_ = new CMsgSystemBroadcast();
  CMsgClientHello::default_instance_ = new CMsgClientHello();
  CMsgServerHello::default_instance_ = new CMsgServerHello();
  CMsgClientWelcome::default_instance_ = new CMsgClientWelcome();
  CMsgServerWelcome::default_instance_ = new CMsgServerWelcome();
  CMsgClientGoodbye::default_instance_ = new CMsgClientGoodbye();
  CMsgServerGoodbye::default_instance_ = new CMsgServerGoodbye();
  CMsgInviteToParty::default_instance_ = new CMsgInviteToParty();
  CMsgInvitationCreated::default_instance_ = new CMsgInvitationCreated();
  CMsgPartyInviteResponse::default_instance_ = new CMsgPartyInviteResponse();
  CMsgKickFromParty::default_instance_ = new CMsgKickFromParty();
  CMsgLeaveParty::default_instance_ = new CMsgLeaveParty();
  CMsgServerAvailable::default_instance_ = new CMsgServerAvailable();
  CMsgLANServerAvailable::default_instance_ = new CMsgLANServerAvailable();
  CSOEconGameAccountClient::default_instance_ = new CSOEconGameAccountClient();
  CSOItemCriteriaCondition::default_instance_ = new CSOItemCriteriaCondition();
  CSOItemCriteria::default_instance_ = new CSOItemCriteria();
  CSOItemRecipe::default_instance_ = new CSOItemRecipe();
  CMsgDevNewItemRequest::default_instance_ = new CMsgDevNewItemRequest();
  CMsgDevDebugRollLootRequest::default_instance_ = new CMsgDevDebugRollLootRequest();
  CMsgIncrementKillCountAttribute::default_instance_ = new CMsgIncrementKillCountAttribute();
  CMsgIncrementKillCountAttribute_Multiple::default_instance_ = new CMsgIncrementKillCountAttribute_Multiple();
  CMsgTrackUniquePlayerPairEvent::default_instance_ = new CMsgTrackUniquePlayerPairEvent();
  CMsgApplyStrangeCountTransfer::default_instance_ = new CMsgApplyStrangeCountTransfer();
  CMsgApplyStrangePart::default_instance_ = new CMsgApplyStrangePart();
  CMsgApplyStrangeRestriction::default_instance_ = new CMsgApplyStrangeRestriction();
  CMsgApplyUpgradeCard::default_instance_ = new CMsgApplyUpgradeCard();
  CSOEconItemAttribute::default_instance_ = new CSOEconItemAttribute();
  CSOEconItemEquipped::default_instance_ = new CSOEconItemEquipped();
  CSOEconItem::default_instance_ = new CSOEconItem();
  CMsgAdjustItemEquippedState::default_instance_ = new CMsgAdjustItemEquippedState();
  CMsgSortItems::default_instance_ = new CMsgSortItems();
  CSOEconClaimCode::default_instance_ = new CSOEconClaimCode();
  CMsgStoreGetUserData::default_instance_ = new CMsgStoreGetUserData();
  CMsgStoreGetUserDataResponse::default_instance_ = new CMsgStoreGetUserDataResponse();
  CMsgUpdateItemSchema::default_instance_ = new CMsgUpdateItemSchema();
  CMsgGCError::default_instance_ = new CMsgGCError();
  CMsgRequestInventoryRefresh::default_instance_ = new CMsgRequestInventoryRefresh();
  CMsgConVarValue::default_instance_ = new CMsgConVarValue();
  CMsgReplicateConVars::default_instance_ = new CMsgReplicateConVars();
  CMsgUseItem::default_instance_ = new CMsgUseItem();
  CMsgReplayUploadedToYouTube::default_instance_ = new CMsgReplayUploadedToYouTube();
  CMsgConsumableExhausted::default_instance_ = new CMsgConsumableExhausted();
  CMsgItemAcknowledged::default_instance_ = new CMsgItemAcknowledged();
  CMsgSetPresetItemPosition::default_instance_ = new CMsgSetPresetItemPosition();
  CMsgSetItemPositions::default_instance_ = new CMsgSetItemPositions();
  CMsgSetItemPositions_ItemPosition::default_instance_ = new CMsgSetItemPositions_ItemPosition();
  CSOEconItemPresetInstance::default_instance_ = new CSOEconItemPresetInstance();
  CMsgSelectPresetForClass::default_instance_ = new CMsgSelectPresetForClass();
  CSOClassPresetClientData::default_instance_ = new CSOClassPresetClientData();
  CMsgGCReportAbuse::default_instance_ = new CMsgGCReportAbuse();
  CMsgGCReportAbuseResponse::default_instance_ = new CMsgGCReportAbuseResponse();
  CMsgGCNameItemNotification::default_instance_ = new CMsgGCNameItemNotification();
  CMsgGCClientDisplayNotification::default_instance_ = new CMsgGCClientDisplayNotification();
  CMsgGCShowItemsPickedUp::default_instance_ = new CMsgGCShowItemsPickedUp();
  CMsgUpdatePeriodicEvent::default_instance_ = new CMsgUpdatePeriodicEvent();
  CMsgGCIncrementKillCountResponse::default_instance_ = new CMsgGCIncrementKillCountResponse();
  CMsgGCRemoveStrangePart::default_instance_ = new CMsgGCRemoveStrangePart();
  CMsgGCRemoveUpgradeCard::default_instance_ = new CMsgGCRemoveUpgradeCard();
  CMsgGCRemoveCustomizationAttributeSimple::default_instance_ = new CMsgGCRemoveCustomizationAttributeSimple();
  CMsgGCResetStrangeScores::default_instance_ = new CMsgGCResetStrangeScores();
  CMsgGCItemPreviewItemBoughtNotification::default_instance_ = new CMsgGCItemPreviewItemBoughtNotification();
  CMsgGCStorePurchaseCancel::default_instance_ = new CMsgGCStorePurchaseCancel();
  CMsgGCStorePurchaseCancelResponse::default_instance_ = new CMsgGCStorePurchaseCancelResponse();
  CMsgGCStorePurchaseFinalize::default_instance_ = new CMsgGCStorePurchaseFinalize();
  CMsgGCStorePurchaseFinalizeResponse::default_instance_ = new CMsgGCStorePurchaseFinalizeResponse();
  CMsgGCBannedWordListRequest::default_instance_ = new CMsgGCBannedWordListRequest();
  CMsgGCGiftedItems::default_instance_ = new CMsgGCGiftedItems();
  CMsgGCCollectItem::default_instance_ = new CMsgGCCollectItem();
  CMsgGCClientMarketDataRequest::default_instance_ = new CMsgGCClientMarketDataRequest();
  CMsgGCClientMarketDataEntry::default_instance_ = new CMsgGCClientMarketDataEntry();
  CMsgGCClientMarketData::default_instance_ = new CMsgGCClientMarketData();
  CMsgApplyToolToItem::default_instance_ = new CMsgApplyToolToItem();
  CMsgApplyToolToBaseItem::default_instance_ = new CMsgApplyToolToBaseItem();
  CMsgRecipeComponent::default_instance_ = new CMsgRecipeComponent();
  CMsgFulfillDynamicRecipeComponent::default_instance_ = new CMsgFulfillDynamicRecipeComponent();
  CMsgSetItemEffectVerticalOffset::default_instance_ = new CMsgSetItemEffectVerticalOffset();
  CMsgSetHatEffectUseHeadOrigin::default_instance_ = new CMsgSetHatEffectUseHeadOrigin();
  CMsgDeliverGiftResponseGiver::default_instance_ = new CMsgDeliverGiftResponseGiver();
  CSOEconGameAccountForGameServers::default_instance_ = new CSOEconGameAccountForGameServers();
  CWorkshop_PopulateItemDescriptions_Request::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request();
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription();
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock();
  CWorkshop_GetContributors_Request::default_instance_ = new CWorkshop_GetContributors_Request();
  CWorkshop_GetContributors_Response::default_instance_ = new CWorkshop_GetContributors_Response();
  CWorkshop_SetItemPaymentRules_Request::default_instance_ = new CWorkshop_SetItemPaymentRules_Request();
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_ = new CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule();
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_ = new CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule();
  CWorkshop_SetItemPaymentRules_Response::default_instance_ = new CWorkshop_SetItemPaymentRules_Response();
  CGCStorePurchaseInit_LineItem::default_instance_->InitAsDefaultInstance();
  CMsgGCStorePurchaseInit::default_instance_->InitAsDefaultInstance();
  CMsgGCStorePurchaseInitResponse::default_instance_->InitAsDefaultInstance();
  CSOPartyInvite::default_instance_->InitAsDefaultInstance();
  CSOLobbyInvite::default_instance_->InitAsDefaultInstance();
  CMsgSystemBroadcast::default_instance_->InitAsDefaultInstance();
  CMsgClientHello::default_instance_->InitAsDefaultInstance();
  CMsgServerHello::default_instance_->InitAsDefaultInstance();
  CMsgClientWelcome::default_instance_->InitAsDefaultInstance();
  CMsgServerWelcome::default_instance_->InitAsDefaultInstance();
  CMsgClientGoodbye::default_instance_->InitAsDefaultInstance();
  CMsgServerGoodbye::default_instance_->InitAsDefaultInstance();
  CMsgInviteToParty::default_instance_->InitAsDefaultInstance();
  CMsgInvitationCreated::default_instance_->InitAsDefaultInstance();
  CMsgPartyInviteResponse::default_instance_->InitAsDefaultInstance();
  CMsgKickFromParty::default_instance_->InitAsDefaultInstance();
  CMsgLeaveParty::default_instance_->InitAsDefaultInstance();
  CMsgServerAvailable::default_instance_->InitAsDefaultInstance();
  CMsgLANServerAvailable::default_instance_->InitAsDefaultInstance();
  CSOEconGameAccountClient::default_instance_->InitAsDefaultInstance();
  CSOItemCriteriaCondition::default_instance_->InitAsDefaultInstance();
  CSOItemCriteria::default_instance_->InitAsDefaultInstance();
  CSOItemRecipe::default_instance_->InitAsDefaultInstance();
  CMsgDevNewItemRequest::default_instance_->InitAsDefaultInstance();
  CMsgDevDebugRollLootRequest::default_instance_->InitAsDefaultInstance();
  CMsgIncrementKillCountAttribute::default_instance_->InitAsDefaultInstance();
  CMsgIncrementKillCountAttribute_Multiple::default_instance_->InitAsDefaultInstance();
  CMsgTrackUniquePlayerPairEvent::default_instance_->InitAsDefaultInstance();
  CMsgApplyStrangeCountTransfer::default_instance_->InitAsDefaultInstance();
  CMsgApplyStrangePart::default_instance_->InitAsDefaultInstance();
  CMsgApplyStrangeRestriction::default_instance_->InitAsDefaultInstance();
  CMsgApplyUpgradeCard::default_instance_->InitAsDefaultInstance();
  CSOEconItemAttribute::default_instance_->InitAsDefaultInstance();
  CSOEconItemEquipped::default_instance_->InitAsDefaultInstance();
  CSOEconItem::default_instance_->InitAsDefaultInstance();
  CMsgAdjustItemEquippedState::default_instance_->InitAsDefaultInstance();
  CMsgSortItems::default_instance_->InitAsDefaultInstance();
  CSOEconClaimCode::default_instance_->InitAsDefaultInstance();
  CMsgStoreGetUserData::default_instance_->InitAsDefaultInstance();
  CMsgStoreGetUserDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgUpdateItemSchema::default_instance_->InitAsDefaultInstance();
  CMsgGCError::default_instance_->InitAsDefaultInstance();
  CMsgRequestInventoryRefresh::default_instance_->InitAsDefaultInstance();
  CMsgConVarValue::default_instance_->InitAsDefaultInstance();
  CMsgReplicateConVars::default_instance_->InitAsDefaultInstance();
  CMsgUseItem::default_instance_->InitAsDefaultInstance();
  CMsgReplayUploadedToYouTube::default_instance_->InitAsDefaultInstance();
  CMsgConsumableExhausted::default_instance_->InitAsDefaultInstance();
  CMsgItemAcknowledged::default_instance_->InitAsDefaultInstance();
  CMsgSetPresetItemPosition::default_instance_->InitAsDefaultInstance();
  CMsgSetItemPositions::default_instance_->InitAsDefaultInstance();
  CMsgSetItemPositions_ItemPosition::default_instance_->InitAsDefaultInstance();
  CSOEconItemPresetInstance::default_instance_->InitAsDefaultInstance();
  CMsgSelectPresetForClass::default_instance_->InitAsDefaultInstance();
  CSOClassPresetClientData::default_instance_->InitAsDefaultInstance();
  CMsgGCReportAbuse::default_instance_->InitAsDefaultInstance();
  CMsgGCReportAbuseResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCNameItemNotification::default_instance_->InitAsDefaultInstance();
  CMsgGCClientDisplayNotification::default_instance_->InitAsDefaultInstance();
  CMsgGCShowItemsPickedUp::default_instance_->InitAsDefaultInstance();
  CMsgUpdatePeriodicEvent::default_instance_->InitAsDefaultInstance();
  CMsgGCIncrementKillCountResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCRemoveStrangePart::default_instance_->InitAsDefaultInstance();
  CMsgGCRemoveUpgradeCard::default_instance_->InitAsDefaultInstance();
  CMsgGCRemoveCustomizationAttributeSimple::default_instance_->InitAsDefaultInstance();
  CMsgGCResetStrangeScores::default_instance_->InitAsDefaultInstance();
  CMsgGCItemPreviewItemBoughtNotification::default_instance_->InitAsDefaultInstance();
  CMsgGCStorePurchaseCancel::default_instance_->InitAsDefaultInstance();
  CMsgGCStorePurchaseCancelResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCStorePurchaseFinalize::default_instance_->InitAsDefaultInstance();
  CMsgGCStorePurchaseFinalizeResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCBannedWordListRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCGiftedItems::default_instance_->InitAsDefaultInstance();
  CMsgGCCollectItem::default_instance_->InitAsDefaultInstance();
  CMsgGCClientMarketDataRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCClientMarketDataEntry::default_instance_->InitAsDefaultInstance();
  CMsgGCClientMarketData::default_instance_->InitAsDefaultInstance();
  CMsgApplyToolToItem::default_instance_->InitAsDefaultInstance();
  CMsgApplyToolToBaseItem::default_instance_->InitAsDefaultInstance();
  CMsgRecipeComponent::default_instance_->InitAsDefaultInstance();
  CMsgFulfillDynamicRecipeComponent::default_instance_->InitAsDefaultInstance();
  CMsgSetItemEffectVerticalOffset::default_instance_->InitAsDefaultInstance();
  CMsgSetHatEffectUseHeadOrigin::default_instance_->InitAsDefaultInstance();
  CMsgDeliverGiftResponseGiver::default_instance_->InitAsDefaultInstance();
  CSOEconGameAccountForGameServers::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_->InitAsDefaultInstance();
  CWorkshop_GetContributors_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_GetContributors_Response::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_5fgcmessages_2eproto {
  StaticDescriptorInitializer_base_5fgcmessages_2eproto() {
    protobuf_AddDesc_base_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_base_5fgcmessages_2eproto_;

const ::google::protobuf::EnumDescriptor* EGCBaseMsg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCBaseMsg_descriptor_;
}
bool EGCBaseMsg_IsValid(int value) {
  switch(value) {
    case 4001:
    case 4002:
    case 4003:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCBaseProtoObjectTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGCBaseProtoObjectTypes_descriptor_;
}
bool EGCBaseProtoObjectTypes_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCGoodbyeReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGoodbyeReason_descriptor_;
}
bool GCGoodbyeReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CGCStorePurchaseInit_LineItem::kItemDefIdFieldNumber;
const int CGCStorePurchaseInit_LineItem::kQuantityFieldNumber;
const int CGCStorePurchaseInit_LineItem::kCostInLocalCurrencyFieldNumber;
const int CGCStorePurchaseInit_LineItem::kPurchaseTypeFieldNumber;
#endif  // !_MSC_VER

CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGCStorePurchaseInit_LineItem::InitAsDefaultInstance() {
}

CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(const CGCStorePurchaseInit_LineItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGCStorePurchaseInit_LineItem::SharedCtor() {
  _cached_size_ = 0;
  item_def_id_ = 0u;
  quantity_ = 0u;
  cost_in_local_currency_ = 0u;
  purchase_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCStorePurchaseInit_LineItem::~CGCStorePurchaseInit_LineItem() {
  SharedDtor();
}

void CGCStorePurchaseInit_LineItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCStorePurchaseInit_LineItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCStorePurchaseInit_LineItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCStorePurchaseInit_LineItem_descriptor_;
}

const CGCStorePurchaseInit_LineItem& CGCStorePurchaseInit_LineItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CGCStorePurchaseInit_LineItem* CGCStorePurchaseInit_LineItem::default_instance_ = NULL;

CGCStorePurchaseInit_LineItem* CGCStorePurchaseInit_LineItem::New() const {
  return new CGCStorePurchaseInit_LineItem;
}

void CGCStorePurchaseInit_LineItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_id_ = 0u;
    quantity_ = 0u;
    cost_in_local_currency_ = 0u;
    purchase_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCStorePurchaseInit_LineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }
      
      // optional uint32 quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_in_local_currency;
        break;
      }
      
      // optional uint32 cost_in_local_currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_in_local_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_in_local_currency_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_purchase_type;
        break;
      }
      
      // optional uint32 purchase_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchase_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGCStorePurchaseInit_LineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_id(), output);
  }
  
  // optional uint32 quantity = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quantity(), output);
  }
  
  // optional uint32 cost_in_local_currency = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_in_local_currency(), output);
  }
  
  // optional uint32 purchase_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->purchase_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGCStorePurchaseInit_LineItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_id(), target);
  }
  
  // optional uint32 quantity = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quantity(), target);
  }
  
  // optional uint32 cost_in_local_currency = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_in_local_currency(), target);
  }
  
  // optional uint32 purchase_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->purchase_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGCStorePurchaseInit_LineItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def_id = 1;
    if (has_item_def_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_id());
    }
    
    // optional uint32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }
    
    // optional uint32 cost_in_local_currency = 3;
    if (has_cost_in_local_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_in_local_currency());
    }
    
    // optional uint32 purchase_type = 4;
    if (has_purchase_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCStorePurchaseInit_LineItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCStorePurchaseInit_LineItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const CGCStorePurchaseInit_LineItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_def_id(from.item_def_id());
    }
    if (from._has_bit(1)) {
      set_quantity(from.quantity());
    }
    if (from._has_bit(2)) {
      set_cost_in_local_currency(from.cost_in_local_currency());
    }
    if (from._has_bit(3)) {
      set_purchase_type(from.purchase_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const CGCStorePurchaseInit_LineItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStorePurchaseInit_LineItem::IsInitialized() const {
  
  return true;
}

void CGCStorePurchaseInit_LineItem::Swap(CGCStorePurchaseInit_LineItem* other) {
  if (other != this) {
    std::swap(item_def_id_, other->item_def_id_);
    std::swap(quantity_, other->quantity_);
    std::swap(cost_in_local_currency_, other->cost_in_local_currency_);
    std::swap(purchase_type_, other->purchase_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCStorePurchaseInit_LineItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCStorePurchaseInit_LineItem_descriptor_;
  metadata.reflection = CGCStorePurchaseInit_LineItem_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCStorePurchaseInit::_default_country_;
#ifndef _MSC_VER
const int CMsgGCStorePurchaseInit::kCountryFieldNumber;
const int CMsgGCStorePurchaseInit::kLanguageFieldNumber;
const int CMsgGCStorePurchaseInit::kCurrencyFieldNumber;
const int CMsgGCStorePurchaseInit::kLineItemsFieldNumber;
#endif  // !_MSC_VER

CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCStorePurchaseInit::InitAsDefaultInstance() {
}

CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(const CMsgGCStorePurchaseInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInit::SharedCtor() {
  _cached_size_ = 0;
  country_ = const_cast< ::std::string*>(&_default_country_);
  language_ = 0;
  currency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCStorePurchaseInit::~CMsgGCStorePurchaseInit() {
  SharedDtor();
}

void CMsgGCStorePurchaseInit::SharedDtor() {
  if (country_ != &_default_country_) {
    delete country_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCStorePurchaseInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCStorePurchaseInit_descriptor_;
}

const CMsgGCStorePurchaseInit& CMsgGCStorePurchaseInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCStorePurchaseInit* CMsgGCStorePurchaseInit::default_instance_ = NULL;

CMsgGCStorePurchaseInit* CMsgGCStorePurchaseInit::New() const {
  return new CMsgGCStorePurchaseInit;
}

void CMsgGCStorePurchaseInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (country_ != &_default_country_) {
        country_->clear();
      }
    }
    language_ = 0;
    currency_ = 0;
  }
  line_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCStorePurchaseInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_language;
        break;
      }
      
      // optional int32 language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currency;
        break;
      }
      
      // optional int32 currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_line_items;
        break;
      }
      
      // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_line_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCStorePurchaseInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string country = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->country(), output);
  }
  
  // optional int32 language = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }
  
  // optional int32 currency = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }
  
  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  for (int i = 0; i < this->line_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->line_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCStorePurchaseInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string country = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country(), target);
  }
  
  // optional int32 language = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }
  
  // optional int32 currency = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }
  
  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  for (int i = 0; i < this->line_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->line_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCStorePurchaseInit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // optional int32 language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }
    
    // optional int32 currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }
    
  }
  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  total_size += 1 * this->line_items_size();
  for (int i = 0; i < this->line_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line_items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCStorePurchaseInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCStorePurchaseInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInit::MergeFrom(const CMsgGCStorePurchaseInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  line_items_.MergeFrom(from.line_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_country(from.country());
    }
    if (from._has_bit(1)) {
      set_language(from.language());
    }
    if (from._has_bit(2)) {
      set_currency(from.currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCStorePurchaseInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInit::CopyFrom(const CMsgGCStorePurchaseInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInit::IsInitialized() const {
  
  return true;
}

void CMsgGCStorePurchaseInit::Swap(CMsgGCStorePurchaseInit* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(language_, other->language_);
    std::swap(currency_, other->currency_);
    line_items_.Swap(&other->line_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCStorePurchaseInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCStorePurchaseInit_descriptor_;
  metadata.reflection = CMsgGCStorePurchaseInit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCStorePurchaseInitResponse::kResultFieldNumber;
const int CMsgGCStorePurchaseInitResponse::kTxnIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCStorePurchaseInitResponse::InitAsDefaultInstance() {
}

CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(const CMsgGCStorePurchaseInitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInitResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  txn_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCStorePurchaseInitResponse::~CMsgGCStorePurchaseInitResponse() {
  SharedDtor();
}

void CMsgGCStorePurchaseInitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCStorePurchaseInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseInitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCStorePurchaseInitResponse_descriptor_;
}

const CMsgGCStorePurchaseInitResponse& CMsgGCStorePurchaseInitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCStorePurchaseInitResponse* CMsgGCStorePurchaseInitResponse::default_instance_ = NULL;

CMsgGCStorePurchaseInitResponse* CMsgGCStorePurchaseInitResponse::New() const {
  return new CMsgGCStorePurchaseInitResponse;
}

void CMsgGCStorePurchaseInitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    txn_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCStorePurchaseInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_txn_id;
        break;
      }
      
      // optional uint64 txn_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txn_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCStorePurchaseInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional uint64 txn_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCStorePurchaseInitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional uint64 txn_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->txn_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCStorePurchaseInitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional uint64 txn_id = 2;
    if (has_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCStorePurchaseInitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCStorePurchaseInitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const CMsgGCStorePurchaseInitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_txn_id(from.txn_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const CMsgGCStorePurchaseInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInitResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCStorePurchaseInitResponse::Swap(CMsgGCStorePurchaseInitResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(txn_id_, other->txn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCStorePurchaseInitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCStorePurchaseInitResponse_descriptor_;
  metadata.reflection = CMsgGCStorePurchaseInitResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOPartyInvite::_default_sender_name_;
#ifndef _MSC_VER
const int CSOPartyInvite::kGroupIdFieldNumber;
const int CSOPartyInvite::kSenderIdFieldNumber;
const int CSOPartyInvite::kSenderNameFieldNumber;
#endif  // !_MSC_VER

CSOPartyInvite::CSOPartyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOPartyInvite::InitAsDefaultInstance() {
}

CSOPartyInvite::CSOPartyInvite(const CSOPartyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOPartyInvite::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&_default_sender_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOPartyInvite::~CSOPartyInvite() {
  SharedDtor();
}

void CSOPartyInvite::SharedDtor() {
  if (sender_name_ != &_default_sender_name_) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void CSOPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOPartyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOPartyInvite_descriptor_;
}

const CSOPartyInvite& CSOPartyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOPartyInvite* CSOPartyInvite::default_instance_ = NULL;

CSOPartyInvite* CSOPartyInvite::New() const {
  return new CSOPartyInvite;
}

void CSOPartyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sender_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (sender_name_ != &_default_sender_name_) {
        sender_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }
      
      // optional fixed64 sender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 sender_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }
  
  // optional string sender_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOPartyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 sender_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }
  
  // optional string sender_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOPartyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }
    
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOPartyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOPartyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOPartyInvite::MergeFrom(const CSOPartyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_group_id(from.group_id());
    }
    if (from._has_bit(1)) {
      set_sender_id(from.sender_id());
    }
    if (from._has_bit(2)) {
      set_sender_name(from.sender_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOPartyInvite::CopyFrom(const CSOPartyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOPartyInvite::IsInitialized() const {
  
  return true;
}

void CSOPartyInvite::Swap(CSOPartyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOPartyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOPartyInvite_descriptor_;
  metadata.reflection = CSOPartyInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOLobbyInvite::_default_sender_name_;
#ifndef _MSC_VER
const int CSOLobbyInvite::kGroupIdFieldNumber;
const int CSOLobbyInvite::kSenderIdFieldNumber;
const int CSOLobbyInvite::kSenderNameFieldNumber;
#endif  // !_MSC_VER

CSOLobbyInvite::CSOLobbyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOLobbyInvite::InitAsDefaultInstance() {
}

CSOLobbyInvite::CSOLobbyInvite(const CSOLobbyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOLobbyInvite::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  sender_id_ = GOOGLE_ULONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&_default_sender_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOLobbyInvite::~CSOLobbyInvite() {
  SharedDtor();
}

void CSOLobbyInvite::SharedDtor() {
  if (sender_name_ != &_default_sender_name_) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void CSOLobbyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOLobbyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOLobbyInvite_descriptor_;
}

const CSOLobbyInvite& CSOLobbyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOLobbyInvite* CSOLobbyInvite::default_instance_ = NULL;

CSOLobbyInvite* CSOLobbyInvite::New() const {
  return new CSOLobbyInvite;
}

void CSOLobbyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    sender_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (sender_name_ != &_default_sender_name_) {
        sender_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOLobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }
      
      // optional fixed64 sender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOLobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 sender_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }
  
  // optional string sender_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOLobbyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 sender_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }
  
  // optional string sender_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOLobbyInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }
    
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOLobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOLobbyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOLobbyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOLobbyInvite::MergeFrom(const CSOLobbyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_group_id(from.group_id());
    }
    if (from._has_bit(1)) {
      set_sender_id(from.sender_id());
    }
    if (from._has_bit(2)) {
      set_sender_name(from.sender_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOLobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOLobbyInvite::CopyFrom(const CSOLobbyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOLobbyInvite::IsInitialized() const {
  
  return true;
}

void CSOLobbyInvite::Swap(CSOLobbyInvite* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOLobbyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOLobbyInvite_descriptor_;
  metadata.reflection = CSOLobbyInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgSystemBroadcast::_default_message_;
#ifndef _MSC_VER
const int CMsgSystemBroadcast::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgSystemBroadcast::CMsgSystemBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSystemBroadcast::InitAsDefaultInstance() {
}

CMsgSystemBroadcast::CMsgSystemBroadcast(const CMsgSystemBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSystemBroadcast::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSystemBroadcast::~CMsgSystemBroadcast() {
  SharedDtor();
}

void CMsgSystemBroadcast::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSystemBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSystemBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSystemBroadcast_descriptor_;
}

const CMsgSystemBroadcast& CMsgSystemBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSystemBroadcast* CMsgSystemBroadcast::default_instance_ = NULL;

CMsgSystemBroadcast* CMsgSystemBroadcast::New() const {
  return new CMsgSystemBroadcast;
}

void CMsgSystemBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSystemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSystemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSystemBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSystemBroadcast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSystemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSystemBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSystemBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSystemBroadcast::MergeFrom(const CMsgSystemBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSystemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSystemBroadcast::CopyFrom(const CMsgSystemBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSystemBroadcast::IsInitialized() const {
  
  return true;
}

void CMsgSystemBroadcast::Swap(CMsgSystemBroadcast* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSystemBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSystemBroadcast_descriptor_;
  metadata.reflection = CMsgSystemBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHello::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientHello::InitAsDefaultInstance() {
}

CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHello::~CMsgClientHello() {
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHello_descriptor_;
}

const CMsgClientHello& CMsgClientHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgClientHello* CMsgClientHello::default_instance_ = NULL;

CMsgClientHello* CMsgClientHello::New() const {
  return new CMsgClientHello;
}

void CMsgClientHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientHello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {
  
  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHello_descriptor_;
  metadata.reflection = CMsgClientHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerHello::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgServerHello::CMsgServerHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerHello::InitAsDefaultInstance() {
}

CMsgServerHello::CMsgServerHello(const CMsgServerHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerHello::~CMsgServerHello() {
  SharedDtor();
}

void CMsgServerHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerHello_descriptor_;
}

const CMsgServerHello& CMsgServerHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgServerHello* CMsgServerHello::default_instance_ = NULL;

CMsgServerHello* CMsgServerHello::New() const {
  return new CMsgServerHello;
}

void CMsgServerHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgServerHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerHello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerHello::MergeFrom(const CMsgServerHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerHello::CopyFrom(const CMsgServerHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerHello::IsInitialized() const {
  
  return true;
}

void CMsgServerHello::Swap(CMsgServerHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerHello_descriptor_;
  metadata.reflection = CMsgServerHello_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgClientWelcome::_default_game_data_;
#ifndef _MSC_VER
const int CMsgClientWelcome::kVersionFieldNumber;
const int CMsgClientWelcome::kGameDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientWelcome::CMsgClientWelcome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientWelcome::InitAsDefaultInstance() {
}

CMsgClientWelcome::CMsgClientWelcome(const CMsgClientWelcome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientWelcome::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  game_data_ = const_cast< ::std::string*>(&_default_game_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWelcome::~CMsgClientWelcome() {
  SharedDtor();
}

void CMsgClientWelcome::SharedDtor() {
  if (game_data_ != &_default_game_data_) {
    delete game_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientWelcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientWelcome_descriptor_;
}

const CMsgClientWelcome& CMsgClientWelcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgClientWelcome* CMsgClientWelcome::default_instance_ = NULL;

CMsgClientWelcome* CMsgClientWelcome::New() const {
  return new CMsgClientWelcome;
}

void CMsgClientWelcome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (_has_bit(1)) {
      if (game_data_ != &_default_game_data_) {
        game_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_data;
        break;
      }
      
      // optional bytes game_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional bytes game_data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->game_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientWelcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional bytes game_data = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->game_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientWelcome::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional bytes game_data = 2;
    if (has_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientWelcome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientWelcome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientWelcome::MergeFrom(const CMsgClientWelcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_game_data(from.game_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientWelcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome::CopyFrom(const CMsgClientWelcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome::IsInitialized() const {
  
  return true;
}

void CMsgClientWelcome::Swap(CMsgClientWelcome* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(game_data_, other->game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientWelcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientWelcome_descriptor_;
  metadata.reflection = CMsgClientWelcome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerWelcome::kMinAllowedVersionFieldNumber;
const int CMsgServerWelcome::kActiveVersionFieldNumber;
#endif  // !_MSC_VER

CMsgServerWelcome::CMsgServerWelcome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerWelcome::InitAsDefaultInstance() {
}

CMsgServerWelcome::CMsgServerWelcome(const CMsgServerWelcome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerWelcome::SharedCtor() {
  _cached_size_ = 0;
  min_allowed_version_ = 0u;
  active_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerWelcome::~CMsgServerWelcome() {
  SharedDtor();
}

void CMsgServerWelcome::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerWelcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerWelcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerWelcome_descriptor_;
}

const CMsgServerWelcome& CMsgServerWelcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgServerWelcome* CMsgServerWelcome::default_instance_ = NULL;

CMsgServerWelcome* CMsgServerWelcome::New() const {
  return new CMsgServerWelcome;
}

void CMsgServerWelcome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_allowed_version_ = 0u;
    active_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min_allowed_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_allowed_version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_version;
        break;
      }
      
      // optional uint32 active_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_version_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgServerWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 min_allowed_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_allowed_version(), output);
  }
  
  // optional uint32 active_version = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerWelcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 min_allowed_version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_allowed_version(), target);
  }
  
  // optional uint32 active_version = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerWelcome::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 min_allowed_version = 1;
    if (has_min_allowed_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_allowed_version());
    }
    
    // optional uint32 active_version = 2;
    if (has_active_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerWelcome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerWelcome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerWelcome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerWelcome::MergeFrom(const CMsgServerWelcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_min_allowed_version(from.min_allowed_version());
    }
    if (from._has_bit(1)) {
      set_active_version(from.active_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerWelcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerWelcome::CopyFrom(const CMsgServerWelcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerWelcome::IsInitialized() const {
  
  return true;
}

void CMsgServerWelcome::Swap(CMsgServerWelcome* other) {
  if (other != this) {
    std::swap(min_allowed_version_, other->min_allowed_version_);
    std::swap(active_version_, other->active_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerWelcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerWelcome_descriptor_;
  metadata.reflection = CMsgServerWelcome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGoodbye::kReasonFieldNumber;
#endif  // !_MSC_VER

CMsgClientGoodbye::CMsgClientGoodbye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGoodbye::InitAsDefaultInstance() {
}

CMsgClientGoodbye::CMsgClientGoodbye(const CMsgClientGoodbye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGoodbye::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGoodbye::~CMsgClientGoodbye() {
  SharedDtor();
}

void CMsgClientGoodbye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGoodbye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGoodbye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGoodbye_descriptor_;
}

const CMsgClientGoodbye& CMsgClientGoodbye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgClientGoodbye* CMsgClientGoodbye::default_instance_ = NULL;

CMsgClientGoodbye* CMsgClientGoodbye::New() const {
  return new CMsgClientGoodbye;
}

void CMsgClientGoodbye::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGoodbye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (GCGoodbyeReason_IsValid(value)) {
            set_reason(static_cast< GCGoodbyeReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGoodbye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGoodbye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGoodbye::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGoodbye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGoodbye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGoodbye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGoodbye::MergeFrom(const CMsgClientGoodbye& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGoodbye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGoodbye::CopyFrom(const CMsgClientGoodbye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGoodbye::IsInitialized() const {
  
  return true;
}

void CMsgClientGoodbye::Swap(CMsgClientGoodbye* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGoodbye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGoodbye_descriptor_;
  metadata.reflection = CMsgClientGoodbye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgServerGoodbye::kReasonFieldNumber;
#endif  // !_MSC_VER

CMsgServerGoodbye::CMsgServerGoodbye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerGoodbye::InitAsDefaultInstance() {
}

CMsgServerGoodbye::CMsgServerGoodbye(const CMsgServerGoodbye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerGoodbye::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerGoodbye::~CMsgServerGoodbye() {
  SharedDtor();
}

void CMsgServerGoodbye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerGoodbye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerGoodbye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerGoodbye_descriptor_;
}

const CMsgServerGoodbye& CMsgServerGoodbye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgServerGoodbye* CMsgServerGoodbye::default_instance_ = NULL;

CMsgServerGoodbye* CMsgServerGoodbye::New() const {
  return new CMsgServerGoodbye;
}

void CMsgServerGoodbye::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerGoodbye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (GCGoodbyeReason_IsValid(value)) {
            set_reason(static_cast< GCGoodbyeReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgServerGoodbye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerGoodbye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerGoodbye::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCGoodbyeReason reason = 1 [default = GCGoodbyeReason_GC_GOING_DOWN];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerGoodbye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerGoodbye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerGoodbye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerGoodbye::MergeFrom(const CMsgServerGoodbye& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerGoodbye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerGoodbye::CopyFrom(const CMsgServerGoodbye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGoodbye::IsInitialized() const {
  
  return true;
}

void CMsgServerGoodbye::Swap(CMsgServerGoodbye* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerGoodbye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerGoodbye_descriptor_;
  metadata.reflection = CMsgServerGoodbye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgInviteToParty::kSteamIdFieldNumber;
const int CMsgInviteToParty::kClientVersionFieldNumber;
const int CMsgInviteToParty::kTeamIdFieldNumber;
const int CMsgInviteToParty::kAsCoachFieldNumber;
#endif  // !_MSC_VER

CMsgInviteToParty::CMsgInviteToParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgInviteToParty::InitAsDefaultInstance() {
}

CMsgInviteToParty::CMsgInviteToParty(const CMsgInviteToParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgInviteToParty::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  client_version_ = 0u;
  team_id_ = 0u;
  as_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgInviteToParty::~CMsgInviteToParty() {
  SharedDtor();
}

void CMsgInviteToParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgInviteToParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgInviteToParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgInviteToParty_descriptor_;
}

const CMsgInviteToParty& CMsgInviteToParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgInviteToParty* CMsgInviteToParty::default_instance_ = NULL;

CMsgInviteToParty* CMsgInviteToParty::New() const {
  return new CMsgInviteToParty;
}

void CMsgInviteToParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    client_version_ = 0u;
    team_id_ = 0u;
    as_coach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgInviteToParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_version;
        break;
      }
      
      // optional uint32 client_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }
      
      // optional uint32 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_as_coach;
        break;
      }
      
      // optional bool as_coach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_as_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgInviteToParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  // optional uint32 client_version = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }
  
  // optional uint32 team_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }
  
  // optional bool as_coach = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->as_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgInviteToParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  // optional uint32 client_version = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }
  
  // optional uint32 team_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }
  
  // optional bool as_coach = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->as_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgInviteToParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }
    
    // optional uint32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }
    
    // optional bool as_coach = 4;
    if (has_as_coach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgInviteToParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgInviteToParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgInviteToParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgInviteToParty::MergeFrom(const CMsgInviteToParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(1)) {
      set_client_version(from.client_version());
    }
    if (from._has_bit(2)) {
      set_team_id(from.team_id());
    }
    if (from._has_bit(3)) {
      set_as_coach(from.as_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgInviteToParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToParty::CopyFrom(const CMsgInviteToParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToParty::IsInitialized() const {
  
  return true;
}

void CMsgInviteToParty::Swap(CMsgInviteToParty* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(client_version_, other->client_version_);
    std::swap(team_id_, other->team_id_);
    std::swap(as_coach_, other->as_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgInviteToParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgInviteToParty_descriptor_;
  metadata.reflection = CMsgInviteToParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgInvitationCreated::kGroupIdFieldNumber;
const int CMsgInvitationCreated::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgInvitationCreated::CMsgInvitationCreated()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgInvitationCreated::InitAsDefaultInstance() {
}

CMsgInvitationCreated::CMsgInvitationCreated(const CMsgInvitationCreated& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgInvitationCreated::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgInvitationCreated::~CMsgInvitationCreated() {
  SharedDtor();
}

void CMsgInvitationCreated::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgInvitationCreated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgInvitationCreated::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgInvitationCreated_descriptor_;
}

const CMsgInvitationCreated& CMsgInvitationCreated::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgInvitationCreated* CMsgInvitationCreated::default_instance_ = NULL;

CMsgInvitationCreated* CMsgInvitationCreated::New() const {
  return new CMsgInvitationCreated;
}

void CMsgInvitationCreated::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = GOOGLE_ULONGLONG(0);
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgInvitationCreated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }
      
      // optional fixed64 steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgInvitationCreated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }
  
  // optional fixed64 steam_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgInvitationCreated::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }
  
  // optional fixed64 steam_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgInvitationCreated::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }
    
    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgInvitationCreated::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgInvitationCreated* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgInvitationCreated*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgInvitationCreated::MergeFrom(const CMsgInvitationCreated& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_group_id(from.group_id());
    }
    if (from._has_bit(1)) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgInvitationCreated::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInvitationCreated::CopyFrom(const CMsgInvitationCreated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInvitationCreated::IsInitialized() const {
  
  return true;
}

void CMsgInvitationCreated::Swap(CMsgInvitationCreated* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgInvitationCreated::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgInvitationCreated_descriptor_;
  metadata.reflection = CMsgInvitationCreated_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyInviteResponse::kPartyIdFieldNumber;
const int CMsgPartyInviteResponse::kAcceptFieldNumber;
const int CMsgPartyInviteResponse::kClientVersionFieldNumber;
const int CMsgPartyInviteResponse::kTeamIdFieldNumber;
const int CMsgPartyInviteResponse::kAsCoachFieldNumber;
#endif  // !_MSC_VER

CMsgPartyInviteResponse::CMsgPartyInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPartyInviteResponse::InitAsDefaultInstance() {
}

CMsgPartyInviteResponse::CMsgPartyInviteResponse(const CMsgPartyInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPartyInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  accept_ = false;
  client_version_ = 0u;
  team_id_ = 0u;
  as_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyInviteResponse::~CMsgPartyInviteResponse() {
  SharedDtor();
}

void CMsgPartyInviteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyInviteResponse_descriptor_;
}

const CMsgPartyInviteResponse& CMsgPartyInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgPartyInviteResponse* CMsgPartyInviteResponse::default_instance_ = NULL;

CMsgPartyInviteResponse* CMsgPartyInviteResponse::New() const {
  return new CMsgPartyInviteResponse;
}

void CMsgPartyInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_id_ = GOOGLE_ULONGLONG(0);
    accept_ = false;
    client_version_ = 0u;
    team_id_ = 0u;
    as_coach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_version;
        break;
      }
      
      // optional uint32 client_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }
      
      // optional uint32 team_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_as_coach;
        break;
      }
      
      // optional bool as_coach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_as_coach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPartyInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 party_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }
  
  // optional bool accept = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }
  
  // optional uint32 client_version = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }
  
  // optional uint32 team_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }
  
  // optional bool as_coach = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->as_coach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPartyInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 party_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }
  
  // optional bool accept = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }
  
  // optional uint32 client_version = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }
  
  // optional uint32 team_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }
  
  // optional bool as_coach = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->as_coach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPartyInviteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }
    
    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }
    
    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }
    
    // optional bool as_coach = 5;
    if (has_as_coach()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyInviteResponse::MergeFrom(const CMsgPartyInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_party_id(from.party_id());
    }
    if (from._has_bit(1)) {
      set_accept(from.accept());
    }
    if (from._has_bit(2)) {
      set_client_version(from.client_version());
    }
    if (from._has_bit(3)) {
      set_team_id(from.team_id());
    }
    if (from._has_bit(4)) {
      set_as_coach(from.as_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyInviteResponse::CopyFrom(const CMsgPartyInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInviteResponse::IsInitialized() const {
  
  return true;
}

void CMsgPartyInviteResponse::Swap(CMsgPartyInviteResponse* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(accept_, other->accept_);
    std::swap(client_version_, other->client_version_);
    std::swap(team_id_, other->team_id_);
    std::swap(as_coach_, other->as_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyInviteResponse_descriptor_;
  metadata.reflection = CMsgPartyInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgKickFromParty::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgKickFromParty::CMsgKickFromParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKickFromParty::InitAsDefaultInstance() {
}

CMsgKickFromParty::CMsgKickFromParty(const CMsgKickFromParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKickFromParty::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKickFromParty::~CMsgKickFromParty() {
  SharedDtor();
}

void CMsgKickFromParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgKickFromParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKickFromParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKickFromParty_descriptor_;
}

const CMsgKickFromParty& CMsgKickFromParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgKickFromParty* CMsgKickFromParty::default_instance_ = NULL;

CMsgKickFromParty* CMsgKickFromParty::New() const {
  return new CMsgKickFromParty;
}

void CMsgKickFromParty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKickFromParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgKickFromParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKickFromParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKickFromParty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKickFromParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKickFromParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKickFromParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKickFromParty::MergeFrom(const CMsgKickFromParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKickFromParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickFromParty::CopyFrom(const CMsgKickFromParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickFromParty::IsInitialized() const {
  
  return true;
}

void CMsgKickFromParty::Swap(CMsgKickFromParty* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKickFromParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKickFromParty_descriptor_;
  metadata.reflection = CMsgKickFromParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgLeaveParty::CMsgLeaveParty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLeaveParty::InitAsDefaultInstance() {
}

CMsgLeaveParty::CMsgLeaveParty(const CMsgLeaveParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLeaveParty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLeaveParty::~CMsgLeaveParty() {
  SharedDtor();
}

void CMsgLeaveParty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLeaveParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaveParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLeaveParty_descriptor_;
}

const CMsgLeaveParty& CMsgLeaveParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLeaveParty* CMsgLeaveParty::default_instance_ = NULL;

CMsgLeaveParty* CMsgLeaveParty::New() const {
  return new CMsgLeaveParty;
}

void CMsgLeaveParty::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLeaveParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgLeaveParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLeaveParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLeaveParty::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaveParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLeaveParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLeaveParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLeaveParty::MergeFrom(const CMsgLeaveParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLeaveParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveParty::CopyFrom(const CMsgLeaveParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveParty::IsInitialized() const {
  
  return true;
}

void CMsgLeaveParty::Swap(CMsgLeaveParty* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLeaveParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLeaveParty_descriptor_;
  metadata.reflection = CMsgLeaveParty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgServerAvailable::CMsgServerAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgServerAvailable::InitAsDefaultInstance() {
}

CMsgServerAvailable::CMsgServerAvailable(const CMsgServerAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgServerAvailable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgServerAvailable::~CMsgServerAvailable() {
  SharedDtor();
}

void CMsgServerAvailable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgServerAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgServerAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgServerAvailable_descriptor_;
}

const CMsgServerAvailable& CMsgServerAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgServerAvailable* CMsgServerAvailable::default_instance_ = NULL;

CMsgServerAvailable* CMsgServerAvailable::New() const {
  return new CMsgServerAvailable;
}

void CMsgServerAvailable::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgServerAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgServerAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgServerAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgServerAvailable::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgServerAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgServerAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgServerAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgServerAvailable::MergeFrom(const CMsgServerAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgServerAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerAvailable::CopyFrom(const CMsgServerAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerAvailable::IsInitialized() const {
  
  return true;
}

void CMsgServerAvailable::Swap(CMsgServerAvailable* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgServerAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgServerAvailable_descriptor_;
  metadata.reflection = CMsgServerAvailable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLANServerAvailable::kLobbyIdFieldNumber;
#endif  // !_MSC_VER

CMsgLANServerAvailable::CMsgLANServerAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgLANServerAvailable::InitAsDefaultInstance() {
}

CMsgLANServerAvailable::CMsgLANServerAvailable(const CMsgLANServerAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgLANServerAvailable::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLANServerAvailable::~CMsgLANServerAvailable() {
  SharedDtor();
}

void CMsgLANServerAvailable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLANServerAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLANServerAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLANServerAvailable_descriptor_;
}

const CMsgLANServerAvailable& CMsgLANServerAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgLANServerAvailable* CMsgLANServerAvailable::default_instance_ = NULL;

CMsgLANServerAvailable* CMsgLANServerAvailable::New() const {
  return new CMsgLANServerAvailable;
}

void CMsgLANServerAvailable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLANServerAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgLANServerAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 lobby_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgLANServerAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 lobby_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgLANServerAvailable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLANServerAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLANServerAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLANServerAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLANServerAvailable::MergeFrom(const CMsgLANServerAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLANServerAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLANServerAvailable::CopyFrom(const CMsgLANServerAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLANServerAvailable::IsInitialized() const {
  
  return true;
}

void CMsgLANServerAvailable::Swap(CMsgLANServerAvailable* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLANServerAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLANServerAvailable_descriptor_;
  metadata.reflection = CMsgLANServerAvailable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconGameAccountClient::kAdditionalBackpackSlotsFieldNumber;
const int CSOEconGameAccountClient::kTrialAccountFieldNumber;
const int CSOEconGameAccountClient::kNeedToChooseMostHelpfulFriendFieldNumber;
const int CSOEconGameAccountClient::kInCoachesListFieldNumber;
const int CSOEconGameAccountClient::kTradeBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kDuelBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kPreviewItemDefFieldNumber;
const int CSOEconGameAccountClient::kPhoneVerifiedFieldNumber;
const int CSOEconGameAccountClient::kSkillRating6V6FieldNumber;
const int CSOEconGameAccountClient::kSkillRating9V9FieldNumber;
const int CSOEconGameAccountClient::kCompetitiveAccessFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingRankedBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingRankedLowPriorityExpirationFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingRankedBanLastDurationFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingRankedLowPriorityLastDurationFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingCasualBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingCasualLowPriorityExpirationFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingCasualBanLastDurationFieldNumber;
const int CSOEconGameAccountClient::kMatchmakingCasualLowPriorityLastDurationFieldNumber;
const int CSOEconGameAccountClient::kPhoneIdentifyingFieldNumber;
#endif  // !_MSC_VER

CSOEconGameAccountClient::CSOEconGameAccountClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconGameAccountClient::InitAsDefaultInstance() {
}

CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  additional_backpack_slots_ = 0u;
  trial_account_ = false;
  need_to_choose_most_helpful_friend_ = false;
  in_coaches_list_ = false;
  trade_ban_expiration_ = 0u;
  duel_ban_expiration_ = 0u;
  preview_item_def_ = 0u;
  phone_verified_ = false;
  skill_rating_6v6_ = 0u;
  skill_rating_9v9_ = 0u;
  competitive_access_ = false;
  matchmaking_ranked_ban_expiration_ = 0u;
  matchmaking_ranked_low_priority_expiration_ = 0u;
  matchmaking_ranked_ban_last_duration_ = 0u;
  matchmaking_ranked_low_priority_last_duration_ = 0u;
  matchmaking_casual_ban_expiration_ = 0u;
  matchmaking_casual_low_priority_expiration_ = 0u;
  matchmaking_casual_ban_last_duration_ = 0u;
  matchmaking_casual_low_priority_last_duration_ = 0u;
  phone_identifying_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  SharedDtor();
}

void CSOEconGameAccountClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconGameAccountClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconGameAccountClient_descriptor_;
}

const CSOEconGameAccountClient& CSOEconGameAccountClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconGameAccountClient* CSOEconGameAccountClient::default_instance_ = NULL;

CSOEconGameAccountClient* CSOEconGameAccountClient::New() const {
  return new CSOEconGameAccountClient;
}

void CSOEconGameAccountClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    additional_backpack_slots_ = 0u;
    trial_account_ = false;
    need_to_choose_most_helpful_friend_ = false;
    in_coaches_list_ = false;
    trade_ban_expiration_ = 0u;
    duel_ban_expiration_ = 0u;
    preview_item_def_ = 0u;
    phone_verified_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skill_rating_6v6_ = 0u;
    skill_rating_9v9_ = 0u;
    competitive_access_ = false;
    matchmaking_ranked_ban_expiration_ = 0u;
    matchmaking_ranked_low_priority_expiration_ = 0u;
    matchmaking_ranked_ban_last_duration_ = 0u;
    matchmaking_ranked_low_priority_last_duration_ = 0u;
    matchmaking_casual_ban_expiration_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    matchmaking_casual_low_priority_expiration_ = 0u;
    matchmaking_casual_ban_last_duration_ = 0u;
    matchmaking_casual_low_priority_last_duration_ = 0u;
    phone_identifying_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_backpack_slots_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trial_account;
        break;
      }
      
      // optional bool trial_account = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trial_account_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_to_choose_most_helpful_friend;
        break;
      }
      
      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_to_choose_most_helpful_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_to_choose_most_helpful_friend_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_in_coaches_list;
        break;
      }
      
      // optional bool in_coaches_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_coaches_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_coaches_list_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_trade_ban_expiration;
        break;
      }
      
      // optional fixed32 trade_ban_expiration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trade_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &trade_ban_expiration_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_duel_ban_expiration;
        break;
      }
      
      // optional fixed32 duel_ban_expiration = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duel_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &duel_ban_expiration_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_preview_item_def;
        break;
      }
      
      // optional uint32 preview_item_def = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preview_item_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_item_def_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_matchmaking_ranked_ban_expiration;
        break;
      }
      
      // optional uint32 matchmaking_ranked_ban_expiration = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_ranked_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_ranked_ban_expiration_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_phone_verified;
        break;
      }
      
      // optional bool phone_verified = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phone_verified_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_skill_rating_6v6;
        break;
      }
      
      // optional uint32 skill_rating_6v6 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_rating_6v6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_rating_6v6_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_skill_rating_9v9;
        break;
      }
      
      // optional uint32 skill_rating_9v9 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_rating_9v9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_rating_9v9_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_competitive_access;
        break;
      }
      
      // optional bool competitive_access = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_competitive_access:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &competitive_access_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_matchmaking_ranked_low_priority_expiration;
        break;
      }
      
      // optional uint32 matchmaking_ranked_low_priority_expiration = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_ranked_low_priority_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_ranked_low_priority_expiration_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_matchmaking_ranked_ban_last_duration;
        break;
      }
      
      // optional uint32 matchmaking_ranked_ban_last_duration = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_ranked_ban_last_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_ranked_ban_last_duration_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_matchmaking_ranked_low_priority_last_duration;
        break;
      }
      
      // optional uint32 matchmaking_ranked_low_priority_last_duration = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_ranked_low_priority_last_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_ranked_low_priority_last_duration_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_matchmaking_casual_ban_expiration;
        break;
      }
      
      // optional uint32 matchmaking_casual_ban_expiration = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_casual_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_casual_ban_expiration_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_matchmaking_casual_low_priority_expiration;
        break;
      }
      
      // optional uint32 matchmaking_casual_low_priority_expiration = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_casual_low_priority_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_casual_low_priority_expiration_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_matchmaking_casual_ban_last_duration;
        break;
      }
      
      // optional uint32 matchmaking_casual_ban_last_duration = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_casual_ban_last_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_casual_ban_last_duration_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_matchmaking_casual_low_priority_last_duration;
        break;
      }
      
      // optional uint32 matchmaking_casual_low_priority_last_duration = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchmaking_casual_low_priority_last_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_casual_low_priority_last_duration_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_phone_identifying;
        break;
      }
      
      // optional bool phone_identifying = 31 [default = false];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_identifying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phone_identifying_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_backpack_slots(), output);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trial_account(), output);
  }
  
  // optional bool need_to_choose_most_helpful_friend = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->need_to_choose_most_helpful_friend(), output);
  }
  
  // optional bool in_coaches_list = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->in_coaches_list(), output);
  }
  
  // optional fixed32 trade_ban_expiration = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->trade_ban_expiration(), output);
  }
  
  // optional fixed32 duel_ban_expiration = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->duel_ban_expiration(), output);
  }
  
  // optional uint32 preview_item_def = 8 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preview_item_def(), output);
  }
  
  // optional uint32 matchmaking_ranked_ban_expiration = 18;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->matchmaking_ranked_ban_expiration(), output);
  }
  
  // optional bool phone_verified = 19 [default = false];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->phone_verified(), output);
  }
  
  // optional uint32 skill_rating_6v6 = 20;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->skill_rating_6v6(), output);
  }
  
  // optional uint32 skill_rating_9v9 = 21;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->skill_rating_9v9(), output);
  }
  
  // optional bool competitive_access = 23 [default = false];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->competitive_access(), output);
  }
  
  // optional uint32 matchmaking_ranked_low_priority_expiration = 24;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->matchmaking_ranked_low_priority_expiration(), output);
  }
  
  // optional uint32 matchmaking_ranked_ban_last_duration = 25;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->matchmaking_ranked_ban_last_duration(), output);
  }
  
  // optional uint32 matchmaking_ranked_low_priority_last_duration = 26;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->matchmaking_ranked_low_priority_last_duration(), output);
  }
  
  // optional uint32 matchmaking_casual_ban_expiration = 27;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->matchmaking_casual_ban_expiration(), output);
  }
  
  // optional uint32 matchmaking_casual_low_priority_expiration = 28;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->matchmaking_casual_low_priority_expiration(), output);
  }
  
  // optional uint32 matchmaking_casual_ban_last_duration = 29;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->matchmaking_casual_ban_last_duration(), output);
  }
  
  // optional uint32 matchmaking_casual_low_priority_last_duration = 30;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->matchmaking_casual_low_priority_last_duration(), output);
  }
  
  // optional bool phone_identifying = 31 [default = false];
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->phone_identifying(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconGameAccountClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_backpack_slots(), target);
  }
  
  // optional bool trial_account = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trial_account(), target);
  }
  
  // optional bool need_to_choose_most_helpful_friend = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->need_to_choose_most_helpful_friend(), target);
  }
  
  // optional bool in_coaches_list = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->in_coaches_list(), target);
  }
  
  // optional fixed32 trade_ban_expiration = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->trade_ban_expiration(), target);
  }
  
  // optional fixed32 duel_ban_expiration = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->duel_ban_expiration(), target);
  }
  
  // optional uint32 preview_item_def = 8 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->preview_item_def(), target);
  }
  
  // optional uint32 matchmaking_ranked_ban_expiration = 18;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->matchmaking_ranked_ban_expiration(), target);
  }
  
  // optional bool phone_verified = 19 [default = false];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->phone_verified(), target);
  }
  
  // optional uint32 skill_rating_6v6 = 20;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->skill_rating_6v6(), target);
  }
  
  // optional uint32 skill_rating_9v9 = 21;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->skill_rating_9v9(), target);
  }
  
  // optional bool competitive_access = 23 [default = false];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->competitive_access(), target);
  }
  
  // optional uint32 matchmaking_ranked_low_priority_expiration = 24;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->matchmaking_ranked_low_priority_expiration(), target);
  }
  
  // optional uint32 matchmaking_ranked_ban_last_duration = 25;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->matchmaking_ranked_ban_last_duration(), target);
  }
  
  // optional uint32 matchmaking_ranked_low_priority_last_duration = 26;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->matchmaking_ranked_low_priority_last_duration(), target);
  }
  
  // optional uint32 matchmaking_casual_ban_expiration = 27;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->matchmaking_casual_ban_expiration(), target);
  }
  
  // optional uint32 matchmaking_casual_low_priority_expiration = 28;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->matchmaking_casual_low_priority_expiration(), target);
  }
  
  // optional uint32 matchmaking_casual_ban_last_duration = 29;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->matchmaking_casual_ban_last_duration(), target);
  }
  
  // optional uint32 matchmaking_casual_low_priority_last_duration = 30;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->matchmaking_casual_low_priority_last_duration(), target);
  }
  
  // optional bool phone_identifying = 31 [default = false];
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->phone_identifying(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconGameAccountClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (has_additional_backpack_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_backpack_slots());
    }
    
    // optional bool trial_account = 2 [default = false];
    if (has_trial_account()) {
      total_size += 1 + 1;
    }
    
    // optional bool need_to_choose_most_helpful_friend = 4;
    if (has_need_to_choose_most_helpful_friend()) {
      total_size += 1 + 1;
    }
    
    // optional bool in_coaches_list = 5;
    if (has_in_coaches_list()) {
      total_size += 1 + 1;
    }
    
    // optional fixed32 trade_ban_expiration = 6;
    if (has_trade_ban_expiration()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 duel_ban_expiration = 7;
    if (has_duel_ban_expiration()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 preview_item_def = 8 [default = 0];
    if (has_preview_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preview_item_def());
    }
    
    // optional bool phone_verified = 19 [default = false];
    if (has_phone_verified()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 skill_rating_6v6 = 20;
    if (has_skill_rating_6v6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_rating_6v6());
    }
    
    // optional uint32 skill_rating_9v9 = 21;
    if (has_skill_rating_9v9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_rating_9v9());
    }
    
    // optional bool competitive_access = 23 [default = false];
    if (has_competitive_access()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 matchmaking_ranked_ban_expiration = 18;
    if (has_matchmaking_ranked_ban_expiration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_ranked_ban_expiration());
    }
    
    // optional uint32 matchmaking_ranked_low_priority_expiration = 24;
    if (has_matchmaking_ranked_low_priority_expiration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_ranked_low_priority_expiration());
    }
    
    // optional uint32 matchmaking_ranked_ban_last_duration = 25;
    if (has_matchmaking_ranked_ban_last_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_ranked_ban_last_duration());
    }
    
    // optional uint32 matchmaking_ranked_low_priority_last_duration = 26;
    if (has_matchmaking_ranked_low_priority_last_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_ranked_low_priority_last_duration());
    }
    
    // optional uint32 matchmaking_casual_ban_expiration = 27;
    if (has_matchmaking_casual_ban_expiration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_casual_ban_expiration());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 matchmaking_casual_low_priority_expiration = 28;
    if (has_matchmaking_casual_low_priority_expiration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_casual_low_priority_expiration());
    }
    
    // optional uint32 matchmaking_casual_ban_last_duration = 29;
    if (has_matchmaking_casual_ban_last_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_casual_ban_last_duration());
    }
    
    // optional uint32 matchmaking_casual_low_priority_last_duration = 30;
    if (has_matchmaking_casual_low_priority_last_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_casual_low_priority_last_duration());
    }
    
    // optional bool phone_identifying = 31 [default = false];
    if (has_phone_identifying()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconGameAccountClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconGameAccountClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconGameAccountClient::MergeFrom(const CSOEconGameAccountClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_additional_backpack_slots(from.additional_backpack_slots());
    }
    if (from._has_bit(1)) {
      set_trial_account(from.trial_account());
    }
    if (from._has_bit(2)) {
      set_need_to_choose_most_helpful_friend(from.need_to_choose_most_helpful_friend());
    }
    if (from._has_bit(3)) {
      set_in_coaches_list(from.in_coaches_list());
    }
    if (from._has_bit(4)) {
      set_trade_ban_expiration(from.trade_ban_expiration());
    }
    if (from._has_bit(5)) {
      set_duel_ban_expiration(from.duel_ban_expiration());
    }
    if (from._has_bit(6)) {
      set_preview_item_def(from.preview_item_def());
    }
    if (from._has_bit(7)) {
      set_phone_verified(from.phone_verified());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_skill_rating_6v6(from.skill_rating_6v6());
    }
    if (from._has_bit(9)) {
      set_skill_rating_9v9(from.skill_rating_9v9());
    }
    if (from._has_bit(10)) {
      set_competitive_access(from.competitive_access());
    }
    if (from._has_bit(11)) {
      set_matchmaking_ranked_ban_expiration(from.matchmaking_ranked_ban_expiration());
    }
    if (from._has_bit(12)) {
      set_matchmaking_ranked_low_priority_expiration(from.matchmaking_ranked_low_priority_expiration());
    }
    if (from._has_bit(13)) {
      set_matchmaking_ranked_ban_last_duration(from.matchmaking_ranked_ban_last_duration());
    }
    if (from._has_bit(14)) {
      set_matchmaking_ranked_low_priority_last_duration(from.matchmaking_ranked_low_priority_last_duration());
    }
    if (from._has_bit(15)) {
      set_matchmaking_casual_ban_expiration(from.matchmaking_casual_ban_expiration());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_matchmaking_casual_low_priority_expiration(from.matchmaking_casual_low_priority_expiration());
    }
    if (from._has_bit(17)) {
      set_matchmaking_casual_ban_last_duration(from.matchmaking_casual_ban_last_duration());
    }
    if (from._has_bit(18)) {
      set_matchmaking_casual_low_priority_last_duration(from.matchmaking_casual_low_priority_last_duration());
    }
    if (from._has_bit(19)) {
      set_phone_identifying(from.phone_identifying());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  
  return true;
}

void CSOEconGameAccountClient::Swap(CSOEconGameAccountClient* other) {
  if (other != this) {
    std::swap(additional_backpack_slots_, other->additional_backpack_slots_);
    std::swap(trial_account_, other->trial_account_);
    std::swap(need_to_choose_most_helpful_friend_, other->need_to_choose_most_helpful_friend_);
    std::swap(in_coaches_list_, other->in_coaches_list_);
    std::swap(trade_ban_expiration_, other->trade_ban_expiration_);
    std::swap(duel_ban_expiration_, other->duel_ban_expiration_);
    std::swap(preview_item_def_, other->preview_item_def_);
    std::swap(phone_verified_, other->phone_verified_);
    std::swap(skill_rating_6v6_, other->skill_rating_6v6_);
    std::swap(skill_rating_9v9_, other->skill_rating_9v9_);
    std::swap(competitive_access_, other->competitive_access_);
    std::swap(matchmaking_ranked_ban_expiration_, other->matchmaking_ranked_ban_expiration_);
    std::swap(matchmaking_ranked_low_priority_expiration_, other->matchmaking_ranked_low_priority_expiration_);
    std::swap(matchmaking_ranked_ban_last_duration_, other->matchmaking_ranked_ban_last_duration_);
    std::swap(matchmaking_ranked_low_priority_last_duration_, other->matchmaking_ranked_low_priority_last_duration_);
    std::swap(matchmaking_casual_ban_expiration_, other->matchmaking_casual_ban_expiration_);
    std::swap(matchmaking_casual_low_priority_expiration_, other->matchmaking_casual_low_priority_expiration_);
    std::swap(matchmaking_casual_ban_last_duration_, other->matchmaking_casual_ban_last_duration_);
    std::swap(matchmaking_casual_low_priority_last_duration_, other->matchmaking_casual_low_priority_last_duration_);
    std::swap(phone_identifying_, other->phone_identifying_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconGameAccountClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconGameAccountClient_descriptor_;
  metadata.reflection = CSOEconGameAccountClient_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOItemCriteriaCondition::_default_field_;
const ::std::string CSOItemCriteriaCondition::_default_string_value_;
#ifndef _MSC_VER
const int CSOItemCriteriaCondition::kOpFieldNumber;
const int CSOItemCriteriaCondition::kFieldFieldNumber;
const int CSOItemCriteriaCondition::kRequiredFieldNumber;
const int CSOItemCriteriaCondition::kFloatValueFieldNumber;
const int CSOItemCriteriaCondition::kStringValueFieldNumber;
#endif  // !_MSC_VER

CSOItemCriteriaCondition::CSOItemCriteriaCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemCriteriaCondition::InitAsDefaultInstance() {
}

CSOItemCriteriaCondition::CSOItemCriteriaCondition(const CSOItemCriteriaCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  field_ = const_cast< ::std::string*>(&_default_field_);
  required_ = false;
  float_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&_default_string_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemCriteriaCondition::~CSOItemCriteriaCondition() {
  SharedDtor();
}

void CSOItemCriteriaCondition::SharedDtor() {
  if (field_ != &_default_field_) {
    delete field_;
  }
  if (string_value_ != &_default_string_value_) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void CSOItemCriteriaCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteriaCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemCriteriaCondition_descriptor_;
}

const CSOItemCriteriaCondition& CSOItemCriteriaCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemCriteriaCondition* CSOItemCriteriaCondition::default_instance_ = NULL;

CSOItemCriteriaCondition* CSOItemCriteriaCondition::New() const {
  return new CSOItemCriteriaCondition;
}

void CSOItemCriteriaCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    if (_has_bit(1)) {
      if (field_ != &_default_field_) {
        field_->clear();
      }
    }
    required_ = false;
    float_value_ = 0;
    if (_has_bit(4)) {
      if (string_value_ != &_default_string_value_) {
        string_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemCriteriaCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }
      
      // optional string field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required;
        break;
      }
      
      // optional bool required = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_float_value;
        break;
      }
      
      // optional float float_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemCriteriaCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }
  
  // optional string field = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field(), output);
  }
  
  // optional bool required = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->required(), output);
  }
  
  // optional float float_value = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }
  
  // optional string string_value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->string_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemCriteriaCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }
  
  // optional string field = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }
  
  // optional bool required = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->required(), target);
  }
  
  // optional float float_value = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }
  
  // optional string string_value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemCriteriaCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }
    
    // optional string field = 2;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }
    
    // optional bool required = 3;
    if (has_required()) {
      total_size += 1 + 1;
    }
    
    // optional float float_value = 4;
    if (has_float_value()) {
      total_size += 1 + 4;
    }
    
    // optional string string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteriaCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemCriteriaCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemCriteriaCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemCriteriaCondition::MergeFrom(const CSOItemCriteriaCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_op(from.op());
    }
    if (from._has_bit(1)) {
      set_field(from.field());
    }
    if (from._has_bit(2)) {
      set_required(from.required());
    }
    if (from._has_bit(3)) {
      set_float_value(from.float_value());
    }
    if (from._has_bit(4)) {
      set_string_value(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemCriteriaCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::CopyFrom(const CSOItemCriteriaCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteriaCondition::IsInitialized() const {
  
  return true;
}

void CSOItemCriteriaCondition::Swap(CSOItemCriteriaCondition* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(field_, other->field_);
    std::swap(required_, other->required_);
    std::swap(float_value_, other->float_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemCriteriaCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemCriteriaCondition_descriptor_;
  metadata.reflection = CSOItemCriteriaCondition_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOItemCriteria::_default_tags_;
#ifndef _MSC_VER
const int CSOItemCriteria::kItemLevelFieldNumber;
const int CSOItemCriteria::kItemQualityFieldNumber;
const int CSOItemCriteria::kItemLevelSetFieldNumber;
const int CSOItemCriteria::kItemQualitySetFieldNumber;
const int CSOItemCriteria::kInitialInventoryFieldNumber;
const int CSOItemCriteria::kInitialQuantityFieldNumber;
const int CSOItemCriteria::kIgnoreEnabledFlagFieldNumber;
const int CSOItemCriteria::kConditionsFieldNumber;
const int CSOItemCriteria::kRecentOnlyFieldNumber;
const int CSOItemCriteria::kTagsFieldNumber;
#endif  // !_MSC_VER

CSOItemCriteria::CSOItemCriteria()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemCriteria::InitAsDefaultInstance() {
}

CSOItemCriteria::CSOItemCriteria(const CSOItemCriteria& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemCriteria::SharedCtor() {
  _cached_size_ = 0;
  item_level_ = 0u;
  item_quality_ = 0;
  item_level_set_ = false;
  item_quality_set_ = false;
  initial_inventory_ = 0u;
  initial_quantity_ = 0u;
  ignore_enabled_flag_ = false;
  recent_only_ = false;
  tags_ = const_cast< ::std::string*>(&_default_tags_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemCriteria::~CSOItemCriteria() {
  SharedDtor();
}

void CSOItemCriteria::SharedDtor() {
  if (tags_ != &_default_tags_) {
    delete tags_;
  }
  if (this != default_instance_) {
  }
}

void CSOItemCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemCriteria_descriptor_;
}

const CSOItemCriteria& CSOItemCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemCriteria* CSOItemCriteria::default_instance_ = NULL;

CSOItemCriteria* CSOItemCriteria::New() const {
  return new CSOItemCriteria;
}

void CSOItemCriteria::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_level_ = 0u;
    item_quality_ = 0;
    item_level_set_ = false;
    item_quality_set_ = false;
    initial_inventory_ = 0u;
    initial_quantity_ = 0u;
    ignore_enabled_flag_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    recent_only_ = false;
    if (_has_bit(9)) {
      if (tags_ != &_default_tags_) {
        tags_->clear();
      }
    }
  }
  conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }
      
      // optional int32 item_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_quality_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_level_set;
        break;
      }
      
      // optional bool item_level_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_level_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_level_set_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_quality_set;
        break;
      }
      
      // optional bool item_quality_set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_quality_set_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initial_inventory;
        break;
      }
      
      // optional uint32 initial_inventory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_inventory_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_initial_quantity;
        break;
      }
      
      // optional uint32 initial_quantity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_quantity_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ignore_enabled_flag;
        break;
      }
      
      // optional bool ignore_enabled_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_enabled_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_enabled_flag_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_conditions;
        break;
      }
      
      // repeated .CSOItemCriteriaCondition conditions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_conditions;
        if (input->ExpectTag(80)) goto parse_recent_only;
        break;
      }
      
      // optional bool recent_only = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recent_only_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }
      
      // optional string tags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_level(), output);
  }
  
  // optional int32 item_quality = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_quality(), output);
  }
  
  // optional bool item_level_set = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->item_level_set(), output);
  }
  
  // optional bool item_quality_set = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->item_quality_set(), output);
  }
  
  // optional uint32 initial_inventory = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initial_inventory(), output);
  }
  
  // optional uint32 initial_quantity = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->initial_quantity(), output);
  }
  
  // optional bool ignore_enabled_flag = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ignore_enabled_flag(), output);
  }
  
  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (int i = 0; i < this->conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->conditions(i), output);
  }
  
  // optional bool recent_only = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->recent_only(), output);
  }
  
  // optional string tags = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->tags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_level(), target);
  }
  
  // optional int32 item_quality = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_quality(), target);
  }
  
  // optional bool item_level_set = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->item_level_set(), target);
  }
  
  // optional bool item_quality_set = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->item_quality_set(), target);
  }
  
  // optional uint32 initial_inventory = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initial_inventory(), target);
  }
  
  // optional uint32 initial_quantity = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->initial_quantity(), target);
  }
  
  // optional bool ignore_enabled_flag = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ignore_enabled_flag(), target);
  }
  
  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (int i = 0; i < this->conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->conditions(i), target);
  }
  
  // optional bool recent_only = 10;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->recent_only(), target);
  }
  
  // optional string tags = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemCriteria::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_level = 1;
    if (has_item_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }
    
    // optional int32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_quality());
    }
    
    // optional bool item_level_set = 3;
    if (has_item_level_set()) {
      total_size += 1 + 1;
    }
    
    // optional bool item_quality_set = 4;
    if (has_item_quality_set()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 initial_inventory = 5;
    if (has_initial_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_inventory());
    }
    
    // optional uint32 initial_quantity = 6;
    if (has_initial_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_quantity());
    }
    
    // optional bool ignore_enabled_flag = 8;
    if (has_ignore_enabled_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool recent_only = 10;
    if (has_recent_only()) {
      total_size += 1 + 1;
    }
    
    // optional string tags = 11;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
  }
  // repeated .CSOItemCriteriaCondition conditions = 9;
  total_size += 1 * this->conditions_size();
  for (int i = 0; i < this->conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conditions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemCriteria* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemCriteria*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemCriteria::MergeFrom(const CSOItemCriteria& from) {
  GOOGLE_CHECK_NE(&from, this);
  conditions_.MergeFrom(from.conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_level(from.item_level());
    }
    if (from._has_bit(1)) {
      set_item_quality(from.item_quality());
    }
    if (from._has_bit(2)) {
      set_item_level_set(from.item_level_set());
    }
    if (from._has_bit(3)) {
      set_item_quality_set(from.item_quality_set());
    }
    if (from._has_bit(4)) {
      set_initial_inventory(from.initial_inventory());
    }
    if (from._has_bit(5)) {
      set_initial_quantity(from.initial_quantity());
    }
    if (from._has_bit(6)) {
      set_ignore_enabled_flag(from.ignore_enabled_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_recent_only(from.recent_only());
    }
    if (from._has_bit(9)) {
      set_tags(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteria::CopyFrom(const CSOItemCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteria::IsInitialized() const {
  
  return true;
}

void CSOItemCriteria::Swap(CSOItemCriteria* other) {
  if (other != this) {
    std::swap(item_level_, other->item_level_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(item_level_set_, other->item_level_set_);
    std::swap(item_quality_set_, other->item_quality_set_);
    std::swap(initial_inventory_, other->initial_inventory_);
    std::swap(initial_quantity_, other->initial_quantity_);
    std::swap(ignore_enabled_flag_, other->ignore_enabled_flag_);
    conditions_.Swap(&other->conditions_);
    std::swap(recent_only_, other->recent_only_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemCriteria_descriptor_;
  metadata.reflection = CSOItemCriteria_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOItemRecipe::_default_name_;
const ::std::string CSOItemRecipe::_default_n_a_;
const ::std::string CSOItemRecipe::_default_desc_inputs_;
const ::std::string CSOItemRecipe::_default_desc_outputs_;
const ::std::string CSOItemRecipe::_default_di_a_;
const ::std::string CSOItemRecipe::_default_di_b_;
const ::std::string CSOItemRecipe::_default_di_c_;
const ::std::string CSOItemRecipe::_default_do_a_;
const ::std::string CSOItemRecipe::_default_do_b_;
const ::std::string CSOItemRecipe::_default_do_c_;
#ifndef _MSC_VER
const int CSOItemRecipe::kDefIndexFieldNumber;
const int CSOItemRecipe::kNameFieldNumber;
const int CSOItemRecipe::kNAFieldNumber;
const int CSOItemRecipe::kDescInputsFieldNumber;
const int CSOItemRecipe::kDescOutputsFieldNumber;
const int CSOItemRecipe::kDiAFieldNumber;
const int CSOItemRecipe::kDiBFieldNumber;
const int CSOItemRecipe::kDiCFieldNumber;
const int CSOItemRecipe::kDoAFieldNumber;
const int CSOItemRecipe::kDoBFieldNumber;
const int CSOItemRecipe::kDoCFieldNumber;
const int CSOItemRecipe::kRequiresAllSameClassFieldNumber;
const int CSOItemRecipe::kRequiresAllSameSlotFieldNumber;
const int CSOItemRecipe::kClassUsageForOutputFieldNumber;
const int CSOItemRecipe::kSlotUsageForOutputFieldNumber;
const int CSOItemRecipe::kSetForOutputFieldNumber;
const int CSOItemRecipe::kInputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kOutputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kInputItemDupeCountsFieldNumber;
#endif  // !_MSC_VER

CSOItemRecipe::CSOItemRecipe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOItemRecipe::InitAsDefaultInstance() {
}

CSOItemRecipe::CSOItemRecipe(const CSOItemRecipe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOItemRecipe::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  n_a_ = const_cast< ::std::string*>(&_default_n_a_);
  desc_inputs_ = const_cast< ::std::string*>(&_default_desc_inputs_);
  desc_outputs_ = const_cast< ::std::string*>(&_default_desc_outputs_);
  di_a_ = const_cast< ::std::string*>(&_default_di_a_);
  di_b_ = const_cast< ::std::string*>(&_default_di_b_);
  di_c_ = const_cast< ::std::string*>(&_default_di_c_);
  do_a_ = const_cast< ::std::string*>(&_default_do_a_);
  do_b_ = const_cast< ::std::string*>(&_default_do_b_);
  do_c_ = const_cast< ::std::string*>(&_default_do_c_);
  requires_all_same_class_ = false;
  requires_all_same_slot_ = false;
  class_usage_for_output_ = 0;
  slot_usage_for_output_ = 0;
  set_for_output_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOItemRecipe::~CSOItemRecipe() {
  SharedDtor();
}

void CSOItemRecipe::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (n_a_ != &_default_n_a_) {
    delete n_a_;
  }
  if (desc_inputs_ != &_default_desc_inputs_) {
    delete desc_inputs_;
  }
  if (desc_outputs_ != &_default_desc_outputs_) {
    delete desc_outputs_;
  }
  if (di_a_ != &_default_di_a_) {
    delete di_a_;
  }
  if (di_b_ != &_default_di_b_) {
    delete di_b_;
  }
  if (di_c_ != &_default_di_c_) {
    delete di_c_;
  }
  if (do_a_ != &_default_do_a_) {
    delete do_a_;
  }
  if (do_b_ != &_default_do_b_) {
    delete do_b_;
  }
  if (do_c_ != &_default_do_c_) {
    delete do_c_;
  }
  if (this != default_instance_) {
  }
}

void CSOItemRecipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOItemRecipe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOItemRecipe_descriptor_;
}

const CSOItemRecipe& CSOItemRecipe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOItemRecipe* CSOItemRecipe::default_instance_ = NULL;

CSOItemRecipe* CSOItemRecipe::New() const {
  return new CSOItemRecipe;
}

void CSOItemRecipe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (n_a_ != &_default_n_a_) {
        n_a_->clear();
      }
    }
    if (_has_bit(3)) {
      if (desc_inputs_ != &_default_desc_inputs_) {
        desc_inputs_->clear();
      }
    }
    if (_has_bit(4)) {
      if (desc_outputs_ != &_default_desc_outputs_) {
        desc_outputs_->clear();
      }
    }
    if (_has_bit(5)) {
      if (di_a_ != &_default_di_a_) {
        di_a_->clear();
      }
    }
    if (_has_bit(6)) {
      if (di_b_ != &_default_di_b_) {
        di_b_->clear();
      }
    }
    if (_has_bit(7)) {
      if (di_c_ != &_default_di_c_) {
        di_c_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (do_a_ != &_default_do_a_) {
        do_a_->clear();
      }
    }
    if (_has_bit(9)) {
      if (do_b_ != &_default_do_b_) {
        do_b_->clear();
      }
    }
    if (_has_bit(10)) {
      if (do_c_ != &_default_do_c_) {
        do_c_->clear();
      }
    }
    requires_all_same_class_ = false;
    requires_all_same_slot_ = false;
    class_usage_for_output_ = 0;
    slot_usage_for_output_ = 0;
    set_for_output_ = 0;
  }
  input_items_criteria_.Clear();
  output_items_criteria_.Clear();
  input_item_dupe_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOItemRecipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_n_a;
        break;
      }
      
      // optional string n_a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_n_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->n_a().data(), this->n_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc_inputs;
        break;
      }
      
      // optional string desc_inputs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_inputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_inputs().data(), this->desc_inputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc_outputs;
        break;
      }
      
      // optional string desc_outputs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_outputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_outputs().data(), this->desc_outputs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_di_a;
        break;
      }
      
      // optional string di_a = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_a().data(), this->di_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_di_b;
        break;
      }
      
      // optional string di_b = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_b().data(), this->di_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_di_c;
        break;
      }
      
      // optional string di_c = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->di_c().data(), this->di_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_do_a;
        break;
      }
      
      // optional string do_a = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_a().data(), this->do_a().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_do_b;
        break;
      }
      
      // optional string do_b = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_b().data(), this->do_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_do_c;
        break;
      }
      
      // optional string do_c = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->do_c().data(), this->do_c().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_requires_all_same_class;
        break;
      }
      
      // optional bool requires_all_same_class = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_all_same_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_class_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_requires_all_same_slot;
        break;
      }
      
      // optional bool requires_all_same_slot = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_all_same_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_slot_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_class_usage_for_output;
        break;
      }
      
      // optional int32 class_usage_for_output = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_usage_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_usage_for_output_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_slot_usage_for_output;
        break;
      }
      
      // optional int32 slot_usage_for_output = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_usage_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_usage_for_output_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_set_for_output;
        break;
      }
      
      // optional int32 set_for_output = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_for_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_for_output_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_input_items_criteria;
        break;
      }
      
      // repeated .CSOItemCriteria input_items_criteria = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_items_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_items_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_input_items_criteria;
        if (input->ExpectTag(170)) goto parse_output_items_criteria;
        break;
      }
      
      // repeated .CSOItemCriteria output_items_criteria = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_items_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_items_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_output_items_criteria;
        if (input->ExpectTag(176)) goto parse_input_item_dupe_counts;
        break;
      }
      
      // repeated uint32 input_item_dupe_counts = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_item_dupe_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_input_item_dupe_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_input_item_dupe_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_input_item_dupe_counts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOItemRecipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string n_a = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->n_a(), output);
  }
  
  // optional string desc_inputs = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc_inputs(), output);
  }
  
  // optional string desc_outputs = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc_outputs(), output);
  }
  
  // optional string di_a = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->di_a(), output);
  }
  
  // optional string di_b = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->di_b(), output);
  }
  
  // optional string di_c = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->di_c(), output);
  }
  
  // optional string do_a = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->do_a(), output);
  }
  
  // optional string do_b = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->do_b(), output);
  }
  
  // optional string do_c = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->do_c(), output);
  }
  
  // optional bool requires_all_same_class = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->requires_all_same_class(), output);
  }
  
  // optional bool requires_all_same_slot = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->requires_all_same_slot(), output);
  }
  
  // optional int32 class_usage_for_output = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->class_usage_for_output(), output);
  }
  
  // optional int32 slot_usage_for_output = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->slot_usage_for_output(), output);
  }
  
  // optional int32 set_for_output = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->set_for_output(), output);
  }
  
  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->input_items_criteria(i), output);
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->output_items_criteria(i), output);
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->input_item_dupe_counts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOItemRecipe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string n_a = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n_a().data(), this->n_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->n_a(), target);
  }
  
  // optional string desc_inputs = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_inputs().data(), this->desc_inputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc_inputs(), target);
  }
  
  // optional string desc_outputs = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_outputs().data(), this->desc_outputs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc_outputs(), target);
  }
  
  // optional string di_a = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_a().data(), this->di_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->di_a(), target);
  }
  
  // optional string di_b = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_b().data(), this->di_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->di_b(), target);
  }
  
  // optional string di_c = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->di_c().data(), this->di_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->di_c(), target);
  }
  
  // optional string do_a = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_a().data(), this->do_a().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->do_a(), target);
  }
  
  // optional string do_b = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_b().data(), this->do_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->do_b(), target);
  }
  
  // optional string do_c = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->do_c().data(), this->do_c().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->do_c(), target);
  }
  
  // optional bool requires_all_same_class = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->requires_all_same_class(), target);
  }
  
  // optional bool requires_all_same_slot = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->requires_all_same_slot(), target);
  }
  
  // optional int32 class_usage_for_output = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->class_usage_for_output(), target);
  }
  
  // optional int32 slot_usage_for_output = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->slot_usage_for_output(), target);
  }
  
  // optional int32 set_for_output = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->set_for_output(), target);
  }
  
  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->input_items_criteria(i), target);
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->output_items_criteria(i), target);
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->input_item_dupe_counts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOItemRecipe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string n_a = 3;
    if (has_n_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->n_a());
    }
    
    // optional string desc_inputs = 4;
    if (has_desc_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_inputs());
    }
    
    // optional string desc_outputs = 5;
    if (has_desc_outputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_outputs());
    }
    
    // optional string di_a = 6;
    if (has_di_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_a());
    }
    
    // optional string di_b = 7;
    if (has_di_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_b());
    }
    
    // optional string di_c = 8;
    if (has_di_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_c());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string do_a = 9;
    if (has_do_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_a());
    }
    
    // optional string do_b = 10;
    if (has_do_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_b());
    }
    
    // optional string do_c = 11;
    if (has_do_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_c());
    }
    
    // optional bool requires_all_same_class = 12;
    if (has_requires_all_same_class()) {
      total_size += 1 + 1;
    }
    
    // optional bool requires_all_same_slot = 13;
    if (has_requires_all_same_slot()) {
      total_size += 1 + 1;
    }
    
    // optional int32 class_usage_for_output = 14;
    if (has_class_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_usage_for_output());
    }
    
    // optional int32 slot_usage_for_output = 15;
    if (has_slot_usage_for_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_usage_for_output());
    }
    
    // optional int32 set_for_output = 16;
    if (has_set_for_output()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_for_output());
    }
    
  }
  // repeated .CSOItemCriteria input_items_criteria = 20;
  total_size += 2 * this->input_items_criteria_size();
  for (int i = 0; i < this->input_items_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_items_criteria(i));
  }
  
  // repeated .CSOItemCriteria output_items_criteria = 21;
  total_size += 2 * this->output_items_criteria_size();
  for (int i = 0; i < this->output_items_criteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_items_criteria(i));
  }
  
  // repeated uint32 input_item_dupe_counts = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_item_dupe_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->input_item_dupe_counts(i));
    }
    total_size += 2 * this->input_item_dupe_counts_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOItemRecipe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOItemRecipe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOItemRecipe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOItemRecipe::MergeFrom(const CSOItemRecipe& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_items_criteria_.MergeFrom(from.input_items_criteria_);
  output_items_criteria_.MergeFrom(from.output_items_criteria_);
  input_item_dupe_counts_.MergeFrom(from.input_item_dupe_counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_def_index(from.def_index());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_n_a(from.n_a());
    }
    if (from._has_bit(3)) {
      set_desc_inputs(from.desc_inputs());
    }
    if (from._has_bit(4)) {
      set_desc_outputs(from.desc_outputs());
    }
    if (from._has_bit(5)) {
      set_di_a(from.di_a());
    }
    if (from._has_bit(6)) {
      set_di_b(from.di_b());
    }
    if (from._has_bit(7)) {
      set_di_c(from.di_c());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_do_a(from.do_a());
    }
    if (from._has_bit(9)) {
      set_do_b(from.do_b());
    }
    if (from._has_bit(10)) {
      set_do_c(from.do_c());
    }
    if (from._has_bit(11)) {
      set_requires_all_same_class(from.requires_all_same_class());
    }
    if (from._has_bit(12)) {
      set_requires_all_same_slot(from.requires_all_same_slot());
    }
    if (from._has_bit(13)) {
      set_class_usage_for_output(from.class_usage_for_output());
    }
    if (from._has_bit(14)) {
      set_slot_usage_for_output(from.slot_usage_for_output());
    }
    if (from._has_bit(15)) {
      set_set_for_output(from.set_for_output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOItemRecipe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemRecipe::CopyFrom(const CSOItemRecipe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemRecipe::IsInitialized() const {
  
  return true;
}

void CSOItemRecipe::Swap(CSOItemRecipe* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(name_, other->name_);
    std::swap(n_a_, other->n_a_);
    std::swap(desc_inputs_, other->desc_inputs_);
    std::swap(desc_outputs_, other->desc_outputs_);
    std::swap(di_a_, other->di_a_);
    std::swap(di_b_, other->di_b_);
    std::swap(di_c_, other->di_c_);
    std::swap(do_a_, other->do_a_);
    std::swap(do_b_, other->do_b_);
    std::swap(do_c_, other->do_c_);
    std::swap(requires_all_same_class_, other->requires_all_same_class_);
    std::swap(requires_all_same_slot_, other->requires_all_same_slot_);
    std::swap(class_usage_for_output_, other->class_usage_for_output_);
    std::swap(slot_usage_for_output_, other->slot_usage_for_output_);
    std::swap(set_for_output_, other->set_for_output_);
    input_items_criteria_.Swap(&other->input_items_criteria_);
    output_items_criteria_.Swap(&other->output_items_criteria_);
    input_item_dupe_counts_.Swap(&other->input_item_dupe_counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOItemRecipe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOItemRecipe_descriptor_;
  metadata.reflection = CSOItemRecipe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDevNewItemRequest::kReceiverFieldNumber;
const int CMsgDevNewItemRequest::kCriteriaFieldNumber;
#endif  // !_MSC_VER

CMsgDevNewItemRequest::CMsgDevNewItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDevNewItemRequest::InitAsDefaultInstance() {
  criteria_ = const_cast< ::CSOItemCriteria*>(&::CSOItemCriteria::default_instance());
}

CMsgDevNewItemRequest::CMsgDevNewItemRequest(const CMsgDevNewItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDevNewItemRequest::SharedCtor() {
  _cached_size_ = 0;
  receiver_ = GOOGLE_ULONGLONG(0);
  criteria_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDevNewItemRequest::~CMsgDevNewItemRequest() {
  SharedDtor();
}

void CMsgDevNewItemRequest::SharedDtor() {
  if (this != default_instance_) {
    delete criteria_;
  }
}

void CMsgDevNewItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDevNewItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDevNewItemRequest_descriptor_;
}

const CMsgDevNewItemRequest& CMsgDevNewItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgDevNewItemRequest* CMsgDevNewItemRequest::default_instance_ = NULL;

CMsgDevNewItemRequest* CMsgDevNewItemRequest::New() const {
  return new CMsgDevNewItemRequest;
}

void CMsgDevNewItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    receiver_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (criteria_ != NULL) criteria_->::CSOItemCriteria::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDevNewItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 receiver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_criteria;
        break;
      }
      
      // optional .CSOItemCriteria criteria = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_criteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDevNewItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 receiver = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->receiver(), output);
  }
  
  // optional .CSOItemCriteria criteria = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->criteria(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDevNewItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 receiver = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->receiver(), target);
  }
  
  // optional .CSOItemCriteria criteria = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->criteria(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDevNewItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 receiver = 1;
    if (has_receiver()) {
      total_size += 1 + 8;
    }
    
    // optional .CSOItemCriteria criteria = 2;
    if (has_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->criteria());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDevNewItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDevNewItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDevNewItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDevNewItemRequest::MergeFrom(const CMsgDevNewItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_receiver(from.receiver());
    }
    if (from._has_bit(1)) {
      mutable_criteria()->::CSOItemCriteria::MergeFrom(from.criteria());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDevNewItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevNewItemRequest::CopyFrom(const CMsgDevNewItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequest::IsInitialized() const {
  
  return true;
}

void CMsgDevNewItemRequest::Swap(CMsgDevNewItemRequest* other) {
  if (other != this) {
    std::swap(receiver_, other->receiver_);
    std::swap(criteria_, other->criteria_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDevNewItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDevNewItemRequest_descriptor_;
  metadata.reflection = CMsgDevNewItemRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgDevDebugRollLootRequest::_default_loot_list_name_;
#ifndef _MSC_VER
const int CMsgDevDebugRollLootRequest::kReceiverFieldNumber;
const int CMsgDevDebugRollLootRequest::kLootListNameFieldNumber;
#endif  // !_MSC_VER

CMsgDevDebugRollLootRequest::CMsgDevDebugRollLootRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDevDebugRollLootRequest::InitAsDefaultInstance() {
}

CMsgDevDebugRollLootRequest::CMsgDevDebugRollLootRequest(const CMsgDevDebugRollLootRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDevDebugRollLootRequest::SharedCtor() {
  _cached_size_ = 0;
  receiver_ = GOOGLE_ULONGLONG(0);
  loot_list_name_ = const_cast< ::std::string*>(&_default_loot_list_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDevDebugRollLootRequest::~CMsgDevDebugRollLootRequest() {
  SharedDtor();
}

void CMsgDevDebugRollLootRequest::SharedDtor() {
  if (loot_list_name_ != &_default_loot_list_name_) {
    delete loot_list_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDevDebugRollLootRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDevDebugRollLootRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDevDebugRollLootRequest_descriptor_;
}

const CMsgDevDebugRollLootRequest& CMsgDevDebugRollLootRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgDevDebugRollLootRequest* CMsgDevDebugRollLootRequest::default_instance_ = NULL;

CMsgDevDebugRollLootRequest* CMsgDevDebugRollLootRequest::New() const {
  return new CMsgDevDebugRollLootRequest;
}

void CMsgDevDebugRollLootRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    receiver_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (loot_list_name_ != &_default_loot_list_name_) {
        loot_list_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDevDebugRollLootRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 receiver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loot_list_name;
        break;
      }
      
      // optional string loot_list_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loot_list_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_list_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loot_list_name().data(), this->loot_list_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDevDebugRollLootRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 receiver = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->receiver(), output);
  }
  
  // optional string loot_list_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loot_list_name().data(), this->loot_list_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->loot_list_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDevDebugRollLootRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 receiver = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->receiver(), target);
  }
  
  // optional string loot_list_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loot_list_name().data(), this->loot_list_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loot_list_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDevDebugRollLootRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 receiver = 1;
    if (has_receiver()) {
      total_size += 1 + 8;
    }
    
    // optional string loot_list_name = 2;
    if (has_loot_list_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_list_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDevDebugRollLootRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDevDebugRollLootRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDevDebugRollLootRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDevDebugRollLootRequest::MergeFrom(const CMsgDevDebugRollLootRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_receiver(from.receiver());
    }
    if (from._has_bit(1)) {
      set_loot_list_name(from.loot_list_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDevDebugRollLootRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevDebugRollLootRequest::CopyFrom(const CMsgDevDebugRollLootRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevDebugRollLootRequest::IsInitialized() const {
  
  return true;
}

void CMsgDevDebugRollLootRequest::Swap(CMsgDevDebugRollLootRequest* other) {
  if (other != this) {
    std::swap(receiver_, other->receiver_);
    std::swap(loot_list_name_, other->loot_list_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDevDebugRollLootRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDevDebugRollLootRequest_descriptor_;
  metadata.reflection = CMsgDevDebugRollLootRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgIncrementKillCountAttribute::kKillerSteamIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kVictimSteamIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kItemIdFieldNumber;
const int CMsgIncrementKillCountAttribute::kEventTypeFieldNumber;
const int CMsgIncrementKillCountAttribute::kIncrementValueFieldNumber;
#endif  // !_MSC_VER

CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgIncrementKillCountAttribute::InitAsDefaultInstance() {
}

CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute(const CMsgIncrementKillCountAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute::SharedCtor() {
  _cached_size_ = 0;
  killer_steam_id_ = GOOGLE_ULONGLONG(0);
  victim_steam_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  event_type_ = 0u;
  increment_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgIncrementKillCountAttribute::~CMsgIncrementKillCountAttribute() {
  SharedDtor();
}

void CMsgIncrementKillCountAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgIncrementKillCountAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgIncrementKillCountAttribute_descriptor_;
}

const CMsgIncrementKillCountAttribute& CMsgIncrementKillCountAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgIncrementKillCountAttribute* CMsgIncrementKillCountAttribute::default_instance_ = NULL;

CMsgIncrementKillCountAttribute* CMsgIncrementKillCountAttribute::New() const {
  return new CMsgIncrementKillCountAttribute;
}

void CMsgIncrementKillCountAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killer_steam_id_ = GOOGLE_ULONGLONG(0);
    victim_steam_id_ = GOOGLE_ULONGLONG(0);
    item_id_ = GOOGLE_ULONGLONG(0);
    event_type_ = 0u;
    increment_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgIncrementKillCountAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 killer_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killer_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_victim_steam_id;
        break;
      }
      
      // optional uint64 victim_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victim_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &victim_steam_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_type;
        break;
      }
      
      // optional uint32 event_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_increment_value;
        break;
      }
      
      // optional uint32 increment_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increment_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &increment_value_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgIncrementKillCountAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 killer_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->killer_steam_id(), output);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->victim_steam_id(), output);
  }
  
  // optional uint64 item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }
  
  // optional uint32 event_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_type(), output);
  }
  
  // optional uint32 increment_value = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->increment_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgIncrementKillCountAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 killer_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->killer_steam_id(), target);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->victim_steam_id(), target);
  }
  
  // optional uint64 item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }
  
  // optional uint32 event_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_type(), target);
  }
  
  // optional uint32 increment_value = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->increment_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgIncrementKillCountAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 killer_steam_id = 1;
    if (has_killer_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killer_steam_id());
    }
    
    // optional uint64 victim_steam_id = 2;
    if (has_victim_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->victim_steam_id());
    }
    
    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 event_type = 4;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }
    
    // optional uint32 increment_value = 5;
    if (has_increment_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->increment_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgIncrementKillCountAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgIncrementKillCountAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgIncrementKillCountAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgIncrementKillCountAttribute::MergeFrom(const CMsgIncrementKillCountAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_killer_steam_id(from.killer_steam_id());
    }
    if (from._has_bit(1)) {
      set_victim_steam_id(from.victim_steam_id());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(3)) {
      set_event_type(from.event_type());
    }
    if (from._has_bit(4)) {
      set_increment_value(from.increment_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgIncrementKillCountAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute::CopyFrom(const CMsgIncrementKillCountAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgIncrementKillCountAttribute::IsInitialized() const {
  
  return true;
}

void CMsgIncrementKillCountAttribute::Swap(CMsgIncrementKillCountAttribute* other) {
  if (other != this) {
    std::swap(killer_steam_id_, other->killer_steam_id_);
    std::swap(victim_steam_id_, other->victim_steam_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(increment_value_, other->increment_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgIncrementKillCountAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgIncrementKillCountAttribute_descriptor_;
  metadata.reflection = CMsgIncrementKillCountAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgIncrementKillCountAttribute_Multiple::kMsgsFieldNumber;
#endif  // !_MSC_VER

CMsgIncrementKillCountAttribute_Multiple::CMsgIncrementKillCountAttribute_Multiple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgIncrementKillCountAttribute_Multiple::InitAsDefaultInstance() {
}

CMsgIncrementKillCountAttribute_Multiple::CMsgIncrementKillCountAttribute_Multiple(const CMsgIncrementKillCountAttribute_Multiple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute_Multiple::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgIncrementKillCountAttribute_Multiple::~CMsgIncrementKillCountAttribute_Multiple() {
  SharedDtor();
}

void CMsgIncrementKillCountAttribute_Multiple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgIncrementKillCountAttribute_Multiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgIncrementKillCountAttribute_Multiple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgIncrementKillCountAttribute_Multiple_descriptor_;
}

const CMsgIncrementKillCountAttribute_Multiple& CMsgIncrementKillCountAttribute_Multiple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgIncrementKillCountAttribute_Multiple* CMsgIncrementKillCountAttribute_Multiple::default_instance_ = NULL;

CMsgIncrementKillCountAttribute_Multiple* CMsgIncrementKillCountAttribute_Multiple::New() const {
  return new CMsgIncrementKillCountAttribute_Multiple;
}

void CMsgIncrementKillCountAttribute_Multiple::Clear() {
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgIncrementKillCountAttribute_Multiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgIncrementKillCountAttribute msgs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgIncrementKillCountAttribute_Multiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgIncrementKillCountAttribute msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgIncrementKillCountAttribute_Multiple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgIncrementKillCountAttribute msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgIncrementKillCountAttribute_Multiple::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgIncrementKillCountAttribute msgs = 1;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgIncrementKillCountAttribute_Multiple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgIncrementKillCountAttribute_Multiple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgIncrementKillCountAttribute_Multiple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgIncrementKillCountAttribute_Multiple::MergeFrom(const CMsgIncrementKillCountAttribute_Multiple& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgIncrementKillCountAttribute_Multiple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgIncrementKillCountAttribute_Multiple::CopyFrom(const CMsgIncrementKillCountAttribute_Multiple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgIncrementKillCountAttribute_Multiple::IsInitialized() const {
  
  return true;
}

void CMsgIncrementKillCountAttribute_Multiple::Swap(CMsgIncrementKillCountAttribute_Multiple* other) {
  if (other != this) {
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgIncrementKillCountAttribute_Multiple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgIncrementKillCountAttribute_Multiple_descriptor_;
  metadata.reflection = CMsgIncrementKillCountAttribute_Multiple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrackUniquePlayerPairEvent::kKillerSteamIdFieldNumber;
const int CMsgTrackUniquePlayerPairEvent::kVictimSteamIdFieldNumber;
const int CMsgTrackUniquePlayerPairEvent::kItemIdFieldNumber;
const int CMsgTrackUniquePlayerPairEvent::kEventTypeFieldNumber;
#endif  // !_MSC_VER

CMsgTrackUniquePlayerPairEvent::CMsgTrackUniquePlayerPairEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTrackUniquePlayerPairEvent::InitAsDefaultInstance() {
}

CMsgTrackUniquePlayerPairEvent::CMsgTrackUniquePlayerPairEvent(const CMsgTrackUniquePlayerPairEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrackUniquePlayerPairEvent::SharedCtor() {
  _cached_size_ = 0;
  killer_steam_id_ = GOOGLE_ULONGLONG(0);
  victim_steam_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrackUniquePlayerPairEvent::~CMsgTrackUniquePlayerPairEvent() {
  SharedDtor();
}

void CMsgTrackUniquePlayerPairEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTrackUniquePlayerPairEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTrackUniquePlayerPairEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTrackUniquePlayerPairEvent_descriptor_;
}

const CMsgTrackUniquePlayerPairEvent& CMsgTrackUniquePlayerPairEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgTrackUniquePlayerPairEvent* CMsgTrackUniquePlayerPairEvent::default_instance_ = NULL;

CMsgTrackUniquePlayerPairEvent* CMsgTrackUniquePlayerPairEvent::New() const {
  return new CMsgTrackUniquePlayerPairEvent;
}

void CMsgTrackUniquePlayerPairEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killer_steam_id_ = GOOGLE_ULONGLONG(0);
    victim_steam_id_ = GOOGLE_ULONGLONG(0);
    item_id_ = GOOGLE_ULONGLONG(0);
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTrackUniquePlayerPairEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 killer_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killer_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_victim_steam_id;
        break;
      }
      
      // optional uint64 victim_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victim_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &victim_steam_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_type;
        break;
      }
      
      // optional uint32 event_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrackUniquePlayerPairEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 killer_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->killer_steam_id(), output);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->victim_steam_id(), output);
  }
  
  // optional uint64 item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }
  
  // optional uint32 event_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTrackUniquePlayerPairEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 killer_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->killer_steam_id(), target);
  }
  
  // optional uint64 victim_steam_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->victim_steam_id(), target);
  }
  
  // optional uint64 item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }
  
  // optional uint32 event_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTrackUniquePlayerPairEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 killer_steam_id = 1;
    if (has_killer_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killer_steam_id());
    }
    
    // optional uint64 victim_steam_id = 2;
    if (has_victim_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->victim_steam_id());
    }
    
    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 event_type = 4;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrackUniquePlayerPairEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTrackUniquePlayerPairEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTrackUniquePlayerPairEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTrackUniquePlayerPairEvent::MergeFrom(const CMsgTrackUniquePlayerPairEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_killer_steam_id(from.killer_steam_id());
    }
    if (from._has_bit(1)) {
      set_victim_steam_id(from.victim_steam_id());
    }
    if (from._has_bit(2)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(3)) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTrackUniquePlayerPairEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTrackUniquePlayerPairEvent::CopyFrom(const CMsgTrackUniquePlayerPairEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrackUniquePlayerPairEvent::IsInitialized() const {
  
  return true;
}

void CMsgTrackUniquePlayerPairEvent::Swap(CMsgTrackUniquePlayerPairEvent* other) {
  if (other != this) {
    std::swap(killer_steam_id_, other->killer_steam_id_);
    std::swap(victim_steam_id_, other->victim_steam_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTrackUniquePlayerPairEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTrackUniquePlayerPairEvent_descriptor_;
  metadata.reflection = CMsgTrackUniquePlayerPairEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyStrangeCountTransfer::kToolItemIdFieldNumber;
const int CMsgApplyStrangeCountTransfer::kItemSrcItemIdFieldNumber;
const int CMsgApplyStrangeCountTransfer::kItemDestItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyStrangeCountTransfer::CMsgApplyStrangeCountTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyStrangeCountTransfer::InitAsDefaultInstance() {
}

CMsgApplyStrangeCountTransfer::CMsgApplyStrangeCountTransfer(const CMsgApplyStrangeCountTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyStrangeCountTransfer::SharedCtor() {
  _cached_size_ = 0;
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  item_src_item_id_ = GOOGLE_ULONGLONG(0);
  item_dest_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyStrangeCountTransfer::~CMsgApplyStrangeCountTransfer() {
  SharedDtor();
}

void CMsgApplyStrangeCountTransfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyStrangeCountTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyStrangeCountTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyStrangeCountTransfer_descriptor_;
}

const CMsgApplyStrangeCountTransfer& CMsgApplyStrangeCountTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyStrangeCountTransfer* CMsgApplyStrangeCountTransfer::default_instance_ = NULL;

CMsgApplyStrangeCountTransfer* CMsgApplyStrangeCountTransfer::New() const {
  return new CMsgApplyStrangeCountTransfer;
}

void CMsgApplyStrangeCountTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tool_item_id_ = GOOGLE_ULONGLONG(0);
    item_src_item_id_ = GOOGLE_ULONGLONG(0);
    item_dest_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyStrangeCountTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_src_item_id;
        break;
      }
      
      // optional uint64 item_src_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_src_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_src_item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_dest_item_id;
        break;
      }
      
      // optional uint64 item_dest_item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_dest_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_dest_item_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyStrangeCountTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }
  
  // optional uint64 item_src_item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_src_item_id(), output);
  }
  
  // optional uint64 item_dest_item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_dest_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyStrangeCountTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }
  
  // optional uint64 item_src_item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_src_item_id(), target);
  }
  
  // optional uint64 item_dest_item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_dest_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyStrangeCountTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tool_item_id = 1;
    if (has_tool_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }
    
    // optional uint64 item_src_item_id = 2;
    if (has_item_src_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_src_item_id());
    }
    
    // optional uint64 item_dest_item_id = 3;
    if (has_item_dest_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_dest_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyStrangeCountTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyStrangeCountTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyStrangeCountTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyStrangeCountTransfer::MergeFrom(const CMsgApplyStrangeCountTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tool_item_id(from.tool_item_id());
    }
    if (from._has_bit(1)) {
      set_item_src_item_id(from.item_src_item_id());
    }
    if (from._has_bit(2)) {
      set_item_dest_item_id(from.item_dest_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyStrangeCountTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyStrangeCountTransfer::CopyFrom(const CMsgApplyStrangeCountTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangeCountTransfer::IsInitialized() const {
  
  return true;
}

void CMsgApplyStrangeCountTransfer::Swap(CMsgApplyStrangeCountTransfer* other) {
  if (other != this) {
    std::swap(tool_item_id_, other->tool_item_id_);
    std::swap(item_src_item_id_, other->item_src_item_id_);
    std::swap(item_dest_item_id_, other->item_dest_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyStrangeCountTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyStrangeCountTransfer_descriptor_;
  metadata.reflection = CMsgApplyStrangeCountTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyStrangePart::kStrangePartItemIdFieldNumber;
const int CMsgApplyStrangePart::kItemItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyStrangePart::CMsgApplyStrangePart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyStrangePart::InitAsDefaultInstance() {
}

CMsgApplyStrangePart::CMsgApplyStrangePart(const CMsgApplyStrangePart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyStrangePart::SharedCtor() {
  _cached_size_ = 0;
  strange_part_item_id_ = GOOGLE_ULONGLONG(0);
  item_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyStrangePart::~CMsgApplyStrangePart() {
  SharedDtor();
}

void CMsgApplyStrangePart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyStrangePart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyStrangePart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyStrangePart_descriptor_;
}

const CMsgApplyStrangePart& CMsgApplyStrangePart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyStrangePart* CMsgApplyStrangePart::default_instance_ = NULL;

CMsgApplyStrangePart* CMsgApplyStrangePart::New() const {
  return new CMsgApplyStrangePart;
}

void CMsgApplyStrangePart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strange_part_item_id_ = GOOGLE_ULONGLONG(0);
    item_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyStrangePart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 strange_part_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &strange_part_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_item_id;
        break;
      }
      
      // optional uint64 item_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyStrangePart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 strange_part_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->strange_part_item_id(), output);
  }
  
  // optional uint64 item_item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyStrangePart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 strange_part_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->strange_part_item_id(), target);
  }
  
  // optional uint64 item_item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyStrangePart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 strange_part_item_id = 1;
    if (has_strange_part_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->strange_part_item_id());
    }
    
    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyStrangePart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyStrangePart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyStrangePart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyStrangePart::MergeFrom(const CMsgApplyStrangePart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_strange_part_item_id(from.strange_part_item_id());
    }
    if (from._has_bit(1)) {
      set_item_item_id(from.item_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyStrangePart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyStrangePart::CopyFrom(const CMsgApplyStrangePart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangePart::IsInitialized() const {
  
  return true;
}

void CMsgApplyStrangePart::Swap(CMsgApplyStrangePart* other) {
  if (other != this) {
    std::swap(strange_part_item_id_, other->strange_part_item_id_);
    std::swap(item_item_id_, other->item_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyStrangePart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyStrangePart_descriptor_;
  metadata.reflection = CMsgApplyStrangePart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyStrangeRestriction::kStrangePartItemIdFieldNumber;
const int CMsgApplyStrangeRestriction::kItemItemIdFieldNumber;
const int CMsgApplyStrangeRestriction::kStrangeAttrIndexFieldNumber;
#endif  // !_MSC_VER

CMsgApplyStrangeRestriction::CMsgApplyStrangeRestriction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyStrangeRestriction::InitAsDefaultInstance() {
}

CMsgApplyStrangeRestriction::CMsgApplyStrangeRestriction(const CMsgApplyStrangeRestriction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyStrangeRestriction::SharedCtor() {
  _cached_size_ = 0;
  strange_part_item_id_ = GOOGLE_ULONGLONG(0);
  item_item_id_ = GOOGLE_ULONGLONG(0);
  strange_attr_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyStrangeRestriction::~CMsgApplyStrangeRestriction() {
  SharedDtor();
}

void CMsgApplyStrangeRestriction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyStrangeRestriction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyStrangeRestriction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyStrangeRestriction_descriptor_;
}

const CMsgApplyStrangeRestriction& CMsgApplyStrangeRestriction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyStrangeRestriction* CMsgApplyStrangeRestriction::default_instance_ = NULL;

CMsgApplyStrangeRestriction* CMsgApplyStrangeRestriction::New() const {
  return new CMsgApplyStrangeRestriction;
}

void CMsgApplyStrangeRestriction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strange_part_item_id_ = GOOGLE_ULONGLONG(0);
    item_item_id_ = GOOGLE_ULONGLONG(0);
    strange_attr_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyStrangeRestriction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 strange_part_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &strange_part_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_item_id;
        break;
      }
      
      // optional uint64 item_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strange_attr_index;
        break;
      }
      
      // optional uint32 strange_attr_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strange_attr_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strange_attr_index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyStrangeRestriction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 strange_part_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->strange_part_item_id(), output);
  }
  
  // optional uint64 item_item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }
  
  // optional uint32 strange_attr_index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->strange_attr_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyStrangeRestriction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 strange_part_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->strange_part_item_id(), target);
  }
  
  // optional uint64 item_item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }
  
  // optional uint32 strange_attr_index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->strange_attr_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyStrangeRestriction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 strange_part_item_id = 1;
    if (has_strange_part_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->strange_part_item_id());
    }
    
    // optional uint64 item_item_id = 2;
    if (has_item_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }
    
    // optional uint32 strange_attr_index = 3;
    if (has_strange_attr_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strange_attr_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyStrangeRestriction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyStrangeRestriction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyStrangeRestriction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyStrangeRestriction::MergeFrom(const CMsgApplyStrangeRestriction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_strange_part_item_id(from.strange_part_item_id());
    }
    if (from._has_bit(1)) {
      set_item_item_id(from.item_item_id());
    }
    if (from._has_bit(2)) {
      set_strange_attr_index(from.strange_attr_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyStrangeRestriction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyStrangeRestriction::CopyFrom(const CMsgApplyStrangeRestriction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangeRestriction::IsInitialized() const {
  
  return true;
}

void CMsgApplyStrangeRestriction::Swap(CMsgApplyStrangeRestriction* other) {
  if (other != this) {
    std::swap(strange_part_item_id_, other->strange_part_item_id_);
    std::swap(item_item_id_, other->item_item_id_);
    std::swap(strange_attr_index_, other->strange_attr_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyStrangeRestriction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyStrangeRestriction_descriptor_;
  metadata.reflection = CMsgApplyStrangeRestriction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyUpgradeCard::kUpgradeCardItemIdFieldNumber;
const int CMsgApplyUpgradeCard::kSubjectItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyUpgradeCard::CMsgApplyUpgradeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyUpgradeCard::InitAsDefaultInstance() {
}

CMsgApplyUpgradeCard::CMsgApplyUpgradeCard(const CMsgApplyUpgradeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyUpgradeCard::SharedCtor() {
  _cached_size_ = 0;
  upgrade_card_item_id_ = GOOGLE_ULONGLONG(0);
  subject_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyUpgradeCard::~CMsgApplyUpgradeCard() {
  SharedDtor();
}

void CMsgApplyUpgradeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyUpgradeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyUpgradeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyUpgradeCard_descriptor_;
}

const CMsgApplyUpgradeCard& CMsgApplyUpgradeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyUpgradeCard* CMsgApplyUpgradeCard::default_instance_ = NULL;

CMsgApplyUpgradeCard* CMsgApplyUpgradeCard::New() const {
  return new CMsgApplyUpgradeCard;
}

void CMsgApplyUpgradeCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upgrade_card_item_id_ = GOOGLE_ULONGLONG(0);
    subject_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyUpgradeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 upgrade_card_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upgrade_card_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subject_item_id;
        break;
      }
      
      // optional uint64 subject_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subject_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyUpgradeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 upgrade_card_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->upgrade_card_item_id(), output);
  }
  
  // optional uint64 subject_item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subject_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyUpgradeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 upgrade_card_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->upgrade_card_item_id(), target);
  }
  
  // optional uint64 subject_item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subject_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyUpgradeCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 upgrade_card_item_id = 1;
    if (has_upgrade_card_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upgrade_card_item_id());
    }
    
    // optional uint64 subject_item_id = 2;
    if (has_subject_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyUpgradeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyUpgradeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyUpgradeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyUpgradeCard::MergeFrom(const CMsgApplyUpgradeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_upgrade_card_item_id(from.upgrade_card_item_id());
    }
    if (from._has_bit(1)) {
      set_subject_item_id(from.subject_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyUpgradeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyUpgradeCard::CopyFrom(const CMsgApplyUpgradeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyUpgradeCard::IsInitialized() const {
  
  return true;
}

void CMsgApplyUpgradeCard::Swap(CMsgApplyUpgradeCard* other) {
  if (other != this) {
    std::swap(upgrade_card_item_id_, other->upgrade_card_item_id_);
    std::swap(subject_item_id_, other->subject_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyUpgradeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyUpgradeCard_descriptor_;
  metadata.reflection = CMsgApplyUpgradeCard_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOEconItemAttribute::_default_value_bytes_;
#ifndef _MSC_VER
const int CSOEconItemAttribute::kDefIndexFieldNumber;
const int CSOEconItemAttribute::kValueFieldNumber;
const int CSOEconItemAttribute::kValueBytesFieldNumber;
#endif  // !_MSC_VER

CSOEconItemAttribute::CSOEconItemAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItemAttribute::InitAsDefaultInstance() {
}

CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItemAttribute::SharedCtor() {
  _cached_size_ = 0;
  def_index_ = 0u;
  value_ = 0u;
  value_bytes_ = const_cast< ::std::string*>(&_default_value_bytes_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  SharedDtor();
}

void CSOEconItemAttribute::SharedDtor() {
  if (value_bytes_ != &_default_value_bytes_) {
    delete value_bytes_;
  }
  if (this != default_instance_) {
  }
}

void CSOEconItemAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItemAttribute_descriptor_;
}

const CSOEconItemAttribute& CSOEconItemAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItemAttribute* CSOEconItemAttribute::default_instance_ = NULL;

CSOEconItemAttribute* CSOEconItemAttribute::New() const {
  return new CSOEconItemAttribute;
}

void CSOEconItemAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    def_index_ = 0u;
    value_ = 0u;
    if (_has_bit(2)) {
      if (value_bytes_ != &_default_value_bytes_) {
        value_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItemAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_bytes;
        break;
      }
      
      // optional bytes value_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItemAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }
  
  // optional uint32 value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  // optional bytes value_bytes = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItemAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }
  
  // optional uint32 value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  // optional bytes value_bytes = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItemAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 def_index = 1;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
    // optional bytes value_bytes = 3;
    if (has_value_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItemAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItemAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_def_index(from.def_index());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_value_bytes(from.value_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItemAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  
  return true;
}

void CSOEconItemAttribute::Swap(CSOEconItemAttribute* other) {
  if (other != this) {
    std::swap(def_index_, other->def_index_);
    std::swap(value_, other->value_);
    std::swap(value_bytes_, other->value_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItemAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItemAttribute_descriptor_;
  metadata.reflection = CSOEconItemAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconItemEquipped::kNewClassFieldNumber;
const int CSOEconItemEquipped::kNewSlotFieldNumber;
#endif  // !_MSC_VER

CSOEconItemEquipped::CSOEconItemEquipped()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItemEquipped::InitAsDefaultInstance() {
}

CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItemEquipped::SharedCtor() {
  _cached_size_ = 0;
  new_class_ = 0u;
  new_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  SharedDtor();
}

void CSOEconItemEquipped::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconItemEquipped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemEquipped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItemEquipped_descriptor_;
}

const CSOEconItemEquipped& CSOEconItemEquipped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItemEquipped* CSOEconItemEquipped::default_instance_ = NULL;

CSOEconItemEquipped* CSOEconItemEquipped::New() const {
  return new CSOEconItemEquipped;
}

void CSOEconItemEquipped::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_class_ = 0u;
    new_slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItemEquipped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_class = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_class_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_slot;
        break;
      }
      
      // optional uint32 new_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_slot_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItemEquipped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 new_class = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_class(), output);
  }
  
  // optional uint32 new_slot = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_slot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItemEquipped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 new_class = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_class(), target);
  }
  
  // optional uint32 new_slot = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_slot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItemEquipped::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 new_class = 1;
    if (has_new_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_class());
    }
    
    // optional uint32 new_slot = 2;
    if (has_new_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_slot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemEquipped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItemEquipped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItemEquipped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_new_class(from.new_class());
    }
    if (from._has_bit(1)) {
      set_new_slot(from.new_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItemEquipped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  
  return true;
}

void CSOEconItemEquipped::Swap(CSOEconItemEquipped* other) {
  if (other != this) {
    std::swap(new_class_, other->new_class_);
    std::swap(new_slot_, other->new_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItemEquipped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItemEquipped_descriptor_;
  metadata.reflection = CSOEconItemEquipped_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOEconItem::_default_custom_name_;
const ::std::string CSOEconItem::_default_custom_desc_;
#ifndef _MSC_VER
const int CSOEconItem::kIdFieldNumber;
const int CSOEconItem::kAccountIdFieldNumber;
const int CSOEconItem::kInventoryFieldNumber;
const int CSOEconItem::kDefIndexFieldNumber;
const int CSOEconItem::kQuantityFieldNumber;
const int CSOEconItem::kLevelFieldNumber;
const int CSOEconItem::kQualityFieldNumber;
const int CSOEconItem::kFlagsFieldNumber;
const int CSOEconItem::kOriginFieldNumber;
const int CSOEconItem::kCustomNameFieldNumber;
const int CSOEconItem::kCustomDescFieldNumber;
const int CSOEconItem::kAttributeFieldNumber;
const int CSOEconItem::kInteriorItemFieldNumber;
const int CSOEconItem::kInUseFieldNumber;
const int CSOEconItem::kStyleFieldNumber;
const int CSOEconItem::kOriginalIdFieldNumber;
const int CSOEconItem::kContainsEquippedStateFieldNumber;
const int CSOEconItem::kEquippedStateFieldNumber;
const int CSOEconItem::kContainsEquippedStateV2FieldNumber;
#endif  // !_MSC_VER

CSOEconItem::CSOEconItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItem::InitAsDefaultInstance() {
  interior_item_ = const_cast< ::CSOEconItem*>(&::CSOEconItem::default_instance());
}

CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  inventory_ = 0u;
  def_index_ = 0u;
  quantity_ = 0u;
  level_ = 0u;
  quality_ = 0u;
  flags_ = 0u;
  origin_ = 0u;
  custom_name_ = const_cast< ::std::string*>(&_default_custom_name_);
  custom_desc_ = const_cast< ::std::string*>(&_default_custom_desc_);
  interior_item_ = NULL;
  in_use_ = false;
  style_ = 0u;
  original_id_ = GOOGLE_ULONGLONG(0);
  contains_equipped_state_ = false;
  contains_equipped_state_v2_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItem::~CSOEconItem() {
  SharedDtor();
}

void CSOEconItem::SharedDtor() {
  if (custom_name_ != &_default_custom_name_) {
    delete custom_name_;
  }
  if (custom_desc_ != &_default_custom_desc_) {
    delete custom_desc_;
  }
  if (this != default_instance_) {
    delete interior_item_;
  }
}

void CSOEconItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItem_descriptor_;
}

const CSOEconItem& CSOEconItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItem* CSOEconItem::default_instance_ = NULL;

CSOEconItem* CSOEconItem::New() const {
  return new CSOEconItem;
}

void CSOEconItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    inventory_ = 0u;
    def_index_ = 0u;
    quantity_ = 0u;
    level_ = 0u;
    quality_ = 0u;
    flags_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    origin_ = 0u;
    if (_has_bit(9)) {
      if (custom_name_ != &_default_custom_name_) {
        custom_name_->clear();
      }
    }
    if (_has_bit(10)) {
      if (custom_desc_ != &_default_custom_desc_) {
        custom_desc_->clear();
      }
    }
    if (_has_bit(12)) {
      if (interior_item_ != NULL) interior_item_->::CSOEconItem::Clear();
    }
    in_use_ = false;
    style_ = 0u;
    original_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    contains_equipped_state_ = false;
    contains_equipped_state_v2_ = false;
  }
  attribute_.Clear();
  equipped_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inventory;
        break;
      }
      
      // optional uint32 inventory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def_index;
        break;
      }
      
      // optional uint32 def_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quantity;
        break;
      }
      
      // optional uint32 quantity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }
      
      // optional uint32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_origin;
        break;
      }
      
      // optional uint32 origin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_custom_name;
        break;
      }
      
      // optional string custom_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_name().data(), this->custom_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_custom_desc;
        break;
      }
      
      // optional string custom_desc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_desc().data(), this->custom_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        break;
      }
      
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        if (input->ExpectTag(106)) goto parse_interior_item;
        break;
      }
      
      // optional .CSOEconItem interior_item = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interior_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interior_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_in_use;
        break;
      }
      
      // optional bool in_use = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_style;
        break;
      }
      
      // optional uint32 style = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_original_id;
        break;
      }
      
      // optional uint64 original_id = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_id_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_contains_equipped_state;
        break;
      }
      
      // optional bool contains_equipped_state = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_equipped_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_equipped_state_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equipped_state;
        break;
      }
      
      // repeated .CSOEconItemEquipped equipped_state = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipped_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipped_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equipped_state;
        if (input->ExpectTag(152)) goto parse_contains_equipped_state_v2;
        break;
      }
      
      // optional bool contains_equipped_state_v2 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_equipped_state_v2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_equipped_state_v2_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  // optional uint32 inventory = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inventory(), output);
  }
  
  // optional uint32 def_index = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def_index(), output);
  }
  
  // optional uint32 quantity = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quantity(), output);
  }
  
  // optional uint32 level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }
  
  // optional uint32 quality = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quality(), output);
  }
  
  // optional uint32 flags = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }
  
  // optional uint32 origin = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->origin(), output);
  }
  
  // optional string custom_name = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_name().data(), this->custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->custom_name(), output);
  }
  
  // optional string custom_desc = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_desc().data(), this->custom_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->custom_desc(), output);
  }
  
  // repeated .CSOEconItemAttribute attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attribute(i), output);
  }
  
  // optional .CSOEconItem interior_item = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->interior_item(), output);
  }
  
  // optional bool in_use = 14 [default = false];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->in_use(), output);
  }
  
  // optional uint32 style = 15 [default = 0];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->style(), output);
  }
  
  // optional uint64 original_id = 16 [default = 0];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->original_id(), output);
  }
  
  // optional bool contains_equipped_state = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->contains_equipped_state(), output);
  }
  
  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (int i = 0; i < this->equipped_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->equipped_state(i), output);
  }
  
  // optional bool contains_equipped_state_v2 = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->contains_equipped_state_v2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // optional uint32 inventory = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inventory(), target);
  }
  
  // optional uint32 def_index = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def_index(), target);
  }
  
  // optional uint32 quantity = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quantity(), target);
  }
  
  // optional uint32 level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // optional uint32 quality = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quality(), target);
  }
  
  // optional uint32 flags = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }
  
  // optional uint32 origin = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->origin(), target);
  }
  
  // optional string custom_name = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_name().data(), this->custom_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->custom_name(), target);
  }
  
  // optional string custom_desc = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_desc().data(), this->custom_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->custom_desc(), target);
  }
  
  // repeated .CSOEconItemAttribute attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attribute(i), target);
  }
  
  // optional .CSOEconItem interior_item = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->interior_item(), target);
  }
  
  // optional bool in_use = 14 [default = false];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->in_use(), target);
  }
  
  // optional uint32 style = 15 [default = 0];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->style(), target);
  }
  
  // optional uint64 original_id = 16 [default = 0];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->original_id(), target);
  }
  
  // optional bool contains_equipped_state = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->contains_equipped_state(), target);
  }
  
  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (int i = 0; i < this->equipped_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->equipped_state(i), target);
  }
  
  // optional bool contains_equipped_state_v2 = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->contains_equipped_state_v2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 inventory = 3;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }
    
    // optional uint32 def_index = 4;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 quantity = 5;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }
    
    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }
    
    // optional uint32 flags = 8 [default = 0];
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 origin = 9;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }
    
    // optional string custom_name = 10;
    if (has_custom_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_name());
    }
    
    // optional string custom_desc = 11;
    if (has_custom_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_desc());
    }
    
    // optional .CSOEconItem interior_item = 13;
    if (has_interior_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interior_item());
    }
    
    // optional bool in_use = 14 [default = false];
    if (has_in_use()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 style = 15 [default = 0];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }
    
    // optional uint64 original_id = 16 [default = 0];
    if (has_original_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool contains_equipped_state = 17;
    if (has_contains_equipped_state()) {
      total_size += 2 + 1;
    }
    
    // optional bool contains_equipped_state_v2 = 19;
    if (has_contains_equipped_state_v2()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated .CSOEconItemEquipped equipped_state = 18;
  total_size += 2 * this->equipped_state_size();
  for (int i = 0; i < this->equipped_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipped_state(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItem::MergeFrom(const CSOEconItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(2)) {
      set_inventory(from.inventory());
    }
    if (from._has_bit(3)) {
      set_def_index(from.def_index());
    }
    if (from._has_bit(4)) {
      set_quantity(from.quantity());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
    if (from._has_bit(6)) {
      set_quality(from.quality());
    }
    if (from._has_bit(7)) {
      set_flags(from.flags());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_origin(from.origin());
    }
    if (from._has_bit(9)) {
      set_custom_name(from.custom_name());
    }
    if (from._has_bit(10)) {
      set_custom_desc(from.custom_desc());
    }
    if (from._has_bit(12)) {
      mutable_interior_item()->::CSOEconItem::MergeFrom(from.interior_item());
    }
    if (from._has_bit(13)) {
      set_in_use(from.in_use());
    }
    if (from._has_bit(14)) {
      set_style(from.style());
    }
    if (from._has_bit(15)) {
      set_original_id(from.original_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_contains_equipped_state(from.contains_equipped_state());
    }
    if (from._has_bit(18)) {
      set_contains_equipped_state_v2(from.contains_equipped_state_v2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  
  return true;
}

void CSOEconItem::Swap(CSOEconItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(account_id_, other->account_id_);
    std::swap(inventory_, other->inventory_);
    std::swap(def_index_, other->def_index_);
    std::swap(quantity_, other->quantity_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(flags_, other->flags_);
    std::swap(origin_, other->origin_);
    std::swap(custom_name_, other->custom_name_);
    std::swap(custom_desc_, other->custom_desc_);
    attribute_.Swap(&other->attribute_);
    std::swap(interior_item_, other->interior_item_);
    std::swap(in_use_, other->in_use_);
    std::swap(style_, other->style_);
    std::swap(original_id_, other->original_id_);
    std::swap(contains_equipped_state_, other->contains_equipped_state_);
    equipped_state_.Swap(&other->equipped_state_);
    std::swap(contains_equipped_state_v2_, other->contains_equipped_state_v2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItem_descriptor_;
  metadata.reflection = CSOEconItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAdjustItemEquippedState::kItemIdFieldNumber;
const int CMsgAdjustItemEquippedState::kNewClassFieldNumber;
const int CMsgAdjustItemEquippedState::kNewSlotFieldNumber;
#endif  // !_MSC_VER

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAdjustItemEquippedState::InitAsDefaultInstance() {
}

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(const CMsgAdjustItemEquippedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAdjustItemEquippedState::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  new_class_ = 0u;
  new_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAdjustItemEquippedState::~CMsgAdjustItemEquippedState() {
  SharedDtor();
}

void CMsgAdjustItemEquippedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAdjustItemEquippedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAdjustItemEquippedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAdjustItemEquippedState_descriptor_;
}

const CMsgAdjustItemEquippedState& CMsgAdjustItemEquippedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgAdjustItemEquippedState* CMsgAdjustItemEquippedState::default_instance_ = NULL;

CMsgAdjustItemEquippedState* CMsgAdjustItemEquippedState::New() const {
  return new CMsgAdjustItemEquippedState;
}

void CMsgAdjustItemEquippedState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    new_class_ = 0u;
    new_slot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAdjustItemEquippedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_class;
        break;
      }
      
      // optional uint32 new_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_class_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_slot;
        break;
      }
      
      // optional uint32 new_slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_slot_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAdjustItemEquippedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint32 new_class = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_class(), output);
  }
  
  // optional uint32 new_slot = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_slot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAdjustItemEquippedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint32 new_class = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_class(), target);
  }
  
  // optional uint32 new_slot = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_slot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAdjustItemEquippedState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 new_class = 2;
    if (has_new_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_class());
    }
    
    // optional uint32 new_slot = 3;
    if (has_new_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_slot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAdjustItemEquippedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAdjustItemEquippedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAdjustItemEquippedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAdjustItemEquippedState::MergeFrom(const CMsgAdjustItemEquippedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_new_class(from.new_class());
    }
    if (from._has_bit(2)) {
      set_new_slot(from.new_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAdjustItemEquippedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAdjustItemEquippedState::CopyFrom(const CMsgAdjustItemEquippedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdjustItemEquippedState::IsInitialized() const {
  
  return true;
}

void CMsgAdjustItemEquippedState::Swap(CMsgAdjustItemEquippedState* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(new_class_, other->new_class_);
    std::swap(new_slot_, other->new_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAdjustItemEquippedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAdjustItemEquippedState_descriptor_;
  metadata.reflection = CMsgAdjustItemEquippedState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSortItems::kSortTypeFieldNumber;
#endif  // !_MSC_VER

CMsgSortItems::CMsgSortItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSortItems::InitAsDefaultInstance() {
}

CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSortItems::SharedCtor() {
  _cached_size_ = 0;
  sort_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSortItems::~CMsgSortItems() {
  SharedDtor();
}

void CMsgSortItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSortItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSortItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSortItems_descriptor_;
}

const CMsgSortItems& CMsgSortItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSortItems* CMsgSortItems::default_instance_ = NULL;

CMsgSortItems* CMsgSortItems::New() const {
  return new CMsgSortItems;
}

void CMsgSortItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSortItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sort_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSortItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sort_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sort_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSortItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sort_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sort_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSortItems::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sort_type = 1;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSortItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSortItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSortItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSortItems::MergeFrom(const CMsgSortItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sort_type(from.sort_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSortItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  
  return true;
}

void CMsgSortItems::Swap(CMsgSortItems* other) {
  if (other != this) {
    std::swap(sort_type_, other->sort_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSortItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSortItems_descriptor_;
  metadata.reflection = CMsgSortItems_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSOEconClaimCode::_default_code_;
#ifndef _MSC_VER
const int CSOEconClaimCode::kAccountIdFieldNumber;
const int CSOEconClaimCode::kCodeTypeFieldNumber;
const int CSOEconClaimCode::kTimeAcquiredFieldNumber;
const int CSOEconClaimCode::kCodeFieldNumber;
#endif  // !_MSC_VER

CSOEconClaimCode::CSOEconClaimCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconClaimCode::InitAsDefaultInstance() {
}

CSOEconClaimCode::CSOEconClaimCode(const CSOEconClaimCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconClaimCode::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  code_type_ = 0u;
  time_acquired_ = 0u;
  code_ = const_cast< ::std::string*>(&_default_code_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconClaimCode::~CSOEconClaimCode() {
  SharedDtor();
}

void CSOEconClaimCode::SharedDtor() {
  if (code_ != &_default_code_) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CSOEconClaimCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconClaimCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconClaimCode_descriptor_;
}

const CSOEconClaimCode& CSOEconClaimCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconClaimCode* CSOEconClaimCode::default_instance_ = NULL;

CSOEconClaimCode* CSOEconClaimCode::New() const {
  return new CSOEconClaimCode;
}

void CSOEconClaimCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    code_type_ = 0u;
    time_acquired_ = 0u;
    if (_has_bit(3)) {
      if (code_ != &_default_code_) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconClaimCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code_type;
        break;
      }
      
      // optional uint32 code_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_acquired;
        break;
      }
      
      // optional uint32 time_acquired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_acquired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_acquired_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }
      
      // optional string code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconClaimCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 code_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }
  
  // optional uint32 time_acquired = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_acquired(), output);
  }
  
  // optional string code = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconClaimCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 code_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }
  
  // optional uint32 time_acquired = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_acquired(), target);
  }
  
  // optional string code = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconClaimCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 code_type = 2;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }
    
    // optional uint32 time_acquired = 3;
    if (has_time_acquired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_acquired());
    }
    
    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconClaimCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconClaimCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconClaimCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconClaimCode::MergeFrom(const CSOEconClaimCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_code_type(from.code_type());
    }
    if (from._has_bit(2)) {
      set_time_acquired(from.time_acquired());
    }
    if (from._has_bit(3)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconClaimCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconClaimCode::CopyFrom(const CSOEconClaimCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconClaimCode::IsInitialized() const {
  
  return true;
}

void CSOEconClaimCode::Swap(CSOEconClaimCode* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(code_type_, other->code_type_);
    std::swap(time_acquired_, other->time_acquired_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconClaimCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconClaimCode_descriptor_;
  metadata.reflection = CSOEconClaimCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStoreGetUserData::kPriceSheetVersionFieldNumber;
#endif  // !_MSC_VER

CMsgStoreGetUserData::CMsgStoreGetUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStoreGetUserData::InitAsDefaultInstance() {
}

CMsgStoreGetUserData::CMsgStoreGetUserData(const CMsgStoreGetUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStoreGetUserData::SharedCtor() {
  _cached_size_ = 0;
  price_sheet_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStoreGetUserData::~CMsgStoreGetUserData() {
  SharedDtor();
}

void CMsgStoreGetUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStoreGetUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStoreGetUserData_descriptor_;
}

const CMsgStoreGetUserData& CMsgStoreGetUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStoreGetUserData* CMsgStoreGetUserData::default_instance_ = NULL;

CMsgStoreGetUserData* CMsgStoreGetUserData::New() const {
  return new CMsgStoreGetUserData;
}

void CMsgStoreGetUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_sheet_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStoreGetUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 price_sheet_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStoreGetUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 price_sheet_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->price_sheet_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStoreGetUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 price_sheet_version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->price_sheet_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStoreGetUserData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 price_sheet_version = 1;
    if (has_price_sheet_version()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStoreGetUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStoreGetUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserData::MergeFrom(const CMsgStoreGetUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_price_sheet_version(from.price_sheet_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStoreGetUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserData::CopyFrom(const CMsgStoreGetUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserData::IsInitialized() const {
  
  return true;
}

void CMsgStoreGetUserData::Swap(CMsgStoreGetUserData* other) {
  if (other != this) {
    std::swap(price_sheet_version_, other->price_sheet_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStoreGetUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStoreGetUserData_descriptor_;
  metadata.reflection = CMsgStoreGetUserData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgStoreGetUserDataResponse::_default_country_;
const ::std::string CMsgStoreGetUserDataResponse::_default_price_sheet_;
#ifndef _MSC_VER
const int CMsgStoreGetUserDataResponse::kResultFieldNumber;
const int CMsgStoreGetUserDataResponse::kCurrencyFieldNumber;
const int CMsgStoreGetUserDataResponse::kCountryFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetVersionFieldNumber;
const int CMsgStoreGetUserDataResponse::kExperimentDataFieldNumber;
const int CMsgStoreGetUserDataResponse::kFeaturedItemIdxFieldNumber;
const int CMsgStoreGetUserDataResponse::kShowHatDescriptionsFieldNumber;
const int CMsgStoreGetUserDataResponse::kPriceSheetFieldNumber;
const int CMsgStoreGetUserDataResponse::kDefaultItemSortFieldNumber;
const int CMsgStoreGetUserDataResponse::kPopularItemsFieldNumber;
#endif  // !_MSC_VER

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgStoreGetUserDataResponse::InitAsDefaultInstance() {
}

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse(const CMsgStoreGetUserDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgStoreGetUserDataResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  currency_ = 0;
  country_ = const_cast< ::std::string*>(&_default_country_);
  price_sheet_version_ = 0u;
  experiment_data_ = GOOGLE_ULONGLONG(0);
  featured_item_idx_ = 0;
  show_hat_descriptions_ = true;
  price_sheet_ = const_cast< ::std::string*>(&_default_price_sheet_);
  default_item_sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStoreGetUserDataResponse::~CMsgStoreGetUserDataResponse() {
  SharedDtor();
}

void CMsgStoreGetUserDataResponse::SharedDtor() {
  if (country_ != &_default_country_) {
    delete country_;
  }
  if (price_sheet_ != &_default_price_sheet_) {
    delete price_sheet_;
  }
  if (this != default_instance_) {
  }
}

void CMsgStoreGetUserDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStoreGetUserDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStoreGetUserDataResponse_descriptor_;
}

const CMsgStoreGetUserDataResponse& CMsgStoreGetUserDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgStoreGetUserDataResponse* CMsgStoreGetUserDataResponse::default_instance_ = NULL;

CMsgStoreGetUserDataResponse* CMsgStoreGetUserDataResponse::New() const {
  return new CMsgStoreGetUserDataResponse;
}

void CMsgStoreGetUserDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    currency_ = 0;
    if (_has_bit(2)) {
      if (country_ != &_default_country_) {
        country_->clear();
      }
    }
    price_sheet_version_ = 0u;
    experiment_data_ = GOOGLE_ULONGLONG(0);
    featured_item_idx_ = 0;
    show_hat_descriptions_ = true;
    if (_has_bit(7)) {
      if (price_sheet_ != &_default_price_sheet_) {
        price_sheet_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    default_item_sort_ = 0;
  }
  popular_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStoreGetUserDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }
      
      // optional int32 currency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }
      
      // optional string country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_price_sheet_version;
        break;
      }
      
      // optional fixed32 price_sheet_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price_sheet_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &price_sheet_version_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_experiment_data;
        break;
      }
      
      // optional uint64 experiment_data = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experiment_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experiment_data_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_featured_item_idx;
        break;
      }
      
      // optional int32 featured_item_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featured_item_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featured_item_idx_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_hat_descriptions;
        break;
      }
      
      // optional bool show_hat_descriptions = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hat_descriptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_hat_descriptions_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_price_sheet;
        break;
      }
      
      // optional bytes price_sheet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_default_item_sort;
        break;
      }
      
      // optional int32 default_item_sort = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_item_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_item_sort_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_popular_items;
        break;
      }
      
      // repeated uint32 popular_items = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popular_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_popular_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_popular_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_popular_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgStoreGetUserDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int32 currency = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency(), output);
  }
  
  // optional string country = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country(), output);
  }
  
  // optional fixed32 price_sheet_version = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->price_sheet_version(), output);
  }
  
  // optional uint64 experiment_data = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->experiment_data(), output);
  }
  
  // optional int32 featured_item_idx = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->featured_item_idx(), output);
  }
  
  // optional bool show_hat_descriptions = 7 [default = true];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show_hat_descriptions(), output);
  }
  
  // optional bytes price_sheet = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->price_sheet(), output);
  }
  
  // optional int32 default_item_sort = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->default_item_sort(), output);
  }
  
  // repeated uint32 popular_items = 10;
  for (int i = 0; i < this->popular_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->popular_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgStoreGetUserDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int32 currency = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency(), target);
  }
  
  // optional string country = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }
  
  // optional fixed32 price_sheet_version = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->price_sheet_version(), target);
  }
  
  // optional uint64 experiment_data = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->experiment_data(), target);
  }
  
  // optional int32 featured_item_idx = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->featured_item_idx(), target);
  }
  
  // optional bool show_hat_descriptions = 7 [default = true];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->show_hat_descriptions(), target);
  }
  
  // optional bytes price_sheet = 8;
  if (_has_bit(7)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->price_sheet(), target);
  }
  
  // optional int32 default_item_sort = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->default_item_sort(), target);
  }
  
  // repeated uint32 popular_items = 10;
  for (int i = 0; i < this->popular_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->popular_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgStoreGetUserDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }
    
    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // optional fixed32 price_sheet_version = 4;
    if (has_price_sheet_version()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 experiment_data = 5 [default = 0];
    if (has_experiment_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experiment_data());
    }
    
    // optional int32 featured_item_idx = 6;
    if (has_featured_item_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featured_item_idx());
    }
    
    // optional bool show_hat_descriptions = 7 [default = true];
    if (has_show_hat_descriptions()) {
      total_size += 1 + 1;
    }
    
    // optional bytes price_sheet = 8;
    if (has_price_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->price_sheet());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 default_item_sort = 9 [default = 0];
    if (has_default_item_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_item_sort());
    }
    
  }
  // repeated uint32 popular_items = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->popular_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->popular_items(i));
    }
    total_size += 1 * this->popular_items_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStoreGetUserDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStoreGetUserDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStoreGetUserDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStoreGetUserDataResponse::MergeFrom(const CMsgStoreGetUserDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  popular_items_.MergeFrom(from.popular_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_currency(from.currency());
    }
    if (from._has_bit(2)) {
      set_country(from.country());
    }
    if (from._has_bit(3)) {
      set_price_sheet_version(from.price_sheet_version());
    }
    if (from._has_bit(4)) {
      set_experiment_data(from.experiment_data());
    }
    if (from._has_bit(5)) {
      set_featured_item_idx(from.featured_item_idx());
    }
    if (from._has_bit(6)) {
      set_show_hat_descriptions(from.show_hat_descriptions());
    }
    if (from._has_bit(7)) {
      set_price_sheet(from.price_sheet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_default_item_sort(from.default_item_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStoreGetUserDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStoreGetUserDataResponse::CopyFrom(const CMsgStoreGetUserDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserDataResponse::IsInitialized() const {
  
  return true;
}

void CMsgStoreGetUserDataResponse::Swap(CMsgStoreGetUserDataResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(currency_, other->currency_);
    std::swap(country_, other->country_);
    std::swap(price_sheet_version_, other->price_sheet_version_);
    std::swap(experiment_data_, other->experiment_data_);
    std::swap(featured_item_idx_, other->featured_item_idx_);
    std::swap(show_hat_descriptions_, other->show_hat_descriptions_);
    std::swap(price_sheet_, other->price_sheet_);
    std::swap(default_item_sort_, other->default_item_sort_);
    popular_items_.Swap(&other->popular_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStoreGetUserDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStoreGetUserDataResponse_descriptor_;
  metadata.reflection = CMsgStoreGetUserDataResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgUpdateItemSchema::_default_items_game_;
const ::std::string CMsgUpdateItemSchema::_default_items_game_url_;
const ::std::string CMsgUpdateItemSchema::_default_signature_;
#ifndef _MSC_VER
const int CMsgUpdateItemSchema::kItemsGameFieldNumber;
const int CMsgUpdateItemSchema::kItemSchemaVersionFieldNumber;
const int CMsgUpdateItemSchema::kItemsGameUrlFieldNumber;
const int CMsgUpdateItemSchema::kSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgUpdateItemSchema::CMsgUpdateItemSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdateItemSchema::InitAsDefaultInstance() {
}

CMsgUpdateItemSchema::CMsgUpdateItemSchema(const CMsgUpdateItemSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::SharedCtor() {
  _cached_size_ = 0;
  items_game_ = const_cast< ::std::string*>(&_default_items_game_);
  item_schema_version_ = 0u;
  items_game_url_ = const_cast< ::std::string*>(&_default_items_game_url_);
  signature_ = const_cast< ::std::string*>(&_default_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdateItemSchema::~CMsgUpdateItemSchema() {
  SharedDtor();
}

void CMsgUpdateItemSchema::SharedDtor() {
  if (items_game_ != &_default_items_game_) {
    delete items_game_;
  }
  if (items_game_url_ != &_default_items_game_url_) {
    delete items_game_url_;
  }
  if (signature_ != &_default_signature_) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void CMsgUpdateItemSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdateItemSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdateItemSchema_descriptor_;
}

const CMsgUpdateItemSchema& CMsgUpdateItemSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUpdateItemSchema* CMsgUpdateItemSchema::default_instance_ = NULL;

CMsgUpdateItemSchema* CMsgUpdateItemSchema::New() const {
  return new CMsgUpdateItemSchema;
}

void CMsgUpdateItemSchema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (items_game_ != &_default_items_game_) {
        items_game_->clear();
      }
    }
    item_schema_version_ = 0u;
    if (_has_bit(2)) {
      if (items_game_url_ != &_default_items_game_url_) {
        items_game_url_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signature_ != &_default_signature_) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdateItemSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes items_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_item_schema_version;
        break;
      }
      
      // optional fixed32 item_schema_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_item_schema_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_version_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items_game_url;
        break;
      }
      
      // optional string items_game_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items_game_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items_game_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->items_game_url().data(), this->items_game_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }
      
      // optional bytes signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdateItemSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes items_game = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items_game(), output);
  }
  
  // optional fixed32 item_schema_version = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->item_schema_version(), output);
  }
  
  // optional string items_game_url = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->items_game_url(), output);
  }
  
  // optional bytes signature = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdateItemSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes items_game = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->items_game(), target);
  }
  
  // optional fixed32 item_schema_version = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->item_schema_version(), target);
  }
  
  // optional string items_game_url = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->items_game_url(), target);
  }
  
  // optional bytes signature = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdateItemSchema::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes items_game = 1;
    if (has_items_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items_game());
    }
    
    // optional fixed32 item_schema_version = 2;
    if (has_item_schema_version()) {
      total_size += 1 + 4;
    }
    
    // optional string items_game_url = 3;
    if (has_items_game_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items_game_url());
    }
    
    // optional bytes signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdateItemSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdateItemSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdateItemSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdateItemSchema::MergeFrom(const CMsgUpdateItemSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_items_game(from.items_game());
    }
    if (from._has_bit(1)) {
      set_item_schema_version(from.item_schema_version());
    }
    if (from._has_bit(2)) {
      set_items_game_url(from.items_game_url());
    }
    if (from._has_bit(3)) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdateItemSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::CopyFrom(const CMsgUpdateItemSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateItemSchema::IsInitialized() const {
  
  return true;
}

void CMsgUpdateItemSchema::Swap(CMsgUpdateItemSchema* other) {
  if (other != this) {
    std::swap(items_game_, other->items_game_);
    std::swap(item_schema_version_, other->item_schema_version_);
    std::swap(items_game_url_, other->items_game_url_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdateItemSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdateItemSchema_descriptor_;
  metadata.reflection = CMsgUpdateItemSchema_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCError::_default_error_text_;
#ifndef _MSC_VER
const int CMsgGCError::kErrorTextFieldNumber;
#endif  // !_MSC_VER

CMsgGCError::CMsgGCError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCError::InitAsDefaultInstance() {
}

CMsgGCError::CMsgGCError(const CMsgGCError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCError::SharedCtor() {
  _cached_size_ = 0;
  error_text_ = const_cast< ::std::string*>(&_default_error_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCError::~CMsgGCError() {
  SharedDtor();
}

void CMsgGCError::SharedDtor() {
  if (error_text_ != &_default_error_text_) {
    delete error_text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCError_descriptor_;
}

const CMsgGCError& CMsgGCError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCError* CMsgGCError::default_instance_ = NULL;

CMsgGCError* CMsgGCError::New() const {
  return new CMsgGCError;
}

void CMsgGCError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (error_text_ != &_default_error_text_) {
        error_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string error_text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error_text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string error_text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCError::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error_text = 1;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCError::MergeFrom(const CMsgGCError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_text(from.error_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCError::CopyFrom(const CMsgGCError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCError::IsInitialized() const {
  
  return true;
}

void CMsgGCError::Swap(CMsgGCError* other) {
  if (other != this) {
    std::swap(error_text_, other->error_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCError_descriptor_;
  metadata.reflection = CMsgGCError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRequestInventoryRefresh::InitAsDefaultInstance() {
}

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(const CMsgRequestInventoryRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRequestInventoryRefresh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestInventoryRefresh::~CMsgRequestInventoryRefresh() {
  SharedDtor();
}

void CMsgRequestInventoryRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestInventoryRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestInventoryRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestInventoryRefresh_descriptor_;
}

const CMsgRequestInventoryRefresh& CMsgRequestInventoryRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRequestInventoryRefresh* CMsgRequestInventoryRefresh::default_instance_ = NULL;

CMsgRequestInventoryRefresh* CMsgRequestInventoryRefresh::New() const {
  return new CMsgRequestInventoryRefresh;
}

void CMsgRequestInventoryRefresh::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestInventoryRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgRequestInventoryRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRequestInventoryRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRequestInventoryRefresh::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestInventoryRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestInventoryRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestInventoryRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestInventoryRefresh::MergeFrom(const CMsgRequestInventoryRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestInventoryRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestInventoryRefresh::CopyFrom(const CMsgRequestInventoryRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestInventoryRefresh::IsInitialized() const {
  
  return true;
}

void CMsgRequestInventoryRefresh::Swap(CMsgRequestInventoryRefresh* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestInventoryRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestInventoryRefresh_descriptor_;
  metadata.reflection = CMsgRequestInventoryRefresh_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgConVarValue::_default_name_;
const ::std::string CMsgConVarValue::_default_value_;
#ifndef _MSC_VER
const int CMsgConVarValue::kNameFieldNumber;
const int CMsgConVarValue::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgConVarValue::CMsgConVarValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConVarValue::InitAsDefaultInstance() {
}

CMsgConVarValue::CMsgConVarValue(const CMsgConVarValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConVarValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConVarValue::~CMsgConVarValue() {
  SharedDtor();
}

void CMsgConVarValue::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgConVarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConVarValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConVarValue_descriptor_;
}

const CMsgConVarValue& CMsgConVarValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgConVarValue* CMsgConVarValue::default_instance_ = NULL;

CMsgConVarValue* CMsgConVarValue::New() const {
  return new CMsgConVarValue;
}

void CMsgConVarValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConVarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConVarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConVarValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConVarValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConVarValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConVarValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConVarValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConVarValue::MergeFrom(const CMsgConVarValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConVarValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConVarValue::CopyFrom(const CMsgConVarValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConVarValue::IsInitialized() const {
  
  return true;
}

void CMsgConVarValue::Swap(CMsgConVarValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConVarValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConVarValue_descriptor_;
  metadata.reflection = CMsgConVarValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReplicateConVars::kConvarsFieldNumber;
#endif  // !_MSC_VER

CMsgReplicateConVars::CMsgReplicateConVars()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplicateConVars::InitAsDefaultInstance() {
}

CMsgReplicateConVars::CMsgReplicateConVars(const CMsgReplicateConVars& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplicateConVars::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplicateConVars::~CMsgReplicateConVars() {
  SharedDtor();
}

void CMsgReplicateConVars::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgReplicateConVars::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplicateConVars::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplicateConVars_descriptor_;
}

const CMsgReplicateConVars& CMsgReplicateConVars::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplicateConVars* CMsgReplicateConVars::default_instance_ = NULL;

CMsgReplicateConVars* CMsgReplicateConVars::New() const {
  return new CMsgReplicateConVars;
}

void CMsgReplicateConVars::Clear() {
  convars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplicateConVars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgConVarValue convars = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_convars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_convars;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplicateConVars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgConVarValue convars = 1;
  for (int i = 0; i < this->convars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->convars(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplicateConVars::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgConVarValue convars = 1;
  for (int i = 0; i < this->convars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->convars(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplicateConVars::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgConVarValue convars = 1;
  total_size += 1 * this->convars_size();
  for (int i = 0; i < this->convars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->convars(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplicateConVars::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplicateConVars* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplicateConVars*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplicateConVars::MergeFrom(const CMsgReplicateConVars& from) {
  GOOGLE_CHECK_NE(&from, this);
  convars_.MergeFrom(from.convars_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplicateConVars::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplicateConVars::CopyFrom(const CMsgReplicateConVars& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplicateConVars::IsInitialized() const {
  
  return true;
}

void CMsgReplicateConVars::Swap(CMsgReplicateConVars* other) {
  if (other != this) {
    convars_.Swap(&other->convars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplicateConVars::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplicateConVars_descriptor_;
  metadata.reflection = CMsgReplicateConVars_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgUseItem::kItemIdFieldNumber;
const int CMsgUseItem::kTargetSteamIdFieldNumber;
const int CMsgUseItem::kGiftPotentialTargetsFieldNumber;
const int CMsgUseItem::kDuelClassLockFieldNumber;
const int CMsgUseItem::kInitiatorSteamIdFieldNumber;
const int CMsgUseItem::kItempackAckImmediatelyFieldNumber;
#endif  // !_MSC_VER

CMsgUseItem::CMsgUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUseItem::InitAsDefaultInstance() {
}

CMsgUseItem::CMsgUseItem(const CMsgUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUseItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  target_steam_id_ = GOOGLE_ULONGLONG(0);
  duel__class_lock_ = 0u;
  initiator_steam_id_ = GOOGLE_ULONGLONG(0);
  itempack__ack_immediately_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUseItem::~CMsgUseItem() {
  SharedDtor();
}

void CMsgUseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUseItem_descriptor_;
}

const CMsgUseItem& CMsgUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUseItem* CMsgUseItem::default_instance_ = NULL;

CMsgUseItem* CMsgUseItem::New() const {
  return new CMsgUseItem;
}

void CMsgUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    target_steam_id_ = GOOGLE_ULONGLONG(0);
    duel__class_lock_ = 0u;
    initiator_steam_id_ = GOOGLE_ULONGLONG(0);
    itempack__ack_immediately_ = false;
  }
  gift__potential_targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_steam_id;
        break;
      }
      
      // optional fixed64 target_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_steam_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gift__potential_targets;
        break;
      }
      
      // repeated uint32 gift__potential_targets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift__potential_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gift__potential_targets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gift__potential_targets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gift__potential_targets;
        if (input->ExpectTag(32)) goto parse_duel__class_lock;
        break;
      }
      
      // optional uint32 duel__class_lock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duel__class_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duel__class_lock_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_initiator_steam_id;
        break;
      }
      
      // optional fixed64 initiator_steam_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_initiator_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &initiator_steam_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itempack__ack_immediately;
        break;
      }
      
      // optional bool itempack__ack_immediately = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itempack__ack_immediately:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &itempack__ack_immediately_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional fixed64 target_steam_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_steam_id(), output);
  }
  
  // repeated uint32 gift__potential_targets = 3;
  for (int i = 0; i < this->gift__potential_targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gift__potential_targets(i), output);
  }
  
  // optional uint32 duel__class_lock = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duel__class_lock(), output);
  }
  
  // optional fixed64 initiator_steam_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->initiator_steam_id(), output);
  }
  
  // optional bool itempack__ack_immediately = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->itempack__ack_immediately(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional fixed64 target_steam_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_steam_id(), target);
  }
  
  // repeated uint32 gift__potential_targets = 3;
  for (int i = 0; i < this->gift__potential_targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gift__potential_targets(i), target);
  }
  
  // optional uint32 duel__class_lock = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duel__class_lock(), target);
  }
  
  // optional fixed64 initiator_steam_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->initiator_steam_id(), target);
  }
  
  // optional bool itempack__ack_immediately = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->itempack__ack_immediately(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUseItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional fixed64 target_steam_id = 2;
    if (has_target_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 duel__class_lock = 4;
    if (has_duel__class_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duel__class_lock());
    }
    
    // optional fixed64 initiator_steam_id = 5;
    if (has_initiator_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool itempack__ack_immediately = 6;
    if (has_itempack__ack_immediately()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated uint32 gift__potential_targets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gift__potential_targets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gift__potential_targets(i));
    }
    total_size += 1 * this->gift__potential_targets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUseItem::MergeFrom(const CMsgUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift__potential_targets_.MergeFrom(from.gift__potential_targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_target_steam_id(from.target_steam_id());
    }
    if (from._has_bit(3)) {
      set_duel__class_lock(from.duel__class_lock());
    }
    if (from._has_bit(4)) {
      set_initiator_steam_id(from.initiator_steam_id());
    }
    if (from._has_bit(5)) {
      set_itempack__ack_immediately(from.itempack__ack_immediately());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUseItem::CopyFrom(const CMsgUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUseItem::IsInitialized() const {
  
  return true;
}

void CMsgUseItem::Swap(CMsgUseItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(target_steam_id_, other->target_steam_id_);
    gift__potential_targets_.Swap(&other->gift__potential_targets_);
    std::swap(duel__class_lock_, other->duel__class_lock_);
    std::swap(initiator_steam_id_, other->initiator_steam_id_);
    std::swap(itempack__ack_immediately_, other->itempack__ack_immediately_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUseItem_descriptor_;
  metadata.reflection = CMsgUseItem_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgReplayUploadedToYouTube::_default_youtube_url_;
const ::std::string CMsgReplayUploadedToYouTube::_default_youtube_account_name_;
#ifndef _MSC_VER
const int CMsgReplayUploadedToYouTube::kYoutubeUrlFieldNumber;
const int CMsgReplayUploadedToYouTube::kYoutubeAccountNameFieldNumber;
const int CMsgReplayUploadedToYouTube::kSessionIdFieldNumber;
#endif  // !_MSC_VER

CMsgReplayUploadedToYouTube::CMsgReplayUploadedToYouTube()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgReplayUploadedToYouTube::InitAsDefaultInstance() {
}

CMsgReplayUploadedToYouTube::CMsgReplayUploadedToYouTube(const CMsgReplayUploadedToYouTube& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgReplayUploadedToYouTube::SharedCtor() {
  _cached_size_ = 0;
  youtube_url_ = const_cast< ::std::string*>(&_default_youtube_url_);
  youtube_account_name_ = const_cast< ::std::string*>(&_default_youtube_account_name_);
  session_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReplayUploadedToYouTube::~CMsgReplayUploadedToYouTube() {
  SharedDtor();
}

void CMsgReplayUploadedToYouTube::SharedDtor() {
  if (youtube_url_ != &_default_youtube_url_) {
    delete youtube_url_;
  }
  if (youtube_account_name_ != &_default_youtube_account_name_) {
    delete youtube_account_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgReplayUploadedToYouTube::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReplayUploadedToYouTube::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReplayUploadedToYouTube_descriptor_;
}

const CMsgReplayUploadedToYouTube& CMsgReplayUploadedToYouTube::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgReplayUploadedToYouTube* CMsgReplayUploadedToYouTube::default_instance_ = NULL;

CMsgReplayUploadedToYouTube* CMsgReplayUploadedToYouTube::New() const {
  return new CMsgReplayUploadedToYouTube;
}

void CMsgReplayUploadedToYouTube::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (youtube_url_ != &_default_youtube_url_) {
        youtube_url_->clear();
      }
    }
    if (_has_bit(1)) {
      if (youtube_account_name_ != &_default_youtube_account_name_) {
        youtube_account_name_->clear();
      }
    }
    session_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReplayUploadedToYouTube::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string youtube_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->youtube_url().data(), this->youtube_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_youtube_account_name;
        break;
      }
      
      // optional string youtube_account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_youtube_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->youtube_account_name().data(), this->youtube_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }
      
      // optional uint64 session_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgReplayUploadedToYouTube::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string youtube_url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->youtube_url(), output);
  }
  
  // optional string youtube_account_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_account_name().data(), this->youtube_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->youtube_account_name(), output);
  }
  
  // optional uint64 session_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgReplayUploadedToYouTube::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string youtube_url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_url().data(), this->youtube_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->youtube_url(), target);
  }
  
  // optional string youtube_account_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->youtube_account_name().data(), this->youtube_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->youtube_account_name(), target);
  }
  
  // optional uint64 session_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->session_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgReplayUploadedToYouTube::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string youtube_url = 1;
    if (has_youtube_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_url());
    }
    
    // optional string youtube_account_name = 2;
    if (has_youtube_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_account_name());
    }
    
    // optional uint64 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReplayUploadedToYouTube::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReplayUploadedToYouTube* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReplayUploadedToYouTube*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReplayUploadedToYouTube::MergeFrom(const CMsgReplayUploadedToYouTube& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_youtube_url(from.youtube_url());
    }
    if (from._has_bit(1)) {
      set_youtube_account_name(from.youtube_account_name());
    }
    if (from._has_bit(2)) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReplayUploadedToYouTube::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplayUploadedToYouTube::CopyFrom(const CMsgReplayUploadedToYouTube& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplayUploadedToYouTube::IsInitialized() const {
  
  return true;
}

void CMsgReplayUploadedToYouTube::Swap(CMsgReplayUploadedToYouTube* other) {
  if (other != this) {
    std::swap(youtube_url_, other->youtube_url_);
    std::swap(youtube_account_name_, other->youtube_account_name_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReplayUploadedToYouTube::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReplayUploadedToYouTube_descriptor_;
  metadata.reflection = CMsgReplayUploadedToYouTube_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgConsumableExhausted::kItemDefIdFieldNumber;
#endif  // !_MSC_VER

CMsgConsumableExhausted::CMsgConsumableExhausted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgConsumableExhausted::InitAsDefaultInstance() {
}

CMsgConsumableExhausted::CMsgConsumableExhausted(const CMsgConsumableExhausted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgConsumableExhausted::SharedCtor() {
  _cached_size_ = 0;
  item_def_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConsumableExhausted::~CMsgConsumableExhausted() {
  SharedDtor();
}

void CMsgConsumableExhausted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgConsumableExhausted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConsumableExhausted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConsumableExhausted_descriptor_;
}

const CMsgConsumableExhausted& CMsgConsumableExhausted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgConsumableExhausted* CMsgConsumableExhausted::default_instance_ = NULL;

CMsgConsumableExhausted* CMsgConsumableExhausted::New() const {
  return new CMsgConsumableExhausted;
}

void CMsgConsumableExhausted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgConsumableExhausted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_def_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_def_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgConsumableExhausted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_def_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_def_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgConsumableExhausted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_def_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_def_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgConsumableExhausted::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_def_id = 1;
    if (has_item_def_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_def_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConsumableExhausted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgConsumableExhausted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgConsumableExhausted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConsumableExhausted::MergeFrom(const CMsgConsumableExhausted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_def_id(from.item_def_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgConsumableExhausted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConsumableExhausted::CopyFrom(const CMsgConsumableExhausted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumableExhausted::IsInitialized() const {
  
  return true;
}

void CMsgConsumableExhausted::Swap(CMsgConsumableExhausted* other) {
  if (other != this) {
    std::swap(item_def_id_, other->item_def_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgConsumableExhausted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConsumableExhausted_descriptor_;
  metadata.reflection = CMsgConsumableExhausted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgItemAcknowledged::kAccountIdFieldNumber;
const int CMsgItemAcknowledged::kInventoryFieldNumber;
const int CMsgItemAcknowledged::kDefIndexFieldNumber;
const int CMsgItemAcknowledged::kQualityFieldNumber;
const int CMsgItemAcknowledged::kRarityFieldNumber;
const int CMsgItemAcknowledged::kOriginFieldNumber;
const int CMsgItemAcknowledged::kIsStrangeFieldNumber;
const int CMsgItemAcknowledged::kIsUnusualFieldNumber;
const int CMsgItemAcknowledged::kWearFieldNumber;
#endif  // !_MSC_VER

CMsgItemAcknowledged::CMsgItemAcknowledged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgItemAcknowledged::InitAsDefaultInstance() {
}

CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgItemAcknowledged::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  inventory_ = 0u;
  def_index_ = 0u;
  quality_ = 0u;
  rarity_ = 0u;
  origin_ = 0u;
  is_strange_ = 0u;
  is_unusual_ = 0u;
  wear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  SharedDtor();
}

void CMsgItemAcknowledged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgItemAcknowledged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgItemAcknowledged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgItemAcknowledged_descriptor_;
}

const CMsgItemAcknowledged& CMsgItemAcknowledged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgItemAcknowledged* CMsgItemAcknowledged::default_instance_ = NULL;

CMsgItemAcknowledged* CMsgItemAcknowledged::New() const {
  return new CMsgItemAcknowledged;
}

void CMsgItemAcknowledged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    inventory_ = 0u;
    def_index_ = 0u;
    quality_ = 0u;
    rarity_ = 0u;
    origin_ = 0u;
    is_strange_ = 0u;
    is_unusual_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgItemAcknowledged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inventory;
        break;
      }
      
      // optional uint32 inventory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def_index;
        break;
      }
      
      // optional uint32 def_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }
      
      // optional uint32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rarity;
        break;
      }
      
      // optional uint32 rarity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rarity_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_origin;
        break;
      }
      
      // optional uint32 origin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_strange;
        break;
      }
      
      // optional uint32 is_strange = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_strange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_strange_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_unusual;
        break;
      }
      
      // optional uint32 is_unusual = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_unusual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_unusual_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_wear;
        break;
      }
      
      // optional float wear = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wear_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgItemAcknowledged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 inventory = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inventory(), output);
  }
  
  // optional uint32 def_index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }
  
  // optional uint32 quality = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quality(), output);
  }
  
  // optional uint32 rarity = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rarity(), output);
  }
  
  // optional uint32 origin = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin(), output);
  }
  
  // optional uint32 is_strange = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_strange(), output);
  }
  
  // optional uint32 is_unusual = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_unusual(), output);
  }
  
  // optional float wear = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wear(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgItemAcknowledged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 inventory = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inventory(), target);
  }
  
  // optional uint32 def_index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }
  
  // optional uint32 quality = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quality(), target);
  }
  
  // optional uint32 rarity = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rarity(), target);
  }
  
  // optional uint32 origin = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin(), target);
  }
  
  // optional uint32 is_strange = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_strange(), target);
  }
  
  // optional uint32 is_unusual = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_unusual(), target);
  }
  
  // optional float wear = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wear(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgItemAcknowledged::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 inventory = 2;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }
    
    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }
    
    // optional uint32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }
    
    // optional uint32 rarity = 5;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rarity());
    }
    
    // optional uint32 origin = 6;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }
    
    // optional uint32 is_strange = 7;
    if (has_is_strange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_strange());
    }
    
    // optional uint32 is_unusual = 8;
    if (has_is_unusual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_unusual());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float wear = 9;
    if (has_wear()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgItemAcknowledged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgItemAcknowledged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgItemAcknowledged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgItemAcknowledged::MergeFrom(const CMsgItemAcknowledged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_inventory(from.inventory());
    }
    if (from._has_bit(2)) {
      set_def_index(from.def_index());
    }
    if (from._has_bit(3)) {
      set_quality(from.quality());
    }
    if (from._has_bit(4)) {
      set_rarity(from.rarity());
    }
    if (from._has_bit(5)) {
      set_origin(from.origin());
    }
    if (from._has_bit(6)) {
      set_is_strange(from.is_strange());
    }
    if (from._has_bit(7)) {
      set_is_unusual(from.is_unusual());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_wear(from.wear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgItemAcknowledged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  
  return true;
}

void CMsgItemAcknowledged::Swap(CMsgItemAcknowledged* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(inventory_, other->inventory_);
    std::swap(def_index_, other->def_index_);
    std::swap(quality_, other->quality_);
    std::swap(rarity_, other->rarity_);
    std::swap(origin_, other->origin_);
    std::swap(is_strange_, other->is_strange_);
    std::swap(is_unusual_, other->is_unusual_);
    std::swap(wear_, other->wear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgItemAcknowledged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgItemAcknowledged_descriptor_;
  metadata.reflection = CMsgItemAcknowledged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetPresetItemPosition::kClassIdFieldNumber;
const int CMsgSetPresetItemPosition::kPresetIdFieldNumber;
const int CMsgSetPresetItemPosition::kSlotIdFieldNumber;
const int CMsgSetPresetItemPosition::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgSetPresetItemPosition::CMsgSetPresetItemPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetPresetItemPosition::InitAsDefaultInstance() {
}

CMsgSetPresetItemPosition::CMsgSetPresetItemPosition(const CMsgSetPresetItemPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetPresetItemPosition::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  preset_id_ = 0u;
  slot_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetPresetItemPosition::~CMsgSetPresetItemPosition() {
  SharedDtor();
}

void CMsgSetPresetItemPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetPresetItemPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetPresetItemPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetPresetItemPosition_descriptor_;
}

const CMsgSetPresetItemPosition& CMsgSetPresetItemPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSetPresetItemPosition* CMsgSetPresetItemPosition::default_instance_ = NULL;

CMsgSetPresetItemPosition* CMsgSetPresetItemPosition::New() const {
  return new CMsgSetPresetItemPosition;
}

void CMsgSetPresetItemPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0u;
    preset_id_ = 0u;
    slot_id_ = 0u;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetPresetItemPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preset_id;
        break;
      }
      
      // optional uint32 preset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_id;
        break;
      }
      
      // optional uint32 slot_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetPresetItemPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 class_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }
  
  // optional uint32 preset_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preset_id(), output);
  }
  
  // optional uint32 slot_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_id(), output);
  }
  
  // optional uint64 item_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetPresetItemPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 class_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }
  
  // optional uint32 preset_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->preset_id(), target);
  }
  
  // optional uint32 slot_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_id(), target);
  }
  
  // optional uint64 item_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetPresetItemPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }
    
    // optional uint32 preset_id = 2;
    if (has_preset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_id());
    }
    
    // optional uint32 slot_id = 3;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }
    
    // optional uint64 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetPresetItemPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetPresetItemPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetPresetItemPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetPresetItemPosition::MergeFrom(const CMsgSetPresetItemPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_class_id(from.class_id());
    }
    if (from._has_bit(1)) {
      set_preset_id(from.preset_id());
    }
    if (from._has_bit(2)) {
      set_slot_id(from.slot_id());
    }
    if (from._has_bit(3)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetPresetItemPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetPresetItemPosition::CopyFrom(const CMsgSetPresetItemPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetPresetItemPosition::IsInitialized() const {
  
  return true;
}

void CMsgSetPresetItemPosition::Swap(CMsgSetPresetItemPosition* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(preset_id_, other->preset_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetPresetItemPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetPresetItemPosition_descriptor_;
  metadata.reflection = CMsgSetPresetItemPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetItemPositions_ItemPosition::kItemIdFieldNumber;
const int CMsgSetItemPositions_ItemPosition::kPositionFieldNumber;
#endif  // !_MSC_VER

CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetItemPositions_ItemPosition::InitAsDefaultInstance() {
}

CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(const CMsgSetItemPositions_ItemPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetItemPositions_ItemPosition::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetItemPositions_ItemPosition::~CMsgSetItemPositions_ItemPosition() {
  SharedDtor();
}

void CMsgSetItemPositions_ItemPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetItemPositions_ItemPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetItemPositions_ItemPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetItemPositions_ItemPosition_descriptor_;
}

const CMsgSetItemPositions_ItemPosition& CMsgSetItemPositions_ItemPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSetItemPositions_ItemPosition* CMsgSetItemPositions_ItemPosition::default_instance_ = NULL;

CMsgSetItemPositions_ItemPosition* CMsgSetItemPositions_ItemPosition::New() const {
  return new CMsgSetItemPositions_ItemPosition;
}

void CMsgSetItemPositions_ItemPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetItemPositions_ItemPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }
      
      // optional uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetItemPositions_ItemPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint32 position = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetItemPositions_ItemPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint32 position = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetItemPositions_ItemPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetItemPositions_ItemPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetItemPositions_ItemPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const CMsgSetItemPositions_ItemPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const CMsgSetItemPositions_ItemPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions_ItemPosition::IsInitialized() const {
  
  return true;
}

void CMsgSetItemPositions_ItemPosition::Swap(CMsgSetItemPositions_ItemPosition* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetItemPositions_ItemPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetItemPositions_ItemPosition_descriptor_;
  metadata.reflection = CMsgSetItemPositions_ItemPosition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSetItemPositions::kItemPositionsFieldNumber;
#endif  // !_MSC_VER

CMsgSetItemPositions::CMsgSetItemPositions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetItemPositions::InitAsDefaultInstance() {
}

CMsgSetItemPositions::CMsgSetItemPositions(const CMsgSetItemPositions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetItemPositions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetItemPositions::~CMsgSetItemPositions() {
  SharedDtor();
}

void CMsgSetItemPositions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetItemPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetItemPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetItemPositions_descriptor_;
}

const CMsgSetItemPositions& CMsgSetItemPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSetItemPositions* CMsgSetItemPositions::default_instance_ = NULL;

CMsgSetItemPositions* CMsgSetItemPositions::New() const {
  return new CMsgSetItemPositions;
}

void CMsgSetItemPositions::Clear() {
  item_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetItemPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_positions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetItemPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (int i = 0; i < this->item_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_positions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetItemPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (int i = 0; i < this->item_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_positions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetItemPositions::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  total_size += 1 * this->item_positions_size();
  for (int i = 0; i < this->item_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_positions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetItemPositions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetItemPositions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetItemPositions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions::MergeFrom(const CMsgSetItemPositions& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_positions_.MergeFrom(from.item_positions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetItemPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions::CopyFrom(const CMsgSetItemPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions::IsInitialized() const {
  
  return true;
}

void CMsgSetItemPositions::Swap(CMsgSetItemPositions* other) {
  if (other != this) {
    item_positions_.Swap(&other->item_positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetItemPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetItemPositions_descriptor_;
  metadata.reflection = CMsgSetItemPositions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconItemPresetInstance::kClassIdFieldNumber;
const int CSOEconItemPresetInstance::kPresetIdFieldNumber;
const int CSOEconItemPresetInstance::kSlotIdFieldNumber;
const int CSOEconItemPresetInstance::kItemIdFieldNumber;
#endif  // !_MSC_VER

CSOEconItemPresetInstance::CSOEconItemPresetInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconItemPresetInstance::InitAsDefaultInstance() {
}

CSOEconItemPresetInstance::CSOEconItemPresetInstance(const CSOEconItemPresetInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconItemPresetInstance::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  preset_id_ = 0u;
  slot_id_ = 0u;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconItemPresetInstance::~CSOEconItemPresetInstance() {
  SharedDtor();
}

void CSOEconItemPresetInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconItemPresetInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconItemPresetInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconItemPresetInstance_descriptor_;
}

const CSOEconItemPresetInstance& CSOEconItemPresetInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconItemPresetInstance* CSOEconItemPresetInstance::default_instance_ = NULL;

CSOEconItemPresetInstance* CSOEconItemPresetInstance::New() const {
  return new CSOEconItemPresetInstance;
}

void CSOEconItemPresetInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0u;
    preset_id_ = 0u;
    slot_id_ = 0u;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconItemPresetInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_preset_id;
        break;
      }
      
      // optional uint32 preset_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_id;
        break;
      }
      
      // optional uint32 slot_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }
      
      // optional uint64 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconItemPresetInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 class_id = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_id(), output);
  }
  
  // optional uint32 preset_id = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->preset_id(), output);
  }
  
  // optional uint32 slot_id = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_id(), output);
  }
  
  // optional uint64 item_id = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconItemPresetInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 class_id = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_id(), target);
  }
  
  // optional uint32 preset_id = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->preset_id(), target);
  }
  
  // optional uint32 slot_id = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_id(), target);
  }
  
  // optional uint64 item_id = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconItemPresetInstance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }
    
    // optional uint32 preset_id = 3;
    if (has_preset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_id());
    }
    
    // optional uint32 slot_id = 4;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }
    
    // optional uint64 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconItemPresetInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconItemPresetInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconItemPresetInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconItemPresetInstance::MergeFrom(const CSOEconItemPresetInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_class_id(from.class_id());
    }
    if (from._has_bit(1)) {
      set_preset_id(from.preset_id());
    }
    if (from._has_bit(2)) {
      set_slot_id(from.slot_id());
    }
    if (from._has_bit(3)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconItemPresetInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemPresetInstance::CopyFrom(const CSOEconItemPresetInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemPresetInstance::IsInitialized() const {
  
  return true;
}

void CSOEconItemPresetInstance::Swap(CSOEconItemPresetInstance* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(preset_id_, other->preset_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconItemPresetInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconItemPresetInstance_descriptor_;
  metadata.reflection = CSOEconItemPresetInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSelectPresetForClass::kClassIdFieldNumber;
const int CMsgSelectPresetForClass::kPresetIdFieldNumber;
#endif  // !_MSC_VER

CMsgSelectPresetForClass::CMsgSelectPresetForClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSelectPresetForClass::InitAsDefaultInstance() {
}

CMsgSelectPresetForClass::CMsgSelectPresetForClass(const CMsgSelectPresetForClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSelectPresetForClass::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  preset_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSelectPresetForClass::~CMsgSelectPresetForClass() {
  SharedDtor();
}

void CMsgSelectPresetForClass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSelectPresetForClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSelectPresetForClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSelectPresetForClass_descriptor_;
}

const CMsgSelectPresetForClass& CMsgSelectPresetForClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSelectPresetForClass* CMsgSelectPresetForClass::default_instance_ = NULL;

CMsgSelectPresetForClass* CMsgSelectPresetForClass::New() const {
  return new CMsgSelectPresetForClass;
}

void CMsgSelectPresetForClass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0u;
    preset_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSelectPresetForClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preset_id;
        break;
      }
      
      // optional uint32 preset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSelectPresetForClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 class_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }
  
  // optional uint32 preset_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSelectPresetForClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 class_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }
  
  // optional uint32 preset_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->preset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSelectPresetForClass::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }
    
    // optional uint32 preset_id = 2;
    if (has_preset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSelectPresetForClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSelectPresetForClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSelectPresetForClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSelectPresetForClass::MergeFrom(const CMsgSelectPresetForClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_class_id(from.class_id());
    }
    if (from._has_bit(1)) {
      set_preset_id(from.preset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSelectPresetForClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSelectPresetForClass::CopyFrom(const CMsgSelectPresetForClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSelectPresetForClass::IsInitialized() const {
  
  return true;
}

void CMsgSelectPresetForClass::Swap(CMsgSelectPresetForClass* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(preset_id_, other->preset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSelectPresetForClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSelectPresetForClass_descriptor_;
  metadata.reflection = CMsgSelectPresetForClass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOClassPresetClientData::kAccountIdFieldNumber;
const int CSOClassPresetClientData::kClassIdFieldNumber;
const int CSOClassPresetClientData::kActivePresetIdFieldNumber;
#endif  // !_MSC_VER

CSOClassPresetClientData::CSOClassPresetClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOClassPresetClientData::InitAsDefaultInstance() {
}

CSOClassPresetClientData::CSOClassPresetClientData(const CSOClassPresetClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOClassPresetClientData::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  class_id_ = 0u;
  active_preset_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOClassPresetClientData::~CSOClassPresetClientData() {
  SharedDtor();
}

void CSOClassPresetClientData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOClassPresetClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOClassPresetClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOClassPresetClientData_descriptor_;
}

const CSOClassPresetClientData& CSOClassPresetClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOClassPresetClientData* CSOClassPresetClientData::default_instance_ = NULL;

CSOClassPresetClientData* CSOClassPresetClientData::New() const {
  return new CSOClassPresetClientData;
}

void CSOClassPresetClientData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    class_id_ = 0u;
    active_preset_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOClassPresetClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_class_id;
        break;
      }
      
      // optional uint32 class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_preset_id;
        break;
      }
      
      // optional uint32 active_preset_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_preset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_preset_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOClassPresetClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 class_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_id(), output);
  }
  
  // optional uint32 active_preset_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_preset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOClassPresetClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 class_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_id(), target);
  }
  
  // optional uint32 active_preset_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_preset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOClassPresetClientData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }
    
    // optional uint32 active_preset_id = 3;
    if (has_active_preset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_preset_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOClassPresetClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOClassPresetClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOClassPresetClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOClassPresetClientData::MergeFrom(const CSOClassPresetClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_class_id(from.class_id());
    }
    if (from._has_bit(2)) {
      set_active_preset_id(from.active_preset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOClassPresetClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOClassPresetClientData::CopyFrom(const CSOClassPresetClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOClassPresetClientData::IsInitialized() const {
  
  return true;
}

void CSOClassPresetClientData::Swap(CSOClassPresetClientData* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(class_id_, other->class_id_);
    std::swap(active_preset_id_, other->active_preset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOClassPresetClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOClassPresetClientData_descriptor_;
  metadata.reflection = CSOClassPresetClientData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCReportAbuse::_default_description_;
#ifndef _MSC_VER
const int CMsgGCReportAbuse::kTargetSteamIdFieldNumber;
const int CMsgGCReportAbuse::kDescriptionFieldNumber;
const int CMsgGCReportAbuse::kGidFieldNumber;
const int CMsgGCReportAbuse::kAbuseTypeFieldNumber;
const int CMsgGCReportAbuse::kContentTypeFieldNumber;
const int CMsgGCReportAbuse::kTargetGameServerIpFieldNumber;
const int CMsgGCReportAbuse::kTargetGameServerPortFieldNumber;
#endif  // !_MSC_VER

CMsgGCReportAbuse::CMsgGCReportAbuse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCReportAbuse::InitAsDefaultInstance() {
}

CMsgGCReportAbuse::CMsgGCReportAbuse(const CMsgGCReportAbuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCReportAbuse::SharedCtor() {
  _cached_size_ = 0;
  target_steam_id_ = GOOGLE_ULONGLONG(0);
  description_ = const_cast< ::std::string*>(&_default_description_);
  gid_ = GOOGLE_ULONGLONG(0);
  abuse_type_ = 0u;
  content_type_ = 0u;
  target_game_server_ip_ = 0u;
  target_game_server_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCReportAbuse::~CMsgGCReportAbuse() {
  SharedDtor();
}

void CMsgGCReportAbuse::SharedDtor() {
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCReportAbuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCReportAbuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCReportAbuse_descriptor_;
}

const CMsgGCReportAbuse& CMsgGCReportAbuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCReportAbuse* CMsgGCReportAbuse::default_instance_ = NULL;

CMsgGCReportAbuse* CMsgGCReportAbuse::New() const {
  return new CMsgGCReportAbuse;
}

void CMsgGCReportAbuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_steam_id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
    gid_ = GOOGLE_ULONGLONG(0);
    abuse_type_ = 0u;
    content_type_ = 0u;
    target_game_server_ip_ = 0u;
    target_game_server_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCReportAbuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 target_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_abuse_type;
        break;
      }
      
      // optional uint32 abuse_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abuse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &abuse_type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_content_type;
        break;
      }
      
      // optional uint32 content_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }
      
      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gid;
        break;
      }
      
      // optional uint64 gid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_target_game_server_ip;
        break;
      }
      
      // optional fixed32 target_game_server_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_target_game_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &target_game_server_ip_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_target_game_server_port;
        break;
      }
      
      // optional uint32 target_game_server_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_game_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_game_server_port_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCReportAbuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 target_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_steam_id(), output);
  }
  
  // optional uint32 abuse_type = 2;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->abuse_type(), output);
  }
  
  // optional uint32 content_type = 3;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->content_type(), output);
  }
  
  // optional string description = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }
  
  // optional uint64 gid = 5;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gid(), output);
  }
  
  // optional fixed32 target_game_server_ip = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->target_game_server_ip(), output);
  }
  
  // optional uint32 target_game_server_port = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->target_game_server_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCReportAbuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 target_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_steam_id(), target);
  }
  
  // optional uint32 abuse_type = 2;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->abuse_type(), target);
  }
  
  // optional uint32 content_type = 3;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->content_type(), target);
  }
  
  // optional string description = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }
  
  // optional uint64 gid = 5;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gid(), target);
  }
  
  // optional fixed32 target_game_server_ip = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->target_game_server_ip(), target);
  }
  
  // optional uint32 target_game_server_port = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->target_game_server_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCReportAbuse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 target_steam_id = 1;
    if (has_target_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional uint64 gid = 5;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }
    
    // optional uint32 abuse_type = 2;
    if (has_abuse_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->abuse_type());
    }
    
    // optional uint32 content_type = 3;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }
    
    // optional fixed32 target_game_server_ip = 6;
    if (has_target_game_server_ip()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 target_game_server_port = 7;
    if (has_target_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_game_server_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCReportAbuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCReportAbuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCReportAbuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCReportAbuse::MergeFrom(const CMsgGCReportAbuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_target_steam_id(from.target_steam_id());
    }
    if (from._has_bit(1)) {
      set_description(from.description());
    }
    if (from._has_bit(2)) {
      set_gid(from.gid());
    }
    if (from._has_bit(3)) {
      set_abuse_type(from.abuse_type());
    }
    if (from._has_bit(4)) {
      set_content_type(from.content_type());
    }
    if (from._has_bit(5)) {
      set_target_game_server_ip(from.target_game_server_ip());
    }
    if (from._has_bit(6)) {
      set_target_game_server_port(from.target_game_server_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCReportAbuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCReportAbuse::CopyFrom(const CMsgGCReportAbuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCReportAbuse::IsInitialized() const {
  
  return true;
}

void CMsgGCReportAbuse::Swap(CMsgGCReportAbuse* other) {
  if (other != this) {
    std::swap(target_steam_id_, other->target_steam_id_);
    std::swap(description_, other->description_);
    std::swap(gid_, other->gid_);
    std::swap(abuse_type_, other->abuse_type_);
    std::swap(content_type_, other->content_type_);
    std::swap(target_game_server_ip_, other->target_game_server_ip_);
    std::swap(target_game_server_port_, other->target_game_server_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCReportAbuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCReportAbuse_descriptor_;
  metadata.reflection = CMsgGCReportAbuse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCReportAbuseResponse::_default_error_message_;
#ifndef _MSC_VER
const int CMsgGCReportAbuseResponse::kTargetSteamIdFieldNumber;
const int CMsgGCReportAbuseResponse::kResultFieldNumber;
const int CMsgGCReportAbuseResponse::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

CMsgGCReportAbuseResponse::CMsgGCReportAbuseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCReportAbuseResponse::InitAsDefaultInstance() {
}

CMsgGCReportAbuseResponse::CMsgGCReportAbuseResponse(const CMsgGCReportAbuseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCReportAbuseResponse::SharedCtor() {
  _cached_size_ = 0;
  target_steam_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  error_message_ = const_cast< ::std::string*>(&_default_error_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCReportAbuseResponse::~CMsgGCReportAbuseResponse() {
  SharedDtor();
}

void CMsgGCReportAbuseResponse::SharedDtor() {
  if (error_message_ != &_default_error_message_) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCReportAbuseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCReportAbuseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCReportAbuseResponse_descriptor_;
}

const CMsgGCReportAbuseResponse& CMsgGCReportAbuseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCReportAbuseResponse* CMsgGCReportAbuseResponse::default_instance_ = NULL;

CMsgGCReportAbuseResponse* CMsgGCReportAbuseResponse::New() const {
  return new CMsgGCReportAbuseResponse;
}

void CMsgGCReportAbuseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_steam_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
    if (_has_bit(2)) {
      if (error_message_ != &_default_error_message_) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCReportAbuseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 target_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCReportAbuseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 target_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_steam_id(), output);
  }
  
  // optional uint32 result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }
  
  // optional string error_message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error_message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCReportAbuseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 target_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_steam_id(), target);
  }
  
  // optional uint32 result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string error_message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCReportAbuseResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 target_steam_id = 1;
    if (has_target_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
    // optional string error_message = 3;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCReportAbuseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCReportAbuseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCReportAbuseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCReportAbuseResponse::MergeFrom(const CMsgGCReportAbuseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_target_steam_id(from.target_steam_id());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCReportAbuseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCReportAbuseResponse::CopyFrom(const CMsgGCReportAbuseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCReportAbuseResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCReportAbuseResponse::Swap(CMsgGCReportAbuseResponse* other) {
  if (other != this) {
    std::swap(target_steam_id_, other->target_steam_id_);
    std::swap(result_, other->result_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCReportAbuseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCReportAbuseResponse_descriptor_;
  metadata.reflection = CMsgGCReportAbuseResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCNameItemNotification::_default_item_name_custom_;
#ifndef _MSC_VER
const int CMsgGCNameItemNotification::kPlayerSteamidFieldNumber;
const int CMsgGCNameItemNotification::kItemDefIndexFieldNumber;
const int CMsgGCNameItemNotification::kItemNameCustomFieldNumber;
#endif  // !_MSC_VER

CMsgGCNameItemNotification::CMsgGCNameItemNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCNameItemNotification::InitAsDefaultInstance() {
}

CMsgGCNameItemNotification::CMsgGCNameItemNotification(const CMsgGCNameItemNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCNameItemNotification::SharedCtor() {
  _cached_size_ = 0;
  player_steamid_ = GOOGLE_ULONGLONG(0);
  item_def_index_ = 0u;
  item_name_custom_ = const_cast< ::std::string*>(&_default_item_name_custom_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCNameItemNotification::~CMsgGCNameItemNotification() {
  SharedDtor();
}

void CMsgGCNameItemNotification::SharedDtor() {
  if (item_name_custom_ != &_default_item_name_custom_) {
    delete item_name_custom_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCNameItemNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCNameItemNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCNameItemNotification_descriptor_;
}

const CMsgGCNameItemNotification& CMsgGCNameItemNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCNameItemNotification* CMsgGCNameItemNotification::default_instance_ = NULL;

CMsgGCNameItemNotification* CMsgGCNameItemNotification::New() const {
  return new CMsgGCNameItemNotification;
}

void CMsgGCNameItemNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_steamid_ = GOOGLE_ULONGLONG(0);
    item_def_index_ = 0u;
    if (_has_bit(2)) {
      if (item_name_custom_ != &_default_item_name_custom_) {
        item_name_custom_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCNameItemNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_steamid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_def_index;
        break;
      }
      
      // optional uint32 item_def_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_name_custom;
        break;
      }
      
      // optional string item_name_custom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_name_custom().data(), this->item_name_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCNameItemNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 player_steamid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_steamid(), output);
  }
  
  // optional uint32 item_def_index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }
  
  // optional string item_name_custom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name_custom().data(), this->item_name_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->item_name_custom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCNameItemNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 player_steamid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_steamid(), target);
  }
  
  // optional uint32 item_def_index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }
  
  // optional string item_name_custom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name_custom().data(), this->item_name_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item_name_custom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCNameItemNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 player_steamid = 1;
    if (has_player_steamid()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 item_def_index = 2;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }
    
    // optional string item_name_custom = 3;
    if (has_item_name_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name_custom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCNameItemNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCNameItemNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCNameItemNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCNameItemNotification::MergeFrom(const CMsgGCNameItemNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_player_steamid(from.player_steamid());
    }
    if (from._has_bit(1)) {
      set_item_def_index(from.item_def_index());
    }
    if (from._has_bit(2)) {
      set_item_name_custom(from.item_name_custom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCNameItemNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNameItemNotification::CopyFrom(const CMsgGCNameItemNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNameItemNotification::IsInitialized() const {
  
  return true;
}

void CMsgGCNameItemNotification::Swap(CMsgGCNameItemNotification* other) {
  if (other != this) {
    std::swap(player_steamid_, other->player_steamid_);
    std::swap(item_def_index_, other->item_def_index_);
    std::swap(item_name_custom_, other->item_name_custom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCNameItemNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCNameItemNotification_descriptor_;
  metadata.reflection = CMsgGCNameItemNotification_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgGCClientDisplayNotification::_default_notification_title_localization_key_;
const ::std::string CMsgGCClientDisplayNotification::_default_notification_body_localization_key_;
#ifndef _MSC_VER
const int CMsgGCClientDisplayNotification::kNotificationTitleLocalizationKeyFieldNumber;
const int CMsgGCClientDisplayNotification::kNotificationBodyLocalizationKeyFieldNumber;
const int CMsgGCClientDisplayNotification::kBodySubstringKeysFieldNumber;
const int CMsgGCClientDisplayNotification::kBodySubstringValuesFieldNumber;
#endif  // !_MSC_VER

CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCClientDisplayNotification::InitAsDefaultInstance() {
}

CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(const CMsgGCClientDisplayNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCClientDisplayNotification::SharedCtor() {
  _cached_size_ = 0;
  notification_title_localization_key_ = const_cast< ::std::string*>(&_default_notification_title_localization_key_);
  notification_body_localization_key_ = const_cast< ::std::string*>(&_default_notification_body_localization_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCClientDisplayNotification::~CMsgGCClientDisplayNotification() {
  SharedDtor();
}

void CMsgGCClientDisplayNotification::SharedDtor() {
  if (notification_title_localization_key_ != &_default_notification_title_localization_key_) {
    delete notification_title_localization_key_;
  }
  if (notification_body_localization_key_ != &_default_notification_body_localization_key_) {
    delete notification_body_localization_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCClientDisplayNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientDisplayNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCClientDisplayNotification_descriptor_;
}

const CMsgGCClientDisplayNotification& CMsgGCClientDisplayNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCClientDisplayNotification* CMsgGCClientDisplayNotification::default_instance_ = NULL;

CMsgGCClientDisplayNotification* CMsgGCClientDisplayNotification::New() const {
  return new CMsgGCClientDisplayNotification;
}

void CMsgGCClientDisplayNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (notification_title_localization_key_ != &_default_notification_title_localization_key_) {
        notification_title_localization_key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (notification_body_localization_key_ != &_default_notification_body_localization_key_) {
        notification_body_localization_key_->clear();
      }
    }
  }
  body_substring_keys_.Clear();
  body_substring_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCClientDisplayNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notification_title_localization_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_title_localization_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notification_title_localization_key().data(), this->notification_title_localization_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notification_body_localization_key;
        break;
      }
      
      // optional string notification_body_localization_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification_body_localization_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_body_localization_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notification_body_localization_key().data(), this->notification_body_localization_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body_substring_keys;
        break;
      }
      
      // repeated string body_substring_keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_substring_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body_substring_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body_substring_keys(0).data(), this->body_substring_keys(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body_substring_keys;
        if (input->ExpectTag(34)) goto parse_body_substring_values;
        break;
      }
      
      // repeated string body_substring_values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_substring_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body_substring_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body_substring_values(0).data(), this->body_substring_values(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_body_substring_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCClientDisplayNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string notification_title_localization_key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notification_title_localization_key().data(), this->notification_title_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notification_title_localization_key(), output);
  }
  
  // optional string notification_body_localization_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notification_body_localization_key().data(), this->notification_body_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notification_body_localization_key(), output);
  }
  
  // repeated string body_substring_keys = 3;
  for (int i = 0; i < this->body_substring_keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->body_substring_keys(i).data(), this->body_substring_keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->body_substring_keys(i), output);
  }
  
  // repeated string body_substring_values = 4;
  for (int i = 0; i < this->body_substring_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->body_substring_values(i).data(), this->body_substring_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->body_substring_values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCClientDisplayNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string notification_title_localization_key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notification_title_localization_key().data(), this->notification_title_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notification_title_localization_key(), target);
  }
  
  // optional string notification_body_localization_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notification_body_localization_key().data(), this->notification_body_localization_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notification_body_localization_key(), target);
  }
  
  // repeated string body_substring_keys = 3;
  for (int i = 0; i < this->body_substring_keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_substring_keys(i).data(), this->body_substring_keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->body_substring_keys(i), target);
  }
  
  // repeated string body_substring_values = 4;
  for (int i = 0; i < this->body_substring_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_substring_values(i).data(), this->body_substring_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->body_substring_values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCClientDisplayNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string notification_title_localization_key = 1;
    if (has_notification_title_localization_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_title_localization_key());
    }
    
    // optional string notification_body_localization_key = 2;
    if (has_notification_body_localization_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_body_localization_key());
    }
    
  }
  // repeated string body_substring_keys = 3;
  total_size += 1 * this->body_substring_keys_size();
  for (int i = 0; i < this->body_substring_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body_substring_keys(i));
  }
  
  // repeated string body_substring_values = 4;
  total_size += 1 * this->body_substring_values_size();
  for (int i = 0; i < this->body_substring_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body_substring_values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientDisplayNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCClientDisplayNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCClientDisplayNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCClientDisplayNotification::MergeFrom(const CMsgGCClientDisplayNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_substring_keys_.MergeFrom(from.body_substring_keys_);
  body_substring_values_.MergeFrom(from.body_substring_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_notification_title_localization_key(from.notification_title_localization_key());
    }
    if (from._has_bit(1)) {
      set_notification_body_localization_key(from.notification_body_localization_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCClientDisplayNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientDisplayNotification::CopyFrom(const CMsgGCClientDisplayNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientDisplayNotification::IsInitialized() const {
  
  return true;
}

void CMsgGCClientDisplayNotification::Swap(CMsgGCClientDisplayNotification* other) {
  if (other != this) {
    std::swap(notification_title_localization_key_, other->notification_title_localization_key_);
    std::swap(notification_body_localization_key_, other->notification_body_localization_key_);
    body_substring_keys_.Swap(&other->body_substring_keys_);
    body_substring_values_.Swap(&other->body_substring_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCClientDisplayNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCClientDisplayNotification_descriptor_;
  metadata.reflection = CMsgGCClientDisplayNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCShowItemsPickedUp::kPlayerSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCShowItemsPickedUp::InitAsDefaultInstance() {
}

CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(const CMsgGCShowItemsPickedUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCShowItemsPickedUp::SharedCtor() {
  _cached_size_ = 0;
  player_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCShowItemsPickedUp::~CMsgGCShowItemsPickedUp() {
  SharedDtor();
}

void CMsgGCShowItemsPickedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCShowItemsPickedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCShowItemsPickedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCShowItemsPickedUp_descriptor_;
}

const CMsgGCShowItemsPickedUp& CMsgGCShowItemsPickedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCShowItemsPickedUp* CMsgGCShowItemsPickedUp::default_instance_ = NULL;

CMsgGCShowItemsPickedUp* CMsgGCShowItemsPickedUp::New() const {
  return new CMsgGCShowItemsPickedUp;
}

void CMsgGCShowItemsPickedUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCShowItemsPickedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_steamid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCShowItemsPickedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 player_steamid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_steamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCShowItemsPickedUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 player_steamid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_steamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCShowItemsPickedUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 player_steamid = 1;
    if (has_player_steamid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCShowItemsPickedUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCShowItemsPickedUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCShowItemsPickedUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCShowItemsPickedUp::MergeFrom(const CMsgGCShowItemsPickedUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_player_steamid(from.player_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCShowItemsPickedUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCShowItemsPickedUp::CopyFrom(const CMsgGCShowItemsPickedUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCShowItemsPickedUp::IsInitialized() const {
  
  return true;
}

void CMsgGCShowItemsPickedUp::Swap(CMsgGCShowItemsPickedUp* other) {
  if (other != this) {
    std::swap(player_steamid_, other->player_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCShowItemsPickedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCShowItemsPickedUp_descriptor_;
  metadata.reflection = CMsgGCShowItemsPickedUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgUpdatePeriodicEvent::kAccountIdFieldNumber;
const int CMsgUpdatePeriodicEvent::kEventTypeFieldNumber;
const int CMsgUpdatePeriodicEvent::kAmountFieldNumber;
#endif  // !_MSC_VER

CMsgUpdatePeriodicEvent::CMsgUpdatePeriodicEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgUpdatePeriodicEvent::InitAsDefaultInstance() {
}

CMsgUpdatePeriodicEvent::CMsgUpdatePeriodicEvent(const CMsgUpdatePeriodicEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgUpdatePeriodicEvent::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  event_type_ = 0u;
  amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUpdatePeriodicEvent::~CMsgUpdatePeriodicEvent() {
  SharedDtor();
}

void CMsgUpdatePeriodicEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgUpdatePeriodicEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUpdatePeriodicEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUpdatePeriodicEvent_descriptor_;
}

const CMsgUpdatePeriodicEvent& CMsgUpdatePeriodicEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgUpdatePeriodicEvent* CMsgUpdatePeriodicEvent::default_instance_ = NULL;

CMsgUpdatePeriodicEvent* CMsgUpdatePeriodicEvent::New() const {
  return new CMsgUpdatePeriodicEvent;
}

void CMsgUpdatePeriodicEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    event_type_ = 0u;
    amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUpdatePeriodicEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }
      
      // optional uint32 event_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }
      
      // optional uint32 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgUpdatePeriodicEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional uint32 event_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_type(), output);
  }
  
  // optional uint32 amount = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgUpdatePeriodicEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional uint32 event_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_type(), target);
  }
  
  // optional uint32 amount = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgUpdatePeriodicEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional uint32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }
    
    // optional uint32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUpdatePeriodicEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUpdatePeriodicEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUpdatePeriodicEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUpdatePeriodicEvent::MergeFrom(const CMsgUpdatePeriodicEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_event_type(from.event_type());
    }
    if (from._has_bit(2)) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUpdatePeriodicEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdatePeriodicEvent::CopyFrom(const CMsgUpdatePeriodicEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdatePeriodicEvent::IsInitialized() const {
  
  return true;
}

void CMsgUpdatePeriodicEvent::Swap(CMsgUpdatePeriodicEvent* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUpdatePeriodicEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUpdatePeriodicEvent_descriptor_;
  metadata.reflection = CMsgUpdatePeriodicEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCIncrementKillCountResponse::kKillerAccountIdFieldNumber;
const int CMsgGCIncrementKillCountResponse::kNumKillsFieldNumber;
const int CMsgGCIncrementKillCountResponse::kItemDefFieldNumber;
const int CMsgGCIncrementKillCountResponse::kLevelTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCIncrementKillCountResponse::InitAsDefaultInstance() {
}

CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(const CMsgGCIncrementKillCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCIncrementKillCountResponse::SharedCtor() {
  _cached_size_ = 0;
  killer_account_id_ = 0u;
  num_kills_ = 0u;
  item_def_ = 0u;
  level_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCIncrementKillCountResponse::~CMsgGCIncrementKillCountResponse() {
  SharedDtor();
}

void CMsgGCIncrementKillCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCIncrementKillCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCIncrementKillCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCIncrementKillCountResponse_descriptor_;
}

const CMsgGCIncrementKillCountResponse& CMsgGCIncrementKillCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCIncrementKillCountResponse* CMsgGCIncrementKillCountResponse::default_instance_ = NULL;

CMsgGCIncrementKillCountResponse* CMsgGCIncrementKillCountResponse::New() const {
  return new CMsgGCIncrementKillCountResponse;
}

void CMsgGCIncrementKillCountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killer_account_id_ = 0u;
    num_kills_ = 0u;
    item_def_ = 0u;
    level_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCIncrementKillCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killer_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_kills;
        break;
      }
      
      // optional uint32 num_kills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_kills_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_def;
        break;
      }
      
      // optional uint32 item_def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level_type;
        break;
      }
      
      // optional uint32 level_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_type_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCIncrementKillCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 killer_account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killer_account_id(), output);
  }
  
  // optional uint32 num_kills = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_kills(), output);
  }
  
  // optional uint32 item_def = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_def(), output);
  }
  
  // optional uint32 level_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCIncrementKillCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 killer_account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killer_account_id(), target);
  }
  
  // optional uint32 num_kills = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_kills(), target);
  }
  
  // optional uint32 item_def = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_def(), target);
  }
  
  // optional uint32 level_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCIncrementKillCountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 killer_account_id = 1;
    if (has_killer_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_account_id());
    }
    
    // optional uint32 num_kills = 2;
    if (has_num_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_kills());
    }
    
    // optional uint32 item_def = 3;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }
    
    // optional uint32 level_type = 4;
    if (has_level_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCIncrementKillCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCIncrementKillCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const CMsgGCIncrementKillCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_killer_account_id(from.killer_account_id());
    }
    if (from._has_bit(1)) {
      set_num_kills(from.num_kills());
    }
    if (from._has_bit(2)) {
      set_item_def(from.item_def());
    }
    if (from._has_bit(3)) {
      set_level_type(from.level_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const CMsgGCIncrementKillCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIncrementKillCountResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCIncrementKillCountResponse::Swap(CMsgGCIncrementKillCountResponse* other) {
  if (other != this) {
    std::swap(killer_account_id_, other->killer_account_id_);
    std::swap(num_kills_, other->num_kills_);
    std::swap(item_def_, other->item_def_);
    std::swap(level_type_, other->level_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCIncrementKillCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCIncrementKillCountResponse_descriptor_;
  metadata.reflection = CMsgGCIncrementKillCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRemoveStrangePart::kItemIdFieldNumber;
const int CMsgGCRemoveStrangePart::kStrangePartScoreTypeFieldNumber;
#endif  // !_MSC_VER

CMsgGCRemoveStrangePart::CMsgGCRemoveStrangePart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRemoveStrangePart::InitAsDefaultInstance() {
}

CMsgGCRemoveStrangePart::CMsgGCRemoveStrangePart(const CMsgGCRemoveStrangePart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRemoveStrangePart::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  strange_part_score_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRemoveStrangePart::~CMsgGCRemoveStrangePart() {
  SharedDtor();
}

void CMsgGCRemoveStrangePart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRemoveStrangePart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRemoveStrangePart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRemoveStrangePart_descriptor_;
}

const CMsgGCRemoveStrangePart& CMsgGCRemoveStrangePart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRemoveStrangePart* CMsgGCRemoveStrangePart::default_instance_ = NULL;

CMsgGCRemoveStrangePart* CMsgGCRemoveStrangePart::New() const {
  return new CMsgGCRemoveStrangePart;
}

void CMsgGCRemoveStrangePart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    strange_part_score_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRemoveStrangePart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strange_part_score_type;
        break;
      }
      
      // optional uint32 strange_part_score_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strange_part_score_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strange_part_score_type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRemoveStrangePart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint32 strange_part_score_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strange_part_score_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRemoveStrangePart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint32 strange_part_score_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strange_part_score_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRemoveStrangePart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 strange_part_score_type = 2;
    if (has_strange_part_score_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strange_part_score_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRemoveStrangePart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRemoveStrangePart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRemoveStrangePart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRemoveStrangePart::MergeFrom(const CMsgGCRemoveStrangePart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_strange_part_score_type(from.strange_part_score_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRemoveStrangePart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRemoveStrangePart::CopyFrom(const CMsgGCRemoveStrangePart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRemoveStrangePart::IsInitialized() const {
  
  return true;
}

void CMsgGCRemoveStrangePart::Swap(CMsgGCRemoveStrangePart* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(strange_part_score_type_, other->strange_part_score_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRemoveStrangePart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRemoveStrangePart_descriptor_;
  metadata.reflection = CMsgGCRemoveStrangePart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRemoveUpgradeCard::kItemIdFieldNumber;
const int CMsgGCRemoveUpgradeCard::kAttributeIndexFieldNumber;
#endif  // !_MSC_VER

CMsgGCRemoveUpgradeCard::CMsgGCRemoveUpgradeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRemoveUpgradeCard::InitAsDefaultInstance() {
}

CMsgGCRemoveUpgradeCard::CMsgGCRemoveUpgradeCard(const CMsgGCRemoveUpgradeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRemoveUpgradeCard::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  attribute_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRemoveUpgradeCard::~CMsgGCRemoveUpgradeCard() {
  SharedDtor();
}

void CMsgGCRemoveUpgradeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRemoveUpgradeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRemoveUpgradeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRemoveUpgradeCard_descriptor_;
}

const CMsgGCRemoveUpgradeCard& CMsgGCRemoveUpgradeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRemoveUpgradeCard* CMsgGCRemoveUpgradeCard::default_instance_ = NULL;

CMsgGCRemoveUpgradeCard* CMsgGCRemoveUpgradeCard::New() const {
  return new CMsgGCRemoveUpgradeCard;
}

void CMsgGCRemoveUpgradeCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    attribute_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRemoveUpgradeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_index;
        break;
      }
      
      // optional uint32 attribute_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRemoveUpgradeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional uint32 attribute_index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRemoveUpgradeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional uint32 attribute_index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRemoveUpgradeCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional uint32 attribute_index = 2;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRemoveUpgradeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRemoveUpgradeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRemoveUpgradeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRemoveUpgradeCard::MergeFrom(const CMsgGCRemoveUpgradeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_attribute_index(from.attribute_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRemoveUpgradeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRemoveUpgradeCard::CopyFrom(const CMsgGCRemoveUpgradeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRemoveUpgradeCard::IsInitialized() const {
  
  return true;
}

void CMsgGCRemoveUpgradeCard::Swap(CMsgGCRemoveUpgradeCard* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRemoveUpgradeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRemoveUpgradeCard_descriptor_;
  metadata.reflection = CMsgGCRemoveUpgradeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRemoveCustomizationAttributeSimple::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCRemoveCustomizationAttributeSimple::CMsgGCRemoveCustomizationAttributeSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCRemoveCustomizationAttributeSimple::InitAsDefaultInstance() {
}

CMsgGCRemoveCustomizationAttributeSimple::CMsgGCRemoveCustomizationAttributeSimple(const CMsgGCRemoveCustomizationAttributeSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCRemoveCustomizationAttributeSimple::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRemoveCustomizationAttributeSimple::~CMsgGCRemoveCustomizationAttributeSimple() {
  SharedDtor();
}

void CMsgGCRemoveCustomizationAttributeSimple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRemoveCustomizationAttributeSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRemoveCustomizationAttributeSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRemoveCustomizationAttributeSimple_descriptor_;
}

const CMsgGCRemoveCustomizationAttributeSimple& CMsgGCRemoveCustomizationAttributeSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCRemoveCustomizationAttributeSimple* CMsgGCRemoveCustomizationAttributeSimple::default_instance_ = NULL;

CMsgGCRemoveCustomizationAttributeSimple* CMsgGCRemoveCustomizationAttributeSimple::New() const {
  return new CMsgGCRemoveCustomizationAttributeSimple;
}

void CMsgGCRemoveCustomizationAttributeSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCRemoveCustomizationAttributeSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCRemoveCustomizationAttributeSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCRemoveCustomizationAttributeSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCRemoveCustomizationAttributeSimple::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRemoveCustomizationAttributeSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCRemoveCustomizationAttributeSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCRemoveCustomizationAttributeSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRemoveCustomizationAttributeSimple::MergeFrom(const CMsgGCRemoveCustomizationAttributeSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCRemoveCustomizationAttributeSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRemoveCustomizationAttributeSimple::CopyFrom(const CMsgGCRemoveCustomizationAttributeSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRemoveCustomizationAttributeSimple::IsInitialized() const {
  
  return true;
}

void CMsgGCRemoveCustomizationAttributeSimple::Swap(CMsgGCRemoveCustomizationAttributeSimple* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCRemoveCustomizationAttributeSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRemoveCustomizationAttributeSimple_descriptor_;
  metadata.reflection = CMsgGCRemoveCustomizationAttributeSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCResetStrangeScores::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCResetStrangeScores::CMsgGCResetStrangeScores()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCResetStrangeScores::InitAsDefaultInstance() {
}

CMsgGCResetStrangeScores::CMsgGCResetStrangeScores(const CMsgGCResetStrangeScores& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCResetStrangeScores::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCResetStrangeScores::~CMsgGCResetStrangeScores() {
  SharedDtor();
}

void CMsgGCResetStrangeScores::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCResetStrangeScores::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCResetStrangeScores::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCResetStrangeScores_descriptor_;
}

const CMsgGCResetStrangeScores& CMsgGCResetStrangeScores::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCResetStrangeScores* CMsgGCResetStrangeScores::default_instance_ = NULL;

CMsgGCResetStrangeScores* CMsgGCResetStrangeScores::New() const {
  return new CMsgGCResetStrangeScores;
}

void CMsgGCResetStrangeScores::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCResetStrangeScores::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCResetStrangeScores::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCResetStrangeScores::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCResetStrangeScores::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCResetStrangeScores::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCResetStrangeScores* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCResetStrangeScores*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCResetStrangeScores::MergeFrom(const CMsgGCResetStrangeScores& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCResetStrangeScores::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCResetStrangeScores::CopyFrom(const CMsgGCResetStrangeScores& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCResetStrangeScores::IsInitialized() const {
  
  return true;
}

void CMsgGCResetStrangeScores::Swap(CMsgGCResetStrangeScores* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCResetStrangeScores::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCResetStrangeScores_descriptor_;
  metadata.reflection = CMsgGCResetStrangeScores_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCItemPreviewItemBoughtNotification::kItemDefIndexFieldNumber;
#endif  // !_MSC_VER

CMsgGCItemPreviewItemBoughtNotification::CMsgGCItemPreviewItemBoughtNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCItemPreviewItemBoughtNotification::InitAsDefaultInstance() {
}

CMsgGCItemPreviewItemBoughtNotification::CMsgGCItemPreviewItemBoughtNotification(const CMsgGCItemPreviewItemBoughtNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCItemPreviewItemBoughtNotification::SharedCtor() {
  _cached_size_ = 0;
  item_def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCItemPreviewItemBoughtNotification::~CMsgGCItemPreviewItemBoughtNotification() {
  SharedDtor();
}

void CMsgGCItemPreviewItemBoughtNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCItemPreviewItemBoughtNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCItemPreviewItemBoughtNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCItemPreviewItemBoughtNotification_descriptor_;
}

const CMsgGCItemPreviewItemBoughtNotification& CMsgGCItemPreviewItemBoughtNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCItemPreviewItemBoughtNotification* CMsgGCItemPreviewItemBoughtNotification::default_instance_ = NULL;

CMsgGCItemPreviewItemBoughtNotification* CMsgGCItemPreviewItemBoughtNotification::New() const {
  return new CMsgGCItemPreviewItemBoughtNotification;
}

void CMsgGCItemPreviewItemBoughtNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCItemPreviewItemBoughtNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCItemPreviewItemBoughtNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCItemPreviewItemBoughtNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCItemPreviewItemBoughtNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def_index = 1;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCItemPreviewItemBoughtNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCItemPreviewItemBoughtNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCItemPreviewItemBoughtNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCItemPreviewItemBoughtNotification::MergeFrom(const CMsgGCItemPreviewItemBoughtNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_def_index(from.item_def_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCItemPreviewItemBoughtNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCItemPreviewItemBoughtNotification::CopyFrom(const CMsgGCItemPreviewItemBoughtNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCItemPreviewItemBoughtNotification::IsInitialized() const {
  
  return true;
}

void CMsgGCItemPreviewItemBoughtNotification::Swap(CMsgGCItemPreviewItemBoughtNotification* other) {
  if (other != this) {
    std::swap(item_def_index_, other->item_def_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCItemPreviewItemBoughtNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCItemPreviewItemBoughtNotification_descriptor_;
  metadata.reflection = CMsgGCItemPreviewItemBoughtNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCStorePurchaseCancel::kTxnIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCStorePurchaseCancel::InitAsDefaultInstance() {
}

CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(const CMsgGCStorePurchaseCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancel::SharedCtor() {
  _cached_size_ = 0;
  txn_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCStorePurchaseCancel::~CMsgGCStorePurchaseCancel() {
  SharedDtor();
}

void CMsgGCStorePurchaseCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCStorePurchaseCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCStorePurchaseCancel_descriptor_;
}

const CMsgGCStorePurchaseCancel& CMsgGCStorePurchaseCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCStorePurchaseCancel* CMsgGCStorePurchaseCancel::default_instance_ = NULL;

CMsgGCStorePurchaseCancel* CMsgGCStorePurchaseCancel::New() const {
  return new CMsgGCStorePurchaseCancel;
}

void CMsgGCStorePurchaseCancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    txn_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCStorePurchaseCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCStorePurchaseCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 txn_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCStorePurchaseCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 txn_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCStorePurchaseCancel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 txn_id = 1;
    if (has_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCStorePurchaseCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancel::MergeFrom(const CMsgGCStorePurchaseCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_txn_id(from.txn_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCStorePurchaseCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancel::CopyFrom(const CMsgGCStorePurchaseCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancel::IsInitialized() const {
  
  return true;
}

void CMsgGCStorePurchaseCancel::Swap(CMsgGCStorePurchaseCancel* other) {
  if (other != this) {
    std::swap(txn_id_, other->txn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCStorePurchaseCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCStorePurchaseCancel_descriptor_;
  metadata.reflection = CMsgGCStorePurchaseCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCStorePurchaseCancelResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCStorePurchaseCancelResponse::InitAsDefaultInstance() {
}

CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(const CMsgGCStorePurchaseCancelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancelResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCStorePurchaseCancelResponse::~CMsgGCStorePurchaseCancelResponse() {
  SharedDtor();
}

void CMsgGCStorePurchaseCancelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCStorePurchaseCancelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseCancelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCStorePurchaseCancelResponse_descriptor_;
}

const CMsgGCStorePurchaseCancelResponse& CMsgGCStorePurchaseCancelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCStorePurchaseCancelResponse* CMsgGCStorePurchaseCancelResponse::default_instance_ = NULL;

CMsgGCStorePurchaseCancelResponse* CMsgGCStorePurchaseCancelResponse::New() const {
  return new CMsgGCStorePurchaseCancelResponse;
}

void CMsgGCStorePurchaseCancelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCStorePurchaseCancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCStorePurchaseCancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCStorePurchaseCancelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCStorePurchaseCancelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCStorePurchaseCancelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const CMsgGCStorePurchaseCancelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const CMsgGCStorePurchaseCancelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancelResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCStorePurchaseCancelResponse::Swap(CMsgGCStorePurchaseCancelResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCStorePurchaseCancelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCStorePurchaseCancelResponse_descriptor_;
  metadata.reflection = CMsgGCStorePurchaseCancelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCStorePurchaseFinalize::kTxnIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCStorePurchaseFinalize::InitAsDefaultInstance() {
}

CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(const CMsgGCStorePurchaseFinalize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalize::SharedCtor() {
  _cached_size_ = 0;
  txn_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCStorePurchaseFinalize::~CMsgGCStorePurchaseFinalize() {
  SharedDtor();
}

void CMsgGCStorePurchaseFinalize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCStorePurchaseFinalize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseFinalize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCStorePurchaseFinalize_descriptor_;
}

const CMsgGCStorePurchaseFinalize& CMsgGCStorePurchaseFinalize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCStorePurchaseFinalize* CMsgGCStorePurchaseFinalize::default_instance_ = NULL;

CMsgGCStorePurchaseFinalize* CMsgGCStorePurchaseFinalize::New() const {
  return new CMsgGCStorePurchaseFinalize;
}

void CMsgGCStorePurchaseFinalize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    txn_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCStorePurchaseFinalize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCStorePurchaseFinalize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 txn_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCStorePurchaseFinalize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 txn_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCStorePurchaseFinalize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 txn_id = 1;
    if (has_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCStorePurchaseFinalize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const CMsgGCStorePurchaseFinalize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_txn_id(from.txn_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const CMsgGCStorePurchaseFinalize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalize::IsInitialized() const {
  
  return true;
}

void CMsgGCStorePurchaseFinalize::Swap(CMsgGCStorePurchaseFinalize* other) {
  if (other != this) {
    std::swap(txn_id_, other->txn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCStorePurchaseFinalize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCStorePurchaseFinalize_descriptor_;
  metadata.reflection = CMsgGCStorePurchaseFinalize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCStorePurchaseFinalizeResponse::kResultFieldNumber;
const int CMsgGCStorePurchaseFinalizeResponse::kItemIdsFieldNumber;
#endif  // !_MSC_VER

CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCStorePurchaseFinalizeResponse::InitAsDefaultInstance() {
}

CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(const CMsgGCStorePurchaseFinalizeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalizeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCStorePurchaseFinalizeResponse::~CMsgGCStorePurchaseFinalizeResponse() {
  SharedDtor();
}

void CMsgGCStorePurchaseFinalizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCStorePurchaseFinalizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCStorePurchaseFinalizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCStorePurchaseFinalizeResponse_descriptor_;
}

const CMsgGCStorePurchaseFinalizeResponse& CMsgGCStorePurchaseFinalizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCStorePurchaseFinalizeResponse* CMsgGCStorePurchaseFinalizeResponse::default_instance_ = NULL;

CMsgGCStorePurchaseFinalizeResponse* CMsgGCStorePurchaseFinalizeResponse::New() const {
  return new CMsgGCStorePurchaseFinalizeResponse;
}

void CMsgGCStorePurchaseFinalizeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCStorePurchaseFinalizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_ids;
        break;
      }
      
      // repeated uint64 item_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCStorePurchaseFinalizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  // repeated uint64 item_ids = 2;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->item_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCStorePurchaseFinalizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // repeated uint64 item_ids = 2;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->item_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCStorePurchaseFinalizeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  // repeated uint64 item_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalizeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCStorePurchaseFinalizeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalizeResponse::IsInitialized() const {
  
  return true;
}

void CMsgGCStorePurchaseFinalizeResponse::Swap(CMsgGCStorePurchaseFinalizeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCStorePurchaseFinalizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCStorePurchaseFinalizeResponse_descriptor_;
  metadata.reflection = CMsgGCStorePurchaseFinalizeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCBannedWordListRequest::kBanListGroupIdFieldNumber;
const int CMsgGCBannedWordListRequest::kWordIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCBannedWordListRequest::CMsgGCBannedWordListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCBannedWordListRequest::InitAsDefaultInstance() {
}

CMsgGCBannedWordListRequest::CMsgGCBannedWordListRequest(const CMsgGCBannedWordListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCBannedWordListRequest::SharedCtor() {
  _cached_size_ = 0;
  ban_list_group_id_ = 0u;
  word_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCBannedWordListRequest::~CMsgGCBannedWordListRequest() {
  SharedDtor();
}

void CMsgGCBannedWordListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCBannedWordListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCBannedWordListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCBannedWordListRequest_descriptor_;
}

const CMsgGCBannedWordListRequest& CMsgGCBannedWordListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCBannedWordListRequest* CMsgGCBannedWordListRequest::default_instance_ = NULL;

CMsgGCBannedWordListRequest* CMsgGCBannedWordListRequest::New() const {
  return new CMsgGCBannedWordListRequest;
}

void CMsgGCBannedWordListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ban_list_group_id_ = 0u;
    word_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCBannedWordListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ban_list_group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ban_list_group_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_word_id;
        break;
      }
      
      // optional uint32 word_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &word_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCBannedWordListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ban_list_group_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ban_list_group_id(), output);
  }
  
  // optional uint32 word_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->word_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCBannedWordListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ban_list_group_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ban_list_group_id(), target);
  }
  
  // optional uint32 word_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->word_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCBannedWordListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ban_list_group_id = 1;
    if (has_ban_list_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ban_list_group_id());
    }
    
    // optional uint32 word_id = 2;
    if (has_word_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->word_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCBannedWordListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCBannedWordListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCBannedWordListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCBannedWordListRequest::MergeFrom(const CMsgGCBannedWordListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ban_list_group_id(from.ban_list_group_id());
    }
    if (from._has_bit(1)) {
      set_word_id(from.word_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCBannedWordListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCBannedWordListRequest::CopyFrom(const CMsgGCBannedWordListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBannedWordListRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCBannedWordListRequest::Swap(CMsgGCBannedWordListRequest* other) {
  if (other != this) {
    std::swap(ban_list_group_id_, other->ban_list_group_id_);
    std::swap(word_id_, other->word_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCBannedWordListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCBannedWordListRequest_descriptor_;
  metadata.reflection = CMsgGCBannedWordListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCGiftedItems::kGifterSteamIdFieldNumber;
const int CMsgGCGiftedItems::kWasRandomPersonFieldNumber;
const int CMsgGCGiftedItems::kRecipientAccountIdsFieldNumber;
#endif  // !_MSC_VER

CMsgGCGiftedItems::CMsgGCGiftedItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCGiftedItems::InitAsDefaultInstance() {
}

CMsgGCGiftedItems::CMsgGCGiftedItems(const CMsgGCGiftedItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCGiftedItems::SharedCtor() {
  _cached_size_ = 0;
  gifter_steam_id_ = GOOGLE_ULONGLONG(0);
  was_random_person_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCGiftedItems::~CMsgGCGiftedItems() {
  SharedDtor();
}

void CMsgGCGiftedItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCGiftedItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGiftedItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCGiftedItems_descriptor_;
}

const CMsgGCGiftedItems& CMsgGCGiftedItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCGiftedItems* CMsgGCGiftedItems::default_instance_ = NULL;

CMsgGCGiftedItems* CMsgGCGiftedItems::New() const {
  return new CMsgGCGiftedItems;
}

void CMsgGCGiftedItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gifter_steam_id_ = GOOGLE_ULONGLONG(0);
    was_random_person_ = false;
  }
  recipient_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCGiftedItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gifter_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gifter_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_was_random_person;
        break;
      }
      
      // optional bool was_random_person = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_random_person:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_random_person_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recipient_account_ids;
        break;
      }
      
      // repeated uint32 recipient_account_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipient_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_recipient_account_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recipient_account_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recipient_account_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCGiftedItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 gifter_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gifter_steam_id(), output);
  }
  
  // optional bool was_random_person = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->was_random_person(), output);
  }
  
  // repeated uint32 recipient_account_ids = 3;
  for (int i = 0; i < this->recipient_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->recipient_account_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCGiftedItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 gifter_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gifter_steam_id(), target);
  }
  
  // optional bool was_random_person = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->was_random_person(), target);
  }
  
  // repeated uint32 recipient_account_ids = 3;
  for (int i = 0; i < this->recipient_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->recipient_account_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCGiftedItems::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 gifter_steam_id = 1;
    if (has_gifter_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gifter_steam_id());
    }
    
    // optional bool was_random_person = 2;
    if (has_was_random_person()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated uint32 recipient_account_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->recipient_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recipient_account_ids(i));
    }
    total_size += 1 * this->recipient_account_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGiftedItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCGiftedItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCGiftedItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCGiftedItems::MergeFrom(const CMsgGCGiftedItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipient_account_ids_.MergeFrom(from.recipient_account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gifter_steam_id(from.gifter_steam_id());
    }
    if (from._has_bit(1)) {
      set_was_random_person(from.was_random_person());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCGiftedItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGiftedItems::CopyFrom(const CMsgGCGiftedItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGiftedItems::IsInitialized() const {
  
  return true;
}

void CMsgGCGiftedItems::Swap(CMsgGCGiftedItems* other) {
  if (other != this) {
    std::swap(gifter_steam_id_, other->gifter_steam_id_);
    std::swap(was_random_person_, other->was_random_person_);
    recipient_account_ids_.Swap(&other->recipient_account_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCGiftedItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCGiftedItems_descriptor_;
  metadata.reflection = CMsgGCGiftedItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCCollectItem::kCollectionItemIdFieldNumber;
const int CMsgGCCollectItem::kSubjectItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCCollectItem::CMsgGCCollectItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCCollectItem::InitAsDefaultInstance() {
}

CMsgGCCollectItem::CMsgGCCollectItem(const CMsgGCCollectItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCCollectItem::SharedCtor() {
  _cached_size_ = 0;
  collection_item_id_ = GOOGLE_ULONGLONG(0);
  subject_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCCollectItem::~CMsgGCCollectItem() {
  SharedDtor();
}

void CMsgGCCollectItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCCollectItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCollectItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCCollectItem_descriptor_;
}

const CMsgGCCollectItem& CMsgGCCollectItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCCollectItem* CMsgGCCollectItem::default_instance_ = NULL;

CMsgGCCollectItem* CMsgGCCollectItem::New() const {
  return new CMsgGCCollectItem;
}

void CMsgGCCollectItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collection_item_id_ = GOOGLE_ULONGLONG(0);
    subject_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCCollectItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 collection_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subject_item_id;
        break;
      }
      
      // optional uint64 subject_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subject_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCCollectItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 collection_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->collection_item_id(), output);
  }
  
  // optional uint64 subject_item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subject_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCCollectItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 collection_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->collection_item_id(), target);
  }
  
  // optional uint64 subject_item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subject_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCCollectItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 collection_item_id = 1;
    if (has_collection_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collection_item_id());
    }
    
    // optional uint64 subject_item_id = 2;
    if (has_subject_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCollectItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCCollectItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCCollectItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCCollectItem::MergeFrom(const CMsgGCCollectItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_collection_item_id(from.collection_item_id());
    }
    if (from._has_bit(1)) {
      set_subject_item_id(from.subject_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCCollectItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCollectItem::CopyFrom(const CMsgGCCollectItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCollectItem::IsInitialized() const {
  
  return true;
}

void CMsgGCCollectItem::Swap(CMsgGCCollectItem* other) {
  if (other != this) {
    std::swap(collection_item_id_, other->collection_item_id_);
    std::swap(subject_item_id_, other->subject_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCCollectItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCCollectItem_descriptor_;
  metadata.reflection = CMsgGCCollectItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCClientMarketDataRequest::kUserCurrencyFieldNumber;
#endif  // !_MSC_VER

CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCClientMarketDataRequest::InitAsDefaultInstance() {
}

CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest(const CMsgGCClientMarketDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCClientMarketDataRequest::SharedCtor() {
  _cached_size_ = 0;
  user_currency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCClientMarketDataRequest::~CMsgGCClientMarketDataRequest() {
  SharedDtor();
}

void CMsgGCClientMarketDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCClientMarketDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientMarketDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCClientMarketDataRequest_descriptor_;
}

const CMsgGCClientMarketDataRequest& CMsgGCClientMarketDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCClientMarketDataRequest* CMsgGCClientMarketDataRequest::default_instance_ = NULL;

CMsgGCClientMarketDataRequest* CMsgGCClientMarketDataRequest::New() const {
  return new CMsgGCClientMarketDataRequest;
}

void CMsgGCClientMarketDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_currency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCClientMarketDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_currency_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCClientMarketDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user_currency = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_currency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCClientMarketDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 user_currency = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_currency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCClientMarketDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user_currency = 1;
    if (has_user_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_currency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientMarketDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCClientMarketDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCClientMarketDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataRequest::MergeFrom(const CMsgGCClientMarketDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user_currency(from.user_currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCClientMarketDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataRequest::CopyFrom(const CMsgGCClientMarketDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataRequest::IsInitialized() const {
  
  return true;
}

void CMsgGCClientMarketDataRequest::Swap(CMsgGCClientMarketDataRequest* other) {
  if (other != this) {
    std::swap(user_currency_, other->user_currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCClientMarketDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCClientMarketDataRequest_descriptor_;
  metadata.reflection = CMsgGCClientMarketDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCClientMarketDataEntry::kItemDefIndexFieldNumber;
const int CMsgGCClientMarketDataEntry::kItemQualityFieldNumber;
const int CMsgGCClientMarketDataEntry::kItemSellListingsFieldNumber;
const int CMsgGCClientMarketDataEntry::kPriceInLocalCurrencyFieldNumber;
#endif  // !_MSC_VER

CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCClientMarketDataEntry::InitAsDefaultInstance() {
}

CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry(const CMsgGCClientMarketDataEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCClientMarketDataEntry::SharedCtor() {
  _cached_size_ = 0;
  item_def_index_ = 0u;
  item_quality_ = 0u;
  item_sell_listings_ = 0u;
  price_in_local_currency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCClientMarketDataEntry::~CMsgGCClientMarketDataEntry() {
  SharedDtor();
}

void CMsgGCClientMarketDataEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCClientMarketDataEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientMarketDataEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCClientMarketDataEntry_descriptor_;
}

const CMsgGCClientMarketDataEntry& CMsgGCClientMarketDataEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCClientMarketDataEntry* CMsgGCClientMarketDataEntry::default_instance_ = NULL;

CMsgGCClientMarketDataEntry* CMsgGCClientMarketDataEntry::New() const {
  return new CMsgGCClientMarketDataEntry;
}

void CMsgGCClientMarketDataEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_def_index_ = 0u;
    item_quality_ = 0u;
    item_sell_listings_ = 0u;
    price_in_local_currency_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCClientMarketDataEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }
      
      // optional uint32 item_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_sell_listings;
        break;
      }
      
      // optional uint32 item_sell_listings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_sell_listings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_sell_listings_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price_in_local_currency;
        break;
      }
      
      // optional uint32 price_in_local_currency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_in_local_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_in_local_currency_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCClientMarketDataEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_index(), output);
  }
  
  // optional uint32 item_quality = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_quality(), output);
  }
  
  // optional uint32 item_sell_listings = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_sell_listings(), output);
  }
  
  // optional uint32 price_in_local_currency = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price_in_local_currency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCClientMarketDataEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_def_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_index(), target);
  }
  
  // optional uint32 item_quality = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_quality(), target);
  }
  
  // optional uint32 item_sell_listings = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_sell_listings(), target);
  }
  
  // optional uint32 price_in_local_currency = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price_in_local_currency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCClientMarketDataEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_def_index = 1;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }
    
    // optional uint32 item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }
    
    // optional uint32 item_sell_listings = 3;
    if (has_item_sell_listings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_sell_listings());
    }
    
    // optional uint32 price_in_local_currency = 4;
    if (has_price_in_local_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_in_local_currency());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientMarketDataEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCClientMarketDataEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCClientMarketDataEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataEntry::MergeFrom(const CMsgGCClientMarketDataEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_def_index(from.item_def_index());
    }
    if (from._has_bit(1)) {
      set_item_quality(from.item_quality());
    }
    if (from._has_bit(2)) {
      set_item_sell_listings(from.item_sell_listings());
    }
    if (from._has_bit(3)) {
      set_price_in_local_currency(from.price_in_local_currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCClientMarketDataEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataEntry::CopyFrom(const CMsgGCClientMarketDataEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataEntry::IsInitialized() const {
  
  return true;
}

void CMsgGCClientMarketDataEntry::Swap(CMsgGCClientMarketDataEntry* other) {
  if (other != this) {
    std::swap(item_def_index_, other->item_def_index_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(item_sell_listings_, other->item_sell_listings_);
    std::swap(price_in_local_currency_, other->price_in_local_currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCClientMarketDataEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCClientMarketDataEntry_descriptor_;
  metadata.reflection = CMsgGCClientMarketDataEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCClientMarketData::kEntriesFieldNumber;
#endif  // !_MSC_VER

CMsgGCClientMarketData::CMsgGCClientMarketData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCClientMarketData::InitAsDefaultInstance() {
}

CMsgGCClientMarketData::CMsgGCClientMarketData(const CMsgGCClientMarketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCClientMarketData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCClientMarketData::~CMsgGCClientMarketData() {
  SharedDtor();
}

void CMsgGCClientMarketData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCClientMarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientMarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCClientMarketData_descriptor_;
}

const CMsgGCClientMarketData& CMsgGCClientMarketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgGCClientMarketData* CMsgGCClientMarketData::default_instance_ = NULL;

CMsgGCClientMarketData* CMsgGCClientMarketData::New() const {
  return new CMsgGCClientMarketData;
}

void CMsgGCClientMarketData::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCClientMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCClientMarketDataEntry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCClientMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgGCClientMarketDataEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCClientMarketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgGCClientMarketDataEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCClientMarketData::ByteSize() const {
  int total_size = 0;
  
  // repeated .CMsgGCClientMarketDataEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientMarketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCClientMarketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCClientMarketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketData::MergeFrom(const CMsgGCClientMarketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCClientMarketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketData::CopyFrom(const CMsgGCClientMarketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketData::IsInitialized() const {
  
  return true;
}

void CMsgGCClientMarketData::Swap(CMsgGCClientMarketData* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCClientMarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCClientMarketData_descriptor_;
  metadata.reflection = CMsgGCClientMarketData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyToolToItem::kToolItemIdFieldNumber;
const int CMsgApplyToolToItem::kSubjectItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyToolToItem::CMsgApplyToolToItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyToolToItem::InitAsDefaultInstance() {
}

CMsgApplyToolToItem::CMsgApplyToolToItem(const CMsgApplyToolToItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyToolToItem::SharedCtor() {
  _cached_size_ = 0;
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  subject_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyToolToItem::~CMsgApplyToolToItem() {
  SharedDtor();
}

void CMsgApplyToolToItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyToolToItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyToolToItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyToolToItem_descriptor_;
}

const CMsgApplyToolToItem& CMsgApplyToolToItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyToolToItem* CMsgApplyToolToItem::default_instance_ = NULL;

CMsgApplyToolToItem* CMsgApplyToolToItem::New() const {
  return new CMsgApplyToolToItem;
}

void CMsgApplyToolToItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tool_item_id_ = GOOGLE_ULONGLONG(0);
    subject_item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyToolToItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subject_item_id;
        break;
      }
      
      // optional uint64 subject_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subject_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyToolToItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }
  
  // optional uint64 subject_item_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subject_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyToolToItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }
  
  // optional uint64 subject_item_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subject_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyToolToItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tool_item_id = 1;
    if (has_tool_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }
    
    // optional uint64 subject_item_id = 2;
    if (has_subject_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyToolToItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyToolToItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyToolToItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyToolToItem::MergeFrom(const CMsgApplyToolToItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tool_item_id(from.tool_item_id());
    }
    if (from._has_bit(1)) {
      set_subject_item_id(from.subject_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyToolToItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyToolToItem::CopyFrom(const CMsgApplyToolToItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyToolToItem::IsInitialized() const {
  
  return true;
}

void CMsgApplyToolToItem::Swap(CMsgApplyToolToItem* other) {
  if (other != this) {
    std::swap(tool_item_id_, other->tool_item_id_);
    std::swap(subject_item_id_, other->subject_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyToolToItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyToolToItem_descriptor_;
  metadata.reflection = CMsgApplyToolToItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyToolToBaseItem::kToolItemIdFieldNumber;
const int CMsgApplyToolToBaseItem::kBaseitemDefIndexFieldNumber;
#endif  // !_MSC_VER

CMsgApplyToolToBaseItem::CMsgApplyToolToBaseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgApplyToolToBaseItem::InitAsDefaultInstance() {
}

CMsgApplyToolToBaseItem::CMsgApplyToolToBaseItem(const CMsgApplyToolToBaseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgApplyToolToBaseItem::SharedCtor() {
  _cached_size_ = 0;
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  baseitem_def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyToolToBaseItem::~CMsgApplyToolToBaseItem() {
  SharedDtor();
}

void CMsgApplyToolToBaseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyToolToBaseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyToolToBaseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyToolToBaseItem_descriptor_;
}

const CMsgApplyToolToBaseItem& CMsgApplyToolToBaseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgApplyToolToBaseItem* CMsgApplyToolToBaseItem::default_instance_ = NULL;

CMsgApplyToolToBaseItem* CMsgApplyToolToBaseItem::New() const {
  return new CMsgApplyToolToBaseItem;
}

void CMsgApplyToolToBaseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tool_item_id_ = GOOGLE_ULONGLONG(0);
    baseitem_def_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyToolToBaseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_baseitem_def_index;
        break;
      }
      
      // optional uint32 baseitem_def_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseitem_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseitem_def_index_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgApplyToolToBaseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }
  
  // optional uint32 baseitem_def_index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->baseitem_def_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgApplyToolToBaseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }
  
  // optional uint32 baseitem_def_index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->baseitem_def_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgApplyToolToBaseItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tool_item_id = 1;
    if (has_tool_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }
    
    // optional uint32 baseitem_def_index = 2;
    if (has_baseitem_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseitem_def_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyToolToBaseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyToolToBaseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyToolToBaseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyToolToBaseItem::MergeFrom(const CMsgApplyToolToBaseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tool_item_id(from.tool_item_id());
    }
    if (from._has_bit(1)) {
      set_baseitem_def_index(from.baseitem_def_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyToolToBaseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyToolToBaseItem::CopyFrom(const CMsgApplyToolToBaseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyToolToBaseItem::IsInitialized() const {
  
  return true;
}

void CMsgApplyToolToBaseItem::Swap(CMsgApplyToolToBaseItem* other) {
  if (other != this) {
    std::swap(tool_item_id_, other->tool_item_id_);
    std::swap(baseitem_def_index_, other->baseitem_def_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyToolToBaseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyToolToBaseItem_descriptor_;
  metadata.reflection = CMsgApplyToolToBaseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRecipeComponent::kSubjectItemIdFieldNumber;
const int CMsgRecipeComponent::kAttributeIndexFieldNumber;
#endif  // !_MSC_VER

CMsgRecipeComponent::CMsgRecipeComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgRecipeComponent::InitAsDefaultInstance() {
}

CMsgRecipeComponent::CMsgRecipeComponent(const CMsgRecipeComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgRecipeComponent::SharedCtor() {
  _cached_size_ = 0;
  subject_item_id_ = GOOGLE_ULONGLONG(0);
  attribute_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRecipeComponent::~CMsgRecipeComponent() {
  SharedDtor();
}

void CMsgRecipeComponent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRecipeComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRecipeComponent_descriptor_;
}

const CMsgRecipeComponent& CMsgRecipeComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgRecipeComponent* CMsgRecipeComponent::default_instance_ = NULL;

CMsgRecipeComponent* CMsgRecipeComponent::New() const {
  return new CMsgRecipeComponent;
}

void CMsgRecipeComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subject_item_id_ = GOOGLE_ULONGLONG(0);
    attribute_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 subject_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_index;
        break;
      }
      
      // optional uint64 attribute_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attribute_index_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 subject_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subject_item_id(), output);
  }
  
  // optional uint64 attribute_index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->attribute_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgRecipeComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 subject_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subject_item_id(), target);
  }
  
  // optional uint64 attribute_index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->attribute_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgRecipeComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 subject_item_id = 1;
    if (has_subject_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }
    
    // optional uint64 attribute_index = 2;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attribute_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRecipeComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRecipeComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRecipeComponent::MergeFrom(const CMsgRecipeComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_subject_item_id(from.subject_item_id());
    }
    if (from._has_bit(1)) {
      set_attribute_index(from.attribute_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRecipeComponent::CopyFrom(const CMsgRecipeComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecipeComponent::IsInitialized() const {
  
  return true;
}

void CMsgRecipeComponent::Swap(CMsgRecipeComponent* other) {
  if (other != this) {
    std::swap(subject_item_id_, other->subject_item_id_);
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRecipeComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRecipeComponent_descriptor_;
  metadata.reflection = CMsgRecipeComponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFulfillDynamicRecipeComponent::kToolItemIdFieldNumber;
const int CMsgFulfillDynamicRecipeComponent::kConsumptionComponentsFieldNumber;
#endif  // !_MSC_VER

CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFulfillDynamicRecipeComponent::InitAsDefaultInstance() {
}

CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent(const CMsgFulfillDynamicRecipeComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFulfillDynamicRecipeComponent::SharedCtor() {
  _cached_size_ = 0;
  tool_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFulfillDynamicRecipeComponent::~CMsgFulfillDynamicRecipeComponent() {
  SharedDtor();
}

void CMsgFulfillDynamicRecipeComponent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFulfillDynamicRecipeComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFulfillDynamicRecipeComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFulfillDynamicRecipeComponent_descriptor_;
}

const CMsgFulfillDynamicRecipeComponent& CMsgFulfillDynamicRecipeComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgFulfillDynamicRecipeComponent* CMsgFulfillDynamicRecipeComponent::default_instance_ = NULL;

CMsgFulfillDynamicRecipeComponent* CMsgFulfillDynamicRecipeComponent::New() const {
  return new CMsgFulfillDynamicRecipeComponent;
}

void CMsgFulfillDynamicRecipeComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tool_item_id_ = GOOGLE_ULONGLONG(0);
  }
  consumption_components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFulfillDynamicRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumption_components;
        break;
      }
      
      // repeated .CMsgRecipeComponent consumption_components = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumption_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumption_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumption_components;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFulfillDynamicRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }
  
  // repeated .CMsgRecipeComponent consumption_components = 2;
  for (int i = 0; i < this->consumption_components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consumption_components(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFulfillDynamicRecipeComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tool_item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }
  
  // repeated .CMsgRecipeComponent consumption_components = 2;
  for (int i = 0; i < this->consumption_components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consumption_components(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFulfillDynamicRecipeComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tool_item_id = 1;
    if (has_tool_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }
    
  }
  // repeated .CMsgRecipeComponent consumption_components = 2;
  total_size += 1 * this->consumption_components_size();
  for (int i = 0; i < this->consumption_components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumption_components(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFulfillDynamicRecipeComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFulfillDynamicRecipeComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const CMsgFulfillDynamicRecipeComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  consumption_components_.MergeFrom(from.consumption_components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tool_item_id(from.tool_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const CMsgFulfillDynamicRecipeComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFulfillDynamicRecipeComponent::IsInitialized() const {
  
  return true;
}

void CMsgFulfillDynamicRecipeComponent::Swap(CMsgFulfillDynamicRecipeComponent* other) {
  if (other != this) {
    std::swap(tool_item_id_, other->tool_item_id_);
    consumption_components_.Swap(&other->consumption_components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFulfillDynamicRecipeComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFulfillDynamicRecipeComponent_descriptor_;
  metadata.reflection = CMsgFulfillDynamicRecipeComponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetItemEffectVerticalOffset::kItemIdFieldNumber;
const int CMsgSetItemEffectVerticalOffset::kOffsetFieldNumber;
#endif  // !_MSC_VER

CMsgSetItemEffectVerticalOffset::CMsgSetItemEffectVerticalOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetItemEffectVerticalOffset::InitAsDefaultInstance() {
}

CMsgSetItemEffectVerticalOffset::CMsgSetItemEffectVerticalOffset(const CMsgSetItemEffectVerticalOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetItemEffectVerticalOffset::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetItemEffectVerticalOffset::~CMsgSetItemEffectVerticalOffset() {
  SharedDtor();
}

void CMsgSetItemEffectVerticalOffset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetItemEffectVerticalOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetItemEffectVerticalOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetItemEffectVerticalOffset_descriptor_;
}

const CMsgSetItemEffectVerticalOffset& CMsgSetItemEffectVerticalOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSetItemEffectVerticalOffset* CMsgSetItemEffectVerticalOffset::default_instance_ = NULL;

CMsgSetItemEffectVerticalOffset* CMsgSetItemEffectVerticalOffset::New() const {
  return new CMsgSetItemEffectVerticalOffset;
}

void CMsgSetItemEffectVerticalOffset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetItemEffectVerticalOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_offset;
        break;
      }
      
      // optional float offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetItemEffectVerticalOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional float offset = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetItemEffectVerticalOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional float offset = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetItemEffectVerticalOffset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional float offset = 2;
    if (has_offset()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetItemEffectVerticalOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetItemEffectVerticalOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetItemEffectVerticalOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetItemEffectVerticalOffset::MergeFrom(const CMsgSetItemEffectVerticalOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetItemEffectVerticalOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemEffectVerticalOffset::CopyFrom(const CMsgSetItemEffectVerticalOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemEffectVerticalOffset::IsInitialized() const {
  
  return true;
}

void CMsgSetItemEffectVerticalOffset::Swap(CMsgSetItemEffectVerticalOffset* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetItemEffectVerticalOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetItemEffectVerticalOffset_descriptor_;
  metadata.reflection = CMsgSetItemEffectVerticalOffset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetHatEffectUseHeadOrigin::kItemIdFieldNumber;
const int CMsgSetHatEffectUseHeadOrigin::kUseHeadFieldNumber;
#endif  // !_MSC_VER

CMsgSetHatEffectUseHeadOrigin::CMsgSetHatEffectUseHeadOrigin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSetHatEffectUseHeadOrigin::InitAsDefaultInstance() {
}

CMsgSetHatEffectUseHeadOrigin::CMsgSetHatEffectUseHeadOrigin(const CMsgSetHatEffectUseHeadOrigin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSetHatEffectUseHeadOrigin::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  use_head_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetHatEffectUseHeadOrigin::~CMsgSetHatEffectUseHeadOrigin() {
  SharedDtor();
}

void CMsgSetHatEffectUseHeadOrigin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSetHatEffectUseHeadOrigin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetHatEffectUseHeadOrigin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetHatEffectUseHeadOrigin_descriptor_;
}

const CMsgSetHatEffectUseHeadOrigin& CMsgSetHatEffectUseHeadOrigin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgSetHatEffectUseHeadOrigin* CMsgSetHatEffectUseHeadOrigin::default_instance_ = NULL;

CMsgSetHatEffectUseHeadOrigin* CMsgSetHatEffectUseHeadOrigin::New() const {
  return new CMsgSetHatEffectUseHeadOrigin;
}

void CMsgSetHatEffectUseHeadOrigin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    use_head_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetHatEffectUseHeadOrigin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_head;
        break;
      }
      
      // optional bool use_head = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_head_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSetHatEffectUseHeadOrigin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional bool use_head = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_head(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSetHatEffectUseHeadOrigin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional bool use_head = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_head(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSetHatEffectUseHeadOrigin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional bool use_head = 2;
    if (has_use_head()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetHatEffectUseHeadOrigin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetHatEffectUseHeadOrigin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetHatEffectUseHeadOrigin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetHatEffectUseHeadOrigin::MergeFrom(const CMsgSetHatEffectUseHeadOrigin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_item_id(from.item_id());
    }
    if (from._has_bit(1)) {
      set_use_head(from.use_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetHatEffectUseHeadOrigin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHatEffectUseHeadOrigin::CopyFrom(const CMsgSetHatEffectUseHeadOrigin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHatEffectUseHeadOrigin::IsInitialized() const {
  
  return true;
}

void CMsgSetHatEffectUseHeadOrigin::Swap(CMsgSetHatEffectUseHeadOrigin* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(use_head_, other->use_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetHatEffectUseHeadOrigin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetHatEffectUseHeadOrigin_descriptor_;
  metadata.reflection = CMsgSetHatEffectUseHeadOrigin_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgDeliverGiftResponseGiver::_default_receiver_account_name_;
#ifndef _MSC_VER
const int CMsgDeliverGiftResponseGiver::kResponseCodeFieldNumber;
const int CMsgDeliverGiftResponseGiver::kReceiverAccountNameFieldNumber;
#endif  // !_MSC_VER

CMsgDeliverGiftResponseGiver::CMsgDeliverGiftResponseGiver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDeliverGiftResponseGiver::InitAsDefaultInstance() {
}

CMsgDeliverGiftResponseGiver::CMsgDeliverGiftResponseGiver(const CMsgDeliverGiftResponseGiver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDeliverGiftResponseGiver::SharedCtor() {
  _cached_size_ = 0;
  response_code_ = 0u;
  receiver_account_name_ = const_cast< ::std::string*>(&_default_receiver_account_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDeliverGiftResponseGiver::~CMsgDeliverGiftResponseGiver() {
  SharedDtor();
}

void CMsgDeliverGiftResponseGiver::SharedDtor() {
  if (receiver_account_name_ != &_default_receiver_account_name_) {
    delete receiver_account_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDeliverGiftResponseGiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDeliverGiftResponseGiver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDeliverGiftResponseGiver_descriptor_;
}

const CMsgDeliverGiftResponseGiver& CMsgDeliverGiftResponseGiver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CMsgDeliverGiftResponseGiver* CMsgDeliverGiftResponseGiver::default_instance_ = NULL;

CMsgDeliverGiftResponseGiver* CMsgDeliverGiftResponseGiver::New() const {
  return new CMsgDeliverGiftResponseGiver;
}

void CMsgDeliverGiftResponseGiver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_code_ = 0u;
    if (_has_bit(1)) {
      if (receiver_account_name_ != &_default_receiver_account_name_) {
        receiver_account_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDeliverGiftResponseGiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_code_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_receiver_account_name;
        break;
      }
      
      // optional string receiver_account_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver_account_name().data(), this->receiver_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDeliverGiftResponseGiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 response_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response_code(), output);
  }
  
  // optional string receiver_account_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_account_name().data(), this->receiver_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->receiver_account_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDeliverGiftResponseGiver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 response_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response_code(), target);
  }
  
  // optional string receiver_account_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_account_name().data(), this->receiver_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->receiver_account_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDeliverGiftResponseGiver::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 response_code = 1;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response_code());
    }
    
    // optional string receiver_account_name = 2;
    if (has_receiver_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver_account_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDeliverGiftResponseGiver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDeliverGiftResponseGiver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDeliverGiftResponseGiver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDeliverGiftResponseGiver::MergeFrom(const CMsgDeliverGiftResponseGiver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_response_code(from.response_code());
    }
    if (from._has_bit(1)) {
      set_receiver_account_name(from.receiver_account_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDeliverGiftResponseGiver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDeliverGiftResponseGiver::CopyFrom(const CMsgDeliverGiftResponseGiver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDeliverGiftResponseGiver::IsInitialized() const {
  
  return true;
}

void CMsgDeliverGiftResponseGiver::Swap(CMsgDeliverGiftResponseGiver* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(receiver_account_name_, other->receiver_account_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDeliverGiftResponseGiver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDeliverGiftResponseGiver_descriptor_;
  metadata.reflection = CMsgDeliverGiftResponseGiver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOEconGameAccountForGameServers::kSkillRatingFieldNumber;
const int CSOEconGameAccountForGameServers::kSkillRating6V6FieldNumber;
const int CSOEconGameAccountForGameServers::kSkillRating9V9FieldNumber;
const int CSOEconGameAccountForGameServers::kSkillRating12V12FieldNumber;
#endif  // !_MSC_VER

CSOEconGameAccountForGameServers::CSOEconGameAccountForGameServers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSOEconGameAccountForGameServers::InitAsDefaultInstance() {
}

CSOEconGameAccountForGameServers::CSOEconGameAccountForGameServers(const CSOEconGameAccountForGameServers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSOEconGameAccountForGameServers::SharedCtor() {
  _cached_size_ = 0;
  skill_rating_ = 0u;
  skill_rating_6v6_ = 0u;
  skill_rating_9v9_ = 0u;
  skill_rating_12v12_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOEconGameAccountForGameServers::~CSOEconGameAccountForGameServers() {
  SharedDtor();
}

void CSOEconGameAccountForGameServers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOEconGameAccountForGameServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOEconGameAccountForGameServers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOEconGameAccountForGameServers_descriptor_;
}

const CSOEconGameAccountForGameServers& CSOEconGameAccountForGameServers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CSOEconGameAccountForGameServers* CSOEconGameAccountForGameServers::default_instance_ = NULL;

CSOEconGameAccountForGameServers* CSOEconGameAccountForGameServers::New() const {
  return new CSOEconGameAccountForGameServers;
}

void CSOEconGameAccountForGameServers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_rating_ = 0u;
    skill_rating_6v6_ = 0u;
    skill_rating_9v9_ = 0u;
    skill_rating_12v12_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOEconGameAccountForGameServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_rating_6v6 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_rating_6v6_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_rating;
        break;
      }
      
      // optional uint32 skill_rating = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_rating_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_rating_9v9;
        break;
      }
      
      // optional uint32 skill_rating_9v9 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_rating_9v9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_rating_9v9_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_rating_12v12;
        break;
      }
      
      // optional uint32 skill_rating_12v12 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_rating_12v12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_rating_12v12_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOEconGameAccountForGameServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skill_rating_6v6 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_rating_6v6(), output);
  }
  
  // optional uint32 skill_rating = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_rating(), output);
  }
  
  // optional uint32 skill_rating_9v9 = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_rating_9v9(), output);
  }
  
  // optional uint32 skill_rating_12v12 = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill_rating_12v12(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSOEconGameAccountForGameServers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skill_rating_6v6 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_rating_6v6(), target);
  }
  
  // optional uint32 skill_rating = 3;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_rating(), target);
  }
  
  // optional uint32 skill_rating_9v9 = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_rating_9v9(), target);
  }
  
  // optional uint32 skill_rating_12v12 = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skill_rating_12v12(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSOEconGameAccountForGameServers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill_rating = 3;
    if (has_skill_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_rating());
    }
    
    // optional uint32 skill_rating_6v6 = 2;
    if (has_skill_rating_6v6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_rating_6v6());
    }
    
    // optional uint32 skill_rating_9v9 = 4;
    if (has_skill_rating_9v9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_rating_9v9());
    }
    
    // optional uint32 skill_rating_12v12 = 5;
    if (has_skill_rating_12v12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_rating_12v12());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOEconGameAccountForGameServers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOEconGameAccountForGameServers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOEconGameAccountForGameServers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOEconGameAccountForGameServers::MergeFrom(const CSOEconGameAccountForGameServers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skill_rating(from.skill_rating());
    }
    if (from._has_bit(1)) {
      set_skill_rating_6v6(from.skill_rating_6v6());
    }
    if (from._has_bit(2)) {
      set_skill_rating_9v9(from.skill_rating_9v9());
    }
    if (from._has_bit(3)) {
      set_skill_rating_12v12(from.skill_rating_12v12());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOEconGameAccountForGameServers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconGameAccountForGameServers::CopyFrom(const CSOEconGameAccountForGameServers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountForGameServers::IsInitialized() const {
  
  return true;
}

void CSOEconGameAccountForGameServers::Swap(CSOEconGameAccountForGameServers* other) {
  if (other != this) {
    std::swap(skill_rating_, other->skill_rating_);
    std::swap(skill_rating_6v6_, other->skill_rating_6v6_);
    std::swap(skill_rating_9v9_, other->skill_rating_9v9_);
    std::swap(skill_rating_12v12_, other->skill_rating_12v12_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOEconGameAccountForGameServers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOEconGameAccountForGameServers_descriptor_;
  metadata.reflection = CSOEconGameAccountForGameServers_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::_default_item_description_;
#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kGameitemidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kItemDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedCtor() {
  _cached_size_ = 0;
  gameitemid_ = 0u;
  item_description_ = const_cast< ::std::string*>(&_default_item_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription() {
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedDtor() {
  if (item_description_ != &_default_item_description_) {
    delete item_description_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::New() const {
  return new CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameitemid_ = 0u;
    if (_has_bit(1)) {
      if (item_description_ != &_default_item_description_) {
        item_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameitemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_description;
        break;
      }
      
      // optional string item_description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_description().data(), this->item_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gameitemid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameitemid(), output);
  }
  
  // optional string item_description = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->item_description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gameitemid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameitemid(), target);
  }
  
  // optional string item_description = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameitemid = 1;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }
    
    // optional string item_description = 2;
    if (has_item_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gameitemid(from.gameitemid());
    }
    if (from._has_bit(1)) {
      set_item_description(from.item_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::IsInitialized() const {
  
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Swap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  if (other != this) {
    std::swap(gameitemid_, other->gameitemid_);
    std::swap(item_description_, other->item_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::_default_language_;
#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kLanguageFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kDescriptionsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedCtor() {
  _cached_size_ = 0;
  language_ = const_cast< ::std::string*>(&_default_language_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock() {
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedDtor() {
  if (language_ != &_default_language_) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::New() const {
  return new CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (language_ != &_default_language_) {
        language_->clear();
      }
    }
  }
  descriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptions;
        break;
      }
      
      // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string language = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->language(), output);
  }
  
  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (int i = 0; i < this->descriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string language = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }
  
  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (int i = 0; i < this->descriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->descriptions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
  }
  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  total_size += 1 * this->descriptions_size();
  for (int i = 0; i < this->descriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  descriptions_.MergeFrom(from.descriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::IsInitialized() const {
  
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Swap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    descriptions_.Swap(&other->descriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request::kAppidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request::kLanguagesFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_PopulateItemDescriptions_Request::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(const CWorkshop_PopulateItemDescriptions_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request::~CWorkshop_PopulateItemDescriptions_Request() {
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request& CWorkshop_PopulateItemDescriptions_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request* CWorkshop_PopulateItemDescriptions_Request::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request* CWorkshop_PopulateItemDescriptions_Request::New() const {
  return new CWorkshop_PopulateItemDescriptions_Request;
}

void CWorkshop_PopulateItemDescriptions_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  languages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_PopulateItemDescriptions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languages;
        break;
      }
      
      // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_languages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languages;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }
  
  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (int i = 0; i < this->languages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->languages(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }
  
  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (int i = 0; i < this->languages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->languages(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
  }
  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  total_size += 1 * this->languages_size();
  for (int i = 0; i < this->languages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->languages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_PopulateItemDescriptions_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  languages_.MergeFrom(from.languages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request::IsInitialized() const {
  
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request::Swap(CWorkshop_PopulateItemDescriptions_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    languages_.Swap(&other->languages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_GetContributors_Request::kAppidFieldNumber;
const int CWorkshop_GetContributors_Request::kGameitemidFieldNumber;
#endif  // !_MSC_VER

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_GetContributors_Request::InitAsDefaultInstance() {
}

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(const CWorkshop_GetContributors_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  gameitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_GetContributors_Request::~CWorkshop_GetContributors_Request() {
  SharedDtor();
}

void CWorkshop_GetContributors_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_GetContributors_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_GetContributors_Request_descriptor_;
}

const CWorkshop_GetContributors_Request& CWorkshop_GetContributors_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_GetContributors_Request* CWorkshop_GetContributors_Request::default_instance_ = NULL;

CWorkshop_GetContributors_Request* CWorkshop_GetContributors_Request::New() const {
  return new CWorkshop_GetContributors_Request;
}

void CWorkshop_GetContributors_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    gameitemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_GetContributors_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameitemid;
        break;
      }
      
      // optional uint32 gameitemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_GetContributors_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }
  
  // optional uint32 gameitemid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_GetContributors_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }
  
  // optional uint32 gameitemid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_GetContributors_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_GetContributors_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_GetContributors_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Request::MergeFrom(const CWorkshop_GetContributors_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_appid(from.appid());
    }
    if (from._has_bit(1)) {
      set_gameitemid(from.gameitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_GetContributors_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::CopyFrom(const CWorkshop_GetContributors_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Request::IsInitialized() const {
  
  return true;
}

void CWorkshop_GetContributors_Request::Swap(CWorkshop_GetContributors_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(gameitemid_, other->gameitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_GetContributors_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_GetContributors_Request_descriptor_;
  metadata.reflection = CWorkshop_GetContributors_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_GetContributors_Response::kContributorsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_GetContributors_Response::InitAsDefaultInstance() {
}

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(const CWorkshop_GetContributors_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_GetContributors_Response::~CWorkshop_GetContributors_Response() {
  SharedDtor();
}

void CWorkshop_GetContributors_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_GetContributors_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_GetContributors_Response_descriptor_;
}

const CWorkshop_GetContributors_Response& CWorkshop_GetContributors_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_GetContributors_Response* CWorkshop_GetContributors_Response::default_instance_ = NULL;

CWorkshop_GetContributors_Response* CWorkshop_GetContributors_Response::New() const {
  return new CWorkshop_GetContributors_Response;
}

void CWorkshop_GetContributors_Response::Clear() {
  contributors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_GetContributors_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 contributors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contributors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_contributors())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_contributors())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_contributors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_GetContributors_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 contributors = 1;
  for (int i = 0; i < this->contributors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->contributors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_GetContributors_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 contributors = 1;
  for (int i = 0; i < this->contributors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->contributors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_GetContributors_Response::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed64 contributors = 1;
  {
    int data_size = 0;
    data_size = 8 * this->contributors_size();
    total_size += 1 * this->contributors_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_GetContributors_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_GetContributors_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Response::MergeFrom(const CWorkshop_GetContributors_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  contributors_.MergeFrom(from.contributors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_GetContributors_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::CopyFrom(const CWorkshop_GetContributors_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Response::IsInitialized() const {
  
  return true;
}

void CWorkshop_GetContributors_Response::Swap(CWorkshop_GetContributors_Response* other) {
  if (other != this) {
    contributors_.Swap(&other->contributors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_GetContributors_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_GetContributors_Response_descriptor_;
  metadata.reflection = CWorkshop_GetContributors_Response_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::_default_rule_description_;
#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kWorkshopFileIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedCtor() {
  _cached_size_ = 0;
  workshop_file_id_ = GOOGLE_ULONGLONG(0);
  revenue_percentage_ = 0;
  rule_description_ = const_cast< ::std::string*>(&_default_rule_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedDtor() {
  if (rule_description_ != &_default_rule_description_) {
    delete rule_description_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::New() const {
  return new CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    workshop_file_id_ = GOOGLE_ULONGLONG(0);
    revenue_percentage_ = 0;
    if (_has_bit(2)) {
      if (rule_description_ != &_default_rule_description_) {
        rule_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 workshop_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &workshop_file_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_revenue_percentage;
        break;
      }
      
      // optional float revenue_percentage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_revenue_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rule_description;
        break;
      }
      
      // optional string rule_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 workshop_file_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->workshop_file_id(), output);
  }
  
  // optional float revenue_percentage = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }
  
  // optional string rule_description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rule_description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 workshop_file_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->workshop_file_id(), target);
  }
  
  // optional float revenue_percentage = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }
  
  // optional string rule_description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 workshop_file_id = 1;
    if (has_workshop_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workshop_file_id());
    }
    
    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }
    
    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_workshop_file_id(from.workshop_file_id());
    }
    if (from._has_bit(1)) {
      set_revenue_percentage(from.revenue_percentage());
    }
    if (from._has_bit(2)) {
      set_rule_description(from.rule_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::IsInitialized() const {
  
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  if (other != this) {
    std::swap(workshop_file_id_, other->workshop_file_id_);
    std::swap(revenue_percentage_, other->revenue_percentage_);
    std::swap(rule_description_, other->rule_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::_default_rule_description_;
#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kAccountIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  revenue_percentage_ = 0;
  rule_description_ = const_cast< ::std::string*>(&_default_rule_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedDtor() {
  if (rule_description_ != &_default_rule_description_) {
    delete rule_description_;
  }
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::New() const {
  return new CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    revenue_percentage_ = 0;
    if (_has_bit(2)) {
      if (rule_description_ != &_default_rule_description_) {
        rule_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_revenue_percentage;
        break;
      }
      
      // optional float revenue_percentage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_revenue_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rule_description;
        break;
      }
      
      // optional string rule_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }
  
  // optional float revenue_percentage = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }
  
  // optional string rule_description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rule_description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 account_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }
  
  // optional float revenue_percentage = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }
  
  // optional string rule_description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }
    
    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(1)) {
      set_revenue_percentage(from.revenue_percentage());
    }
    if (from._has_bit(2)) {
      set_rule_description(from.rule_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::IsInitialized() const {
  
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(revenue_percentage_, other->revenue_percentage_);
    std::swap(rule_description_, other->rule_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request::kAppidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kGameitemidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kAssociatedWorkshopFilesFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kPartnerAccountsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Request::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(const CWorkshop_SetItemPaymentRules_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  gameitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request::~CWorkshop_SetItemPaymentRules_Request() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request& CWorkshop_SetItemPaymentRules_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request* CWorkshop_SetItemPaymentRules_Request::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request* CWorkshop_SetItemPaymentRules_Request::New() const {
  return new CWorkshop_SetItemPaymentRules_Request;
}

void CWorkshop_SetItemPaymentRules_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    gameitemid_ = 0u;
  }
  associated_workshop_files_.Clear();
  partner_accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameitemid;
        break;
      }
      
      // optional uint32 gameitemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_associated_workshop_files;
        break;
      }
      
      // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_associated_workshop_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_associated_workshop_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_associated_workshop_files;
        if (input->ExpectTag(34)) goto parse_partner_accounts;
        break;
      }
      
      // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partner_accounts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }
  
  // optional uint32 gameitemid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }
  
  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (int i = 0; i < this->associated_workshop_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->associated_workshop_files(i), output);
  }
  
  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (int i = 0; i < this->partner_accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partner_accounts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }
  
  // optional uint32 gameitemid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }
  
  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (int i = 0; i < this->associated_workshop_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->associated_workshop_files(i), target);
  }
  
  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (int i = 0; i < this->partner_accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->partner_accounts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }
    
  }
  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  total_size += 1 * this->associated_workshop_files_size();
  for (int i = 0; i < this->associated_workshop_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->associated_workshop_files(i));
  }
  
  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  total_size += 1 * this->partner_accounts_size();
  for (int i = 0; i < this->partner_accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_accounts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  associated_workshop_files_.MergeFrom(from.associated_workshop_files_);
  partner_accounts_.MergeFrom(from.partner_accounts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_appid(from.appid());
    }
    if (from._has_bit(1)) {
      set_gameitemid(from.gameitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request::IsInitialized() const {
  
  return true;
}

void CWorkshop_SetItemPaymentRules_Request::Swap(CWorkshop_SetItemPaymentRules_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(gameitemid_, other->gameitemid_);
    associated_workshop_files_.Swap(&other->associated_workshop_files_);
    partner_accounts_.Swap(&other->partner_accounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWorkshop_SetItemPaymentRules_Response::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(const CWorkshop_SetItemPaymentRules_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Response::~CWorkshop_SetItemPaymentRules_Response() {
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Response_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Response& CWorkshop_SetItemPaymentRules_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fgcmessages_2eproto();  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Response* CWorkshop_SetItemPaymentRules_Response::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Response* CWorkshop_SetItemPaymentRules_Response::New() const {
  return new CWorkshop_SetItemPaymentRules_Response;
}

void CWorkshop_SetItemPaymentRules_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWorkshop_SetItemPaymentRules_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWorkshop_SetItemPaymentRules_Response::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWorkshop_SetItemPaymentRules_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Response::IsInitialized() const {
  
  return true;
}

void CWorkshop_SetItemPaymentRules_Response::Swap(CWorkshop_SetItemPaymentRules_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Response_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning( pop )
#endif // _PS3
#endif // _MSC_VER
#if _GNUC
#ifndef _PS3
#pragma GCC diagnostic warning "-Wshadow"
#endif // _PS3
#endif // _GNUC

